(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1516],{2840:function(){(function(){"use strict";var Re;function Ge(f){var b=0;return function(){return b<f.length?{done:!1,value:f[b++]}:{done:!0}}}var H="function"==typeof Object.defineProperties?Object.defineProperty:function(f,b,C){return f==Array.prototype||f==Object.prototype||(f[b]=C.value),f},ht=function Ee(f){f=["object"==typeof globalThis&&globalThis,f,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<f.length;++b){var C=f[b];if(C&&C.Math==Math)return C}throw Error("Cannot find global object")}(this);function ye(f,b){if(b)e:{var C=ht;f=f.split(".");for(var I=0;I<f.length-1;I++){var T=f[I];if(!(T in C))break e;C=C[T]}(b=b(I=C[f=f[f.length-1]]))!=I&&null!=b&&H(C,f,{configurable:!0,writable:!0,value:b})}}function vt(f){return(f={next:f})[Symbol.iterator]=function(){return this},f}function ke(f){var b=typeof Symbol<"u"&&Symbol.iterator&&f[Symbol.iterator];return b?b.call(f):{next:Ge(f)}}function Ne(f){if(!(f instanceof Array)){f=ke(f);for(var b,C=[];!(b=f.next()).done;)C.push(b.value);f=C}return f}ye("Symbol",function(f){function C(R,E){this.h=R,H(this,"description",{configurable:!0,writable:!0,value:E})}if(f)return f;C.prototype.toString=function(){return this.h};var I="jscomp_symbol_"+(1e9*Math.random()>>>0)+"_",T=0;return function b(R){if(this instanceof b)throw new TypeError("Symbol is not a constructor");return new C(I+(R||"")+"_"+T++,R)}}),ye("Symbol.iterator",function(f){if(f)return f;f=Symbol("Symbol.iterator");for(var b="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),C=0;C<b.length;C++){var I=ht[b[C]];"function"==typeof I&&"function"!=typeof I.prototype[f]&&H(I.prototype,f,{configurable:!0,writable:!0,value:function(){return vt(Ge(this))}})}return f});var Oe="function"==typeof Object.assign?Object.assign:function(f,b){for(var C=1;C<arguments.length;C++){var I=arguments[C];if(I)for(var T in I)Object.prototype.hasOwnProperty.call(I,T)&&(f[T]=I[T])}return f};ye("Object.assign",function(f){return f||Oe});var V,fe="function"==typeof Object.create?Object.create:function(f){function b(){}return b.prototype=f,new b};if("function"==typeof Object.setPrototypeOf)V=Object.setPrototypeOf;else{var ee;e:{var Y={};try{Y.__proto__={a:!0},ee=Y.a;break e}catch{}ee=!1}V=ee?function(f,b){if(f.__proto__=b,f.__proto__!==b)throw new TypeError(f+" is not extensible");return f}:null}var J=V;function me(f,b){if(f.prototype=fe(b.prototype),f.prototype.constructor=f,J)J(f,b);else for(var C in b)if("prototype"!=C)if(Object.defineProperties){var I=Object.getOwnPropertyDescriptor(b,C);I&&Object.defineProperty(f,C,I)}else f[C]=b[C];f.za=b.prototype}function xe(){this.m=!1,this.j=null,this.i=void 0,this.h=1,this.v=this.s=0,this.l=null}function rt(f){if(f.m)throw new TypeError("Generator is already running");f.m=!0}function Nt(f,b){f.l={ma:b,na:!0},f.h=f.s||f.v}function Me(f,b,C){return f.h=C,{value:b}}function yn(f){this.h=new xe,this.i=f}function He(f,b,C,I){try{var T=b.call(f.h.j,C);if(!(T instanceof Object))throw new TypeError("Iterator result "+T+" is not an object");if(!T.done)return f.h.m=!1,T;var R=T.value}catch(E){return f.h.j=null,Nt(f.h,E),Ke(f)}return f.h.j=null,I.call(f.h,R),Ke(f)}function Ke(f){for(;f.h.h;)try{var b=f.i(f.h);if(b)return f.h.m=!1,{value:b.value,done:!1}}catch(C){f.h.i=void 0,Nt(f.h,C)}if(f.h.m=!1,f.h.l){if(b=f.h.l,f.h.l=null,b.na)throw b.ma;return{value:b.return,done:!0}}return{value:void 0,done:!0}}function et(f){this.next=function(b){return rt(f.h),f.h.j?b=He(f,f.h.j.next,b,f.h.u):(f.h.u(b),b=Ke(f)),b},this.throw=function(b){return rt(f.h),f.h.j?b=He(f,f.h.j.throw,b,f.h.u):(Nt(f.h,b),b=Ke(f)),b},this.return=function(b){return function cn(f,b){rt(f.h);var C=f.h.j;return C?He(f,"return"in C?C.return:function(I){return{value:I,done:!0}},b,f.h.return):(f.h.return(b),Ke(f))}(f,b)},this[Symbol.iterator]=function(){return this}}function U(f){return function Q(f){function b(I){return f.next(I)}function C(I){return f.throw(I)}return new Promise(function(I,T){!function R(E){E.done?I(E.value):Promise.resolve(E.value).then(b,C).then(R,T)}(f.next())})}(new et(new yn(f)))}function te(f){return f||Array.prototype.fill}xe.prototype.u=function(f){this.i=f},xe.prototype.return=function(f){this.l={return:f},this.h=this.v},ye("Promise",function(f){function b(E){this.i=0,this.j=void 0,this.h=[],this.u=!1;var B=this.l();try{E(B.resolve,B.reject)}catch(G){B.reject(G)}}function C(){this.h=null}function I(E){return E instanceof b?E:new b(function(B){B(E)})}if(f)return f;C.prototype.i=function(E){if(null==this.h){this.h=[];var B=this;this.j(function(){B.m()})}this.h.push(E)};var T=ht.setTimeout;C.prototype.j=function(E){T(E,0)},C.prototype.m=function(){for(;this.h&&this.h.length;){var E=this.h;this.h=[];for(var B=0;B<E.length;++B){var G=E[B];E[B]=null;try{G()}catch(Z){this.l(Z)}}}this.h=null},C.prototype.l=function(E){this.j(function(){throw E})},b.prototype.l=function(){function E(Z){return function(ue){G||(G=!0,Z.call(B,ue))}}var B=this,G=!1;return{resolve:E(this.I),reject:E(this.m)}},b.prototype.I=function(E){if(E===this)this.m(new TypeError("A Promise cannot resolve to itself"));else if(E instanceof b)this.L(E);else{e:switch(typeof E){case"object":var B=null!=E;break e;case"function":B=!0;break e;default:B=!1}B?this.F(E):this.s(E)}},b.prototype.F=function(E){var B=void 0;try{B=E.then}catch(G){return void this.m(G)}"function"==typeof B?this.M(B,E):this.s(E)},b.prototype.m=function(E){this.v(2,E)},b.prototype.s=function(E){this.v(1,E)},b.prototype.v=function(E,B){if(0!=this.i)throw Error("Cannot settle("+E+", "+B+"): Promise already settled in state"+this.i);this.i=E,this.j=B,2===this.i&&this.K(),this.H()},b.prototype.K=function(){var E=this;T(function(){if(E.D()){var B=ht.console;typeof B<"u"&&B.error(E.j)}},1)},b.prototype.D=function(){if(this.u)return!1;var E=ht.CustomEvent,B=ht.Event,G=ht.dispatchEvent;return typeof G>"u"||("function"==typeof E?E=new E("unhandledrejection",{cancelable:!0}):"function"==typeof B?E=new B("unhandledrejection",{cancelable:!0}):(E=ht.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection",!1,!0,E),E.promise=this,E.reason=this.j,G(E))},b.prototype.H=function(){if(null!=this.h){for(var E=0;E<this.h.length;++E)R.i(this.h[E]);this.h=null}};var R=new C;return b.prototype.L=function(E){var B=this.l();E.T(B.resolve,B.reject)},b.prototype.M=function(E,B){var G=this.l();try{E.call(B,G.resolve,G.reject)}catch(Z){G.reject(Z)}},b.prototype.then=function(E,B){function G(Se,pe){return"function"==typeof Se?function(Te){try{Z(Se(Te))}catch(Le){ue(Le)}}:pe}var Z,ue,$e=new b(function(Se,pe){Z=Se,ue=pe});return this.T(G(E,Z),G(B,ue)),$e},b.prototype.catch=function(E){return this.then(void 0,E)},b.prototype.T=function(E,B){function G(){switch(Z.i){case 1:E(Z.j);break;case 2:B(Z.j);break;default:throw Error("Unexpected state: "+Z.i)}}var Z=this;null==this.h?R.i(G):this.h.push(G),this.u=!0},b.resolve=I,b.reject=function(E){return new b(function(B,G){G(E)})},b.race=function(E){return new b(function(B,G){for(var Z=ke(E),ue=Z.next();!ue.done;ue=Z.next())I(ue.value).T(B,G)})},b.all=function(E){var B=ke(E),G=B.next();return G.done?I([]):new b(function(Z,ue){function $e(Te){return function(Le){Se[Te]=Le,0==--pe&&Z(Se)}}var Se=[],pe=0;do{Se.push(void 0),pe++,I(G.value).T($e(Se.length-1),ue),G=B.next()}while(!G.done)})},b}),ye("Array.prototype.keys",function(f){return f||function(){return function D(f,b){f instanceof String&&(f+="");var C=0,I=!1,T={next:function(){if(!I&&C<f.length){var R=C++;return{value:b(R,f[R]),done:!1}}return I=!0,{done:!0,value:void 0}}};return T[Symbol.iterator]=function(){return T},T}(this,function(b){return b})}}),ye("Array.prototype.fill",function(f){return f||function(b,C,I){var T=this.length||0;for(0>C&&(C=Math.max(0,T+C)),(null==I||I>T)&&(I=T),0>(I=Number(I))&&(I=Math.max(0,T+I)),C=Number(C||0);C<I;C++)this[C]=b;return this}}),ye("Int8Array.prototype.fill",te),ye("Uint8Array.prototype.fill",te),ye("Uint8ClampedArray.prototype.fill",te),ye("Int16Array.prototype.fill",te),ye("Uint16Array.prototype.fill",te),ye("Int32Array.prototype.fill",te),ye("Uint32Array.prototype.fill",te),ye("Float32Array.prototype.fill",te),ye("Float64Array.prototype.fill",te),ye("Object.is",function(f){return f||function(b,C){return b===C?0!==b||1/b==1/C:b!=b&&C!=C}}),ye("Array.prototype.includes",function(f){return f||function(b,C){var I=this;I instanceof String&&(I=String(I));var T=I.length;for(0>(C=C||0)&&(C=Math.max(C+T,0));C<T;C++){var R=I[C];if(R===b||Object.is(R,b))return!0}return!1}}),ye("String.prototype.includes",function(f){return f||function(b,C){if(null==this)throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype.includes must not be a regular expression");return-1!==this.indexOf(b,C||0)}});var _e=this||self;function Fe(f,b){f=f.split(".");var I,C=_e;f[0]in C||typeof C.execScript>"u"||C.execScript("var "+f[0]);for(;f.length&&(I=f.shift());)f.length||void 0===b?C=C[I]&&C[I]!==Object.prototype[I]?C[I]:C[I]={}:C[I]=b}function Ve(f){var b;return(b=_e.navigator)&&(b=b.userAgent)||(b=""),-1!=b.indexOf(f)}var st=Array.prototype.map?function(f,b){return Array.prototype.map.call(f,b,void 0)}:function(f,b){for(var C=f.length,I=Array(C),T="string"==typeof f?f.split(""):f,R=0;R<C;R++)R in T&&(I[R]=b.call(void 0,T[R],R,f));return I},X={},St=null;function Wt(){if(!St){St={};for(var f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],C=0;5>C;C++){var I=f.concat(b[C].split(""));X[C]=I;for(var T=0;T<I.length;T++){var R=I[T];void 0===St[R]&&(St[R]=T)}}}}var It=typeof Uint8Array<"u",it=!(Ve("Trident")||Ve("MSIE"))&&"function"==typeof _e.btoa;function Cr(f){if(!it){var b;void 0===b&&(b=0),Wt(),b=X[b];for(var C=Array(Math.floor(f.length/3)),I=b[64]||"",T=0,R=0;T<f.length-2;T+=3){var E=f[T],B=f[T+1],G=f[T+2],Z=b[E>>2];C[R++]=Z+(E=b[(3&E)<<4|B>>4])+(B=b[(15&B)<<2|G>>6])+(G=b[63&G])}switch(Z=0,G=I,f.length-T){case 2:G=b[(15&(Z=f[T+1]))<<2]||I;case 1:C[R]=b[(f=f[T])>>2]+b[(3&f)<<4|Z>>4]+G+I}return C.join("")}for(b="";10240<f.length;)b+=String.fromCharCode.apply(null,f.subarray(0,10240)),f=f.subarray(10240);return b+=String.fromCharCode.apply(null,f),btoa(b)}var Jn,Hl=RegExp("[-_.]","g");function Do(f){switch(f){case"-":return"+";case"_":return"/";case".":return"=";default:return""}}function Po(f){if(!it)return function Lt(f){var b=f.length,C=3*b/4;C%3?C=Math.floor(C):-1!="=.".indexOf(f[b-1])&&(C=-1!="=.".indexOf(f[b-2])?C-2:C-1);var I=new Uint8Array(C),T=0;return function $t(f,b){function C(G){for(;I<f.length;){var Z=f.charAt(I++),ue=St[Z];if(null!=ue)return ue;if(!/^[\s\xa0]*$/.test(Z))throw Error("Unknown base64 encoding at char: "+Z)}return G}Wt();for(var I=0;;){var T=C(-1),R=C(0),E=C(64),B=C(64);if(64===B&&-1===T)break;b(T<<2|R>>4),64!=E&&(b(R<<4&240|E>>2),64!=B&&b(E<<6&192|B))}}(f,function(R){I[T++]=R}),T!==C?I.subarray(0,T):I}(f);Hl.test(f)&&(f=f.replace(Hl,Do)),f=atob(f);for(var b=new Uint8Array(f.length),C=0;C<f.length;C++)b[C]=f.charCodeAt(C);return b}function Oo(){return Jn||(Jn=new Uint8Array(0))}var Fo={},vp="function"==typeof Uint8Array.prototype.slice,N=0,ut=0;function Sr(f){var b=0>f,C=(f=Math.abs(f))>>>0;f=Math.floor((f-C)/4294967296),b&&(b=(C=ke(Ui(C,f))).next().value,f=C.next().value,C=b),N=C>>>0,ut=f>>>0}var Ir,j="function"==typeof BigInt;function Ui(f,b){return b=~b,f?f=1+~f:b+=1,[f,b]}function pu(f,b){this.i=f>>>0,this.h=b>>>0}function ot(f){if(!f)return Ir||(Ir=new pu(0,0));if(!/^-?\d+$/.test(f))return null;if(16>f.length)Sr(Number(f));else if(j)f=BigInt(f),N=Number(f&BigInt(4294967295))>>>0,ut=Number(f>>BigInt(32)&BigInt(4294967295));else{var b=+("-"===f[0]);ut=N=0;for(var C=f.length,I=b,T=(C-b)%6+b;T<=C;I=T,T+=6)I=Number(f.slice(I,T)),ut*=1e6,4294967296<=(N=1e6*N+I)&&(ut+=N/4294967296|0,N%=4294967296);b&&(f=(b=ke(Ui(N,ut))).next().value,b=b.next().value,N=f,ut=b)}return new pu(N,ut)}function jl(f,b){return Error("Invalid wire type: "+f+" (at position "+b+")")}function Es(){return Error("Failed to read varint, encoding is invalid.")}function Kl(f,b){return Error("Tried to read past the end of the data "+b+" > "+f)}function xn(){throw Error("Invalid UTF8")}function Gi(f,b){return b=String.fromCharCode.apply(null,b),null==f?b:f+b}var at,dn,fu,Rs=void 0,dr=typeof TextDecoder<"u",At=typeof TextEncoder<"u";function mu(f){if(f!==Fo)throw Error("illegal external caller")}function kr(f,b){if(mu(b),this.V=f,null!=f&&0===f.length)throw Error("ByteString should be constructed with non-empty values")}function Zr(){return fu||(fu=new kr(null,Fo))}function gu(f){mu(Fo);var b=f.V;return null==(b=null==b||It&&null!=b&&b instanceof Uint8Array?b:"string"==typeof b?Po(b):null)?b:f.V=b}function yu(f,b){this.i=null,this.m=!1,this.h=this.j=this.l=0,Hi(this,f,b)}function Hi(f,b,C){f.S=void 0!==(C=void 0===C?{}:C).S&&C.S,b&&(b=function As(f){if("string"==typeof f)return{buffer:Po(f),C:!1};if(Array.isArray(f))return{buffer:new Uint8Array(f),C:!1};if(f.constructor===Uint8Array)return{buffer:f,C:!1};if(f.constructor===ArrayBuffer)return{buffer:new Uint8Array(f),C:!1};if(f.constructor===kr)return{buffer:gu(f)||Oo(),C:!0};if(f instanceof Uint8Array)return{buffer:new Uint8Array(f.buffer,f.byteOffset,f.byteLength),C:!1};throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, a ByteString or an Array of numbers")}(b),f.i=b.buffer,f.m=b.C,f.l=0,f.j=f.i.length,f.h=f.l)}function bn(f,b){if(f.h=b,b>f.j)throw Kl(f.j,b)}function Nr(f){var b=f.i,C=f.h,I=b[C++],T=127&I;if(128&I&&(T|=(127&(I=b[C++]))<<7,128&I&&(T|=(127&(I=b[C++]))<<14,128&I&&(T|=(127&(I=b[C++]))<<21,128&I&&(T|=(I=b[C++])<<28,128&I&&128&b[C++]&&128&b[C++]&&128&b[C++]&&128&b[C++]&&128&b[C++])))))throw Es();return bn(f,C),T}function Lo(f,b){if(0>b)throw Error("Tried to read a negative byte length: "+b);var C=f.h,I=C+b;if(I>f.j)throw Kl(b,f.j-C);return f.h=I,C}yu.prototype.reset=function(){this.h=this.l};var pt=[];function Bo(){this.h=[]}function $r(f,b,C){for(;0<C||127<b;)f.h.push(127&b|128),b=(b>>>7|C<<25)>>>0,C>>>=7;f.h.push(b)}function er(f,b){for(;127<b;)f.h.push(127&b|128),b>>>=7;f.h.push(b)}function Mo(f,b){if(pt.length){var C=pt.pop();Hi(C,f,b),f=C}else f=new yu(f,b);this.h=f,this.j=this.h.h,this.i=this.l=-1,this.setOptions(b)}function En(f){var b=f.h;if(b.h==b.j)return!1;f.j=f.h.h;var C=Nr(f.h)>>>0;if(b=C>>>3,!(0<=(C&=7)&&5>=C))throw jl(C,f.j);if(1>b)throw Error("Invalid field number: "+b+" (at position "+f.j+")");return f.l=b,f.i=C,!0}function ji(f){switch(f.i){case 0:if(0!=f.i)ji(f);else e:{for(var b=(f=f.h).h,C=b+10,I=f.i;b<C;)if(!(128&I[b++])){bn(f,b);break e}throw Es()}break;case 1:bn(f=f.h,f.h+8);break;case 2:2!=f.i?ji(f):(b=Nr(f.h)>>>0,bn(f=f.h,f.h+b));break;case 5:bn(f=f.h,f.h+4);break;case 3:for(b=f.l;;){if(!En(f))throw Error("Unmatched start-group tag: stream EOF");if(4==f.i){if(f.l!=b)throw Error("Unmatched end-group tag");break}ji(f)}break;default:throw jl(f.i,f.j)}}Bo.prototype.length=function(){return this.h.length},Bo.prototype.end=function(){var f=this.h;return this.h=[],f},Mo.prototype.setOptions=function(f){this.ca=void 0!==(f=void 0===f?{}:f).ca&&f.ca},Mo.prototype.reset=function(){this.h.reset(),this.j=this.h.h,this.i=this.l=-1};var Ut=[];function Ds(){this.j=[],this.i=0,this.h=new Bo}function tr(f,b){0!==b.length&&(f.j.push(b),f.i+=b.length)}var zn="function"==typeof Symbol&&"symbol"==typeof Symbol()?Symbol():void 0;function Tr(f,b){return zn?f[zn]|=b:void 0!==f.A?f.A|=b:(Object.defineProperties(f,{A:{value:b,configurable:!0,writable:!0,enumerable:!1}}),b)}function xu(f,b){zn?f[zn]&&(f[zn]&=~b):void 0!==f.A&&(f.A&=~b)}function Et(f){var b;return null==(b=zn?f[zn]:f.A)?0:b}function Vn(f,b){zn?f[zn]=b:void 0!==f.A?f.A=b:Object.defineProperties(f,{A:{value:b,configurable:!0,writable:!0,enumerable:!1}})}function z(f){return Tr(f,1),f}function bu(f,b){Vn(b,-51&(0|f))}function zo(f,b){Vn(b,-41&(18|f))}var Ps={};function Os(f){return null!==f&&"object"==typeof f&&!Array.isArray(f)&&f.constructor===Object}var Fs,ts,Vo=[];function Jr(f){if(2&Et(f.o))throw Error("Cannot mutate an immutable Message")}function Ls(f){var b=f.length;(b=b?f[b-1]:void 0)&&Os(b)?b.g=1:f.push(((b={}).g=1,b))}function Wo(f){return f.B||(f.B=f.o[f.i+f.G]={})}function Gt(f,b){return-1===b?null:b>=f.i?f.B?f.B[b]:void 0:f.o[b+f.G]}function wn(f,b,C,I){Jr(f),Er(f,b,C,I)}function Er(f,b,C,I){f.j&&(f.j=void 0),b>=f.i||I?Wo(f)[b]=C:(f.o[b+f.G]=C,(f=f.B)&&b in f&&delete f[b])}function Bs(f,b,C,I){var T=Gt(f,b);Array.isArray(T)||(T=Fs);var R=Et(T);if(1&R||z(T),I)2&R||Tr(T,2),1&C||Object.freeze(T);else{I=!(2&C);var E=2&R;1&C||!E?I&&16&R&&!E&&xu(T,16):Er(f,b,T=z(Array.prototype.slice.call(T)))}return T}function Ms(f,b){var C=Gt(f,b),I=null==C?C:"number"==typeof C||"NaN"===C||"Infinity"===C||"-Infinity"===C?Number(C):void 0;return null!=I&&I!==C&&Er(f,b,I),I}function Uo(f,b,C,I,T){f.h||(f.h={});var R=f.h[C],E=Bs(f,C,3,T);if(!R){var B=E;R=[];var G=!!(16&Et(f.o));E=!!(2&Et(B));var Z=B;!T&&E&&(B=Array.prototype.slice.call(B));for(var ue=E,$e=0;$e<B.length;$e++){var Se=B[$e],pe=b,Te=!1;if(Te=void 0!==Te&&Te,void 0!==(Se=Array.isArray(Se)?new pe(Se):Te?new pe:void 0)){var Le=Te=Et(pe=Se.o);E&&(Le|=2),G&&(Le|=16),Le!=Te&&Vn(pe,Le),pe=Le,ue=ue||!!(2&pe),R.push(Se)}}return f.h[C]=R,b=33|(G=Et(B)),G!=(b=ue?-9&b:8|b)&&(ue=B,Object.isFrozen(ue)&&(ue=Array.prototype.slice.call(ue)),Vn(ue,b),B=ue),Z!==B&&Er(f,C,B),(T||I&&E)&&Tr(R,2),I&&Object.freeze(R),R}return T||(T=Object.isFrozen(R),I&&!T?Object.freeze(R):!I&&T&&(R=Array.prototype.slice.call(R),f.h[C]=R)),R}function zs(f,b,C){var I=!!(2&Et(f.o));if(b=Uo(f,b,C,I,I),f=Bs(f,C,3,I),!(I||8&Et(f))){for(I=0;I<b.length;I++){if(2&Et((C=b[I]).o)){var T=Xo(C,!1);T.j=C}else T=C;C!==T&&(b[I]=T,f[I]=T.o)}Tr(f,8)}return b}function vn(f,b,C){if(null!=C&&"number"!=typeof C)throw Error("Value of float/double field must be a number|null|undefined, found "+typeof C+": "+C);wn(f,b,C)}function Go(f,b,C,I,T){Jr(f);var R=Uo(f,C,b,!1,!1);return C=null!=I?I:new C,f=Bs(f,b,2,!1),null!=T?(R.splice(T,0,C),f.splice(T,0,C.o)):(R.push(C),f.push(C.o)),C.C()&&xu(f,8),C}function es(f,b){return null==f?b:f}function Cn(f,b,C){return C=void 0===C?0:C,es(Ms(f,b),C)}function Ho(f,b,C,I){if(null!=f){if(Array.isArray(f))f=jo(f,b,C,void 0!==I);else if(Os(f)){var R,T={};for(R in f)T[R]=Ho(f[R],b,C,I);f=T}else f=b(f,I);return f}}function jo(f,b,C,I){var T=Et(f);I=I?!!(16&T):void 0,f=Array.prototype.slice.call(f);for(var R=0;R<f.length;R++)f[R]=Ho(f[R],b,C,I);return C(T,f),f}function Ki(f){return f.ja===Ps?f.toJSON():function wu(f){switch(typeof f){case"number":return isFinite(f)?f:String(f);case"object":if(f)if(Array.isArray(f)){if(128&Et(f))return Ls(f=Array.prototype.slice.call(f)),f}else{if(It&&null!=f&&f instanceof Uint8Array)return Cr(f);if(f instanceof kr){var b=f.V;return null==b?"":"string"==typeof b?b:f.V=Cr(b)}}}return f}(f)}function Xi(f,b){128&f&&Ls(b)}function Ko(f,b,C){if(C=void 0===C?zo:C,null!=f){if(It&&f instanceof Uint8Array)return f.length?new kr(new Uint8Array(f),Fo):Zr();if(Array.isArray(f)){var I=Et(f);return 2&I?f:!b||32&I||!(16&I||0===I)?(4&(b=Et(f=jo(f,Ko,4&I?zo:C,!0)))&&2&b&&Object.freeze(f),f):(Vn(f,2|I),f)}return f.ja===Ps?Xl(f):f}}function Vs(f,b,C,I,T,R,E){if(f=f.h&&f.h[C]){if(2&(I=Et(f))?I=f:(zo(I,R=st(f,Xl)),Object.freeze(R),I=R),Jr(b),E=null==I?Fs:z([]),null!=I){for(R=!!I.length,f=0;f<I.length;f++){var B=I[f];R=R&&!(2&Et(B.o)),E[f]=B.o}R=1|(R?8:0),((f=Et(E))&R)!==R&&(Object.isFrozen(E)&&(E=Array.prototype.slice.call(E)),Vn(E,f|R)),b.h||(b.h={}),b.h[C]=I}else b.h&&(b.h[C]=void 0);Er(b,C,E,T)}else wn(b,C,Ko(I,R,E),T)}function Xl(f){return 2&Et(f.o)||Tr((f=Xo(f,!0)).o,2),f}function Xo(f,b){var C=f.o,I=[];Tr(I,16);var T=f.constructor.h;if(T&&I.push(T),T=f.B){I.length=C.length,I.fill(void 0,I.length,C.length);var R={};I[I.length-1]=R}128&Et(C)&&Ls(I),b=b||f.C()?zo:bu,ts=I,I=new(R=f.constructor)(I),ts=void 0,f.R&&(I.R=f.R.slice()),R=!!(16&Et(C));for(var E=T?C.length-1:C.length,B=0;B<E;B++)Vs(f,I,B-f.G,C[B],!1,R,b);if(T)for(var G in T)Vs(f,I,+G,T[G],!0,R,b);return I}function Bt(f,b,C){null==f&&(f=ts),ts=void 0;var pe,I=this.constructor.i||0,T=0<I,R=this.constructor.h,E=!1;if(null==f){var B=48,G=!0;T&&(I=0,B|=128),Vn(f=R?[R]:[],B)}else{if(!Array.isArray(f)||R&&R!==f[0])throw Error();var Z=B=Tr(f,0);if((G=0!=(16&Z))&&((E=0!=(32&Z))||(Z|=32)),T){if(128&Z)I=0;else if(0<f.length){var ue=f[f.length-1];if(Os(ue)&&"g"in ue){I=0,Z|=128,delete ue.g;var Se,$e=!0;for(Se in ue){$e=!1;break}$e&&f.pop()}}}else if(128&Z)throw Error();B!==Z&&Vn(f,Z)}if(this.G=(R?0:-1)-I,this.h=void 0,this.o=f,I=(R=this.o.length)-1,R&&Os(R=this.o[I])?(this.B=R,this.i=I-this.G):void 0!==b&&-1<b?(this.i=Math.max(b,I+1-this.G),this.B=void 0):this.i=Number.MAX_VALUE,!T&&this.B&&"g"in this.B)throw Error('Unexpected "g" flag in sparse object of message that is not a group type.');if(C)for(b=G&&!E&&!0,T=this.i,G=0;G<C.length;G++)(E=C[G])<T?(I=f[E+=this.G])?ns(I,b):f[E]=Fs:(pe||(pe=Wo(this)),(I=pe[E])?ns(I,b):pe[E]=Fs)}function ns(f,b){if(Array.isArray(f)){var C=Et(f),I=1;!b||2&C||(I|=16),(C&I)!==I&&Vn(f,C|I)}}function qo(f,b,C){if(C){var T,I={};for(T in C){var R=C[T],E=R.ra;E||(I.J=R.xa||R.oa.W,R.ia?(I.aa=ei(R.ia),E=function(B){return function(G,Z,ue){return B.J(G,Z,ue,B.aa)}}(I)):R.ka?(I.Z=ti(R.da.P,R.ka),E=function(B){return function(G,Z,ue){return B.J(G,Z,ue,B.Z)}}(I)):E=I.J,R.ra=E),E(b,f,R.da),I={J:I.J,aa:I.aa,Z:I.Z}}}!function _r(f,b){if(b=b.R){tr(f,f.h.end());for(var C=0;C<b.length;C++)tr(f,gu(b[C])||Oo())}}(b,f)}Vn(Vo,23),Fs=Object.freeze(Vo),Bt.prototype.toJSON=function(){return jo(this.o,Ki,Xi)},Bt.prototype.C=function(){return!!(2&Et(this.o))},Bt.prototype.ja=Ps,Bt.prototype.toString=function(){return this.o.toString()};var Rr=Symbol();function Yo(f,b,C){return f[Rr]||(f[Rr]=function(I,T){return b(I,T,C)})}function Qo(f){var b=f[Rr];if(!b){var C=oa(f);f[Rr]=b=function(I,T){return vu(I,T,C)}}return b}function Yi(f){var b=function qi(f){var b=f.ia;return b?Qo(b):(b=f.wa)?Yo(f.da.P,b,f.ka):void 0}(f),C=f.da,I=f.oa.U;return b?function(T,R){return I(T,R,C,b)}:function(T,R){return I(T,R,C)}}function Zo(f,b){var C=f[b];return"function"==typeof C&&0===C.length&&(C=C(),f[b]=C),Array.isArray(C)&&(Dr in C||Ar in C||0<C.length&&"function"==typeof C[0])?C:void 0}function Jo(f,b,C,I,T,R){b.P=f[0];var E=1;if(f.length>E&&"number"!=typeof f[E]){var B=f[E++];C(b,B)}for(;E<f.length;){C=f[E++];for(var G=E+1;G<f.length&&"number"!=typeof f[G];)G++;switch(B=f[E++],G-=E){case 0:I(b,C,B);break;case 1:(G=Zo(f,E))?(E++,T(b,C,B,G)):I(b,C,B,f[E++]);break;case 2:T(b,C,B,G=Zo(f,G=E++),f[E++]);break;case 3:R(b,C,B,f[E++],f[E++],f[E++]);break;case 4:R(b,C,B,f[E++],f[E++],f[E++],f[E++]);break;default:throw Error("unexpected number of binary field arguments: "+G)}}return b}var Ws=Symbol();function ei(f){var b=f[Ws];if(!b){var C=Us(f);f[Ws]=b=function(I,T){return ni(I,T,C)}}return b}function ti(f,b){var C=f[Ws];return C||(f[Ws]=C=function(I,T){return qo(I,T,b)}),C}var Ar=Symbol();function Qi(f,b){f.push(b)}function Zi(f,b,C){f.push(b,C.W)}function Ji(f,b,C,I){var T=ei(I),R=Us(I).P,E=C.W;f.push(b,function(B,G,Z){return E(B,G,Z,R,T)})}function ea(f,b,C,I,T,R){var E=ti(I,R),B=C.W;f.push(b,function(G,Z,ue){return B(G,Z,ue,I,E)})}function Us(f){var b=f[Ar];return b||(b=Jo(f,f[Ar]=[],Qi,Zi,Ji,ea),Dr in f&&Ar in f&&(f.length=0),b)}var Dr=Symbol();function ta(f,b){f[0]=b}function na(f,b,C,I){var T=C.U;f[b]=I?function(R,E,B){return T(R,E,B,I)}:T}function ra(f,b,C,I,T){var R=C.U,E=Qo(I),B=oa(I).P;f[b]=function(G,Z,ue){return R(G,Z,ue,B,E,T)}}function sa(f,b,C,I,T,R,E){var B=C.U,G=Yo(I,T,R);f[b]=function(Z,ue,$e){return B(Z,ue,$e,I,G,E)}}function oa(f){var b=f[Dr];return b||(b=Jo(f,f[Dr]={},ta,na,ra,sa),Dr in f&&Ar in f&&(f.length=0),b)}function vu(f,b,C){for(;En(b)&&4!=b.i;){var I=b.l,T=C[I];if(!T){var R=C[0];R&&(R=R[I])&&(T=C[I]=Yi(R))}if(!T||!T(b,f,I)){I=f,R=(T=b).j,ji(T);var E=T;if(!E.ca){if(T=E.h.h-R,E.h.h=R,E=E.h,0==T)T=Zr();else{if(R=Lo(E,T),E.S&&E.m)T=E.i.subarray(R,R+T);else{E=E.i;var B=R;T=B===(T=R+T)?Oo():vp?E.slice(B,T):new Uint8Array(E.subarray(B,T))}T=0==T.length?Zr():new kr(T,Fo)}(R=I.R)?R.push(T):I.R=[T]}}}return f}function ni(f,b,C){for(var I=C.length,T=I%2==1,R=T?1:0;R<I;R+=2)(0,C[R+1])(b,f,C[R]);qo(f,b,T?C[0]:void 0)}function Pr(f,b){return{U:f,W:b}}var hn=Pr(function(f,b,C){if(5!==f.i)return!1;var I=(f=f.h).i,T=f.h,R=I[T],E=I[T+1],B=I[T+2];return I=I[T+3],bn(f,f.h+4),f=2*((E=(R<<0|E<<8|B<<16|I<<24)>>>0)>>31)+1,R=E>>>23&255,E&=8388607,wn(b,C,255==R?E?NaN:1/0*f:0==R?f*Math.pow(2,-149)*E:f*Math.pow(2,R-150)*(E+Math.pow(2,23))),!0},function(f,b,C){if(null!=(b=Ms(b,C))){er(f.h,8*C+5),f=f.h;var I=+b;0===I?0<1/I?N=ut=0:(ut=0,N=2147483648):isNaN(I)?(ut=0,N=2147483647):34028234663852886e22<(I=(C=0>I?-2147483648:0)?-I:I)?(ut=0,N=(2139095040|C)>>>0):11754943508222875e-54>I?(I=Math.round(I/Math.pow(2,-149)),ut=0,N=(C|I)>>>0):(b=Math.floor(Math.log(I)/Math.LN2),I*=Math.pow(2,-b),16777216<=(I=Math.round(8388608*I))&&++b,ut=0,N=(C|b+127<<23|8388607&I)>>>0),f.h.push((C=N)>>>0&255),f.h.push(C>>>8&255),f.h.push(C>>>16&255),f.h.push(C>>>24&255)}}),ia=Pr(function(f,b,C){if(0!==f.i)return!1;var I=f.h,T=0,R=f=0,E=I.i,B=I.h;do{var G=E[B++];T|=(127&G)<<R,R+=7}while(32>R&&128&G);for(32<R&&(f|=(127&G)>>4),R=3;32>R&&128&G;R+=7)f|=(127&(G=E[B++]))<<R;if(bn(I,B),!(128>G))throw Es();return I=T>>>0,(f=2147483648&(G=f>>>0))&&(G=~G>>>0,0==(I=1+~I>>>0)&&(G=G+1>>>0)),I=4294967296*G+(I>>>0),wn(b,C,f?-I:I),!0},function(f,b,C){null!=(b=Gt(b,C))&&("string"==typeof b&&ot(b),null!=b&&(er(f.h,8*C),"number"==typeof b?(f=f.h,Sr(b),$r(f,N,ut)):(C=ot(b),$r(f.h,C.i,C.h))))}),Cu=Pr(function(f,b,C){return 0===f.i&&(wn(b,C,Nr(f.h)),!0)},function(f,b,C){if(null!=(b=Gt(b,C))&&null!=b)if(er(f.h,8*C),f=f.h,0<=(C=b))er(f,C);else{for(b=0;9>b;b++)f.h.push(127&C|128),C>>=7;f.h.push(1)}}),ri=Pr(function(f,b,C){if(2!==f.i)return!1;var I=Nr(f.h)>>>0,T=Lo(f=f.h,I);if(f=f.i,dr){var E,R=f;(E=at)||(E=at=new TextDecoder("utf-8",{fatal:!0})),f=T+I,R=0===T&&f===R.length?R:R.subarray(T,f);try{var B=E.decode(R)}catch($e){if(void 0===Rs){try{E.decode(new Uint8Array([128]))}catch{}try{E.decode(new Uint8Array([97])),Rs=!0}catch{Rs=!1}}throw!Rs&&(at=void 0),$e}}else{I=(B=T)+I,T=[];for(var Z,ue,G=null;B<I;)128>(Z=f[B++])?T.push(Z):224>Z?B>=I?xn():(ue=f[B++],194>Z||128!=(192&ue)?(B--,xn()):T.push((31&Z)<<6|63&ue)):240>Z?B>=I-1?xn():128!=(192&(ue=f[B++]))||224===Z&&160>ue||237===Z&&160<=ue||128!=(192&(R=f[B++]))?(B--,xn()):T.push((15&Z)<<12|(63&ue)<<6|63&R):244>=Z?B>=I-2?xn():128!=(192&(ue=f[B++]))||ue-144+(Z<<28)>>30||128!=(192&(R=f[B++]))||128!=(192&(E=f[B++]))?(B--,xn()):(Z=(7&Z)<<18|(63&ue)<<12|(63&R)<<6|63&E,T.push(55296+((Z-=65536)>>10&1023),56320+(1023&Z))):xn(),8192<=T.length&&(G=Gi(G,T),T.length=0);B=Gi(G,T)}return wn(b,C,B),!0},function(f,b,C){if(null!=(b=Gt(b,C))){var I=!1;if(I=void 0!==I&&I,At){if(I&&/(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/.test(b))throw Error("Found an unpaired surrogate");b=(dn||(dn=new TextEncoder)).encode(b)}else{for(var T=0,R=new Uint8Array(3*b.length),E=0;E<b.length;E++){var B=b.charCodeAt(E);if(128>B)R[T++]=B;else{if(2048>B)R[T++]=B>>6|192;else{if(55296<=B&&57343>=B){if(56319>=B&&E<b.length){var G=b.charCodeAt(++E);if(56320<=G&&57343>=G){R[T++]=(B=1024*(B-55296)+G-56320+65536)>>18|240,R[T++]=B>>12&63|128,R[T++]=B>>6&63|128,R[T++]=63&B|128;continue}E--}if(I)throw Error("Found an unpaired surrogate");B=65533}R[T++]=B>>12|224,R[T++]=B>>6&63|128}R[T++]=63&B|128}}b=T===R.length?R:R.subarray(0,T)}er(f.h,8*C+2),er(f.h,b.length),tr(f,f.h.end()),tr(f,b)}}),rs=Pr(function(f,b,C,I,T){if(2!==f.i)return!1;b=Go(b,C,I),C=f.h.j,I=Nr(f.h)>>>0;var R=f.h.h+I,E=R-C;if(0>=E&&(f.h.j=R,T(b,f,void 0,void 0,void 0),E=R-f.h.h),E)throw Error("Message parsing ended unexpectedly. Expected to read "+I+" bytes, instead read "+(I-E)+" bytes, either the data ended unexpectedly or the message misreported its own length");return f.h.h=R,f.h.j=C,!0},function(f,b,C,I,T){if(null!=(b=zs(b,I,C)))for(I=0;I<b.length;I++){var R=f;er(R.h,8*C+2);var E=R.h.end();tr(R,E),E.push(R.i),R=E,T(b[I],f),E=f;var B=R.pop();for(B=E.i+E.h.length()-B;127<B;)R.push(127&B|128),B>>>=7,E.i++;R.push(B),E.i++}});function Or(f){return function(b,C){e:{if(Ut.length){var I=Ut.pop();I.setOptions(C),Hi(I.h,b,C),b=I}else b=new Mo(b,C);try{var T=oa(f),R=vu(new T.P,b,T);break e}finally{(T=b.h).i=null,T.m=!1,T.l=0,T.j=0,T.h=0,T.S=!1,b.l=-1,b.i=-1,100>Ut.length&&Ut.push(b)}R=void 0}return R}}function Gs(f){return function(){var b=new Ds;ni(this,b,Us(f)),tr(b,b.h.end());for(var C=new Uint8Array(b.i),I=b.j,T=I.length,R=0,E=0;E<T;E++){var B=I[E];C.set(B,R),R+=B.length}return b.j=[C],C}}function Wn(f){Bt.call(this,f)}me(Wn,Bt);var si=[Wn,1,Cu,2,hn,3,ri,4,ri];function Hs(f){Bt.call(this,f,-1,aa)}Wn.prototype.l=Gs(si),me(Hs,Bt),Hs.prototype.addClassification=function(f,b){return Go(this,1,Wn,f,b),this};var aa=[1],js=Or([Hs,1,rs,si]);function nr(f){Bt.call(this,f)}me(nr,Bt);var oi=[nr,1,hn,2,hn,3,hn,4,hn,5,hn];function ii(f){Bt.call(this,f,-1,ua)}nr.prototype.l=Gs(oi),me(ii,Bt);var ua=[1],Ks=Or([ii,1,rs,oi]);function hr(f){Bt.call(this,f)}me(hr,Bt);var ss=[hr,1,hn,2,hn,3,hn,4,hn,5,hn,6,ia],la=Or(ss);function ai(f,b,C){if(C=f.createShader(0===C?f.VERTEX_SHADER:f.FRAGMENT_SHADER),f.shaderSource(C,b),f.compileShader(C),!f.getShaderParameter(C,f.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+f.getShaderInfoLog(C));return C}function ca(f){return zs(f,Wn,1).map(function(b){var C=Gt(b,1);return{index:null==C?0:C,qa:Cn(b,2),label:null!=Gt(b,3)?es(Gt(b,3),""):void 0,displayName:null!=Gt(b,4)?es(Gt(b,4),""):void 0}})}function da(f){return{x:Cn(f,1),y:Cn(f,2),z:Cn(f,3),visibility:null!=Ms(f,4)?Cn(f,4):void 0}}function Xs(f){return zs(Ks(f),nr,1).map(da)}function qs(f,b){this.i=f,this.h=b,this.m=0}function os(f,b,C){return function Ys(f,b){var C=f.h;if(void 0===f.s){var I=ai(C,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),T=ai(C,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),R=C.createProgram();if(C.attachShader(R,I),C.attachShader(R,T),C.linkProgram(R),!C.getProgramParameter(R,C.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+C.getProgramInfoLog(R));I=f.s=R,C.useProgram(I),T=C.getUniformLocation(I,"sampler0"),f.l={O:C.getAttribLocation(I,"aVertex"),N:C.getAttribLocation(I,"aTex"),ya:T},f.v=C.createBuffer(),C.bindBuffer(C.ARRAY_BUFFER,f.v),C.enableVertexAttribArray(f.l.O),C.vertexAttribPointer(f.l.O,2,C.FLOAT,!1,0,0),C.bufferData(C.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),C.STATIC_DRAW),C.bindBuffer(C.ARRAY_BUFFER,null),f.u=C.createBuffer(),C.bindBuffer(C.ARRAY_BUFFER,f.u),C.enableVertexAttribArray(f.l.N),C.vertexAttribPointer(f.l.N,2,C.FLOAT,!1,0,0),C.bufferData(C.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),C.STATIC_DRAW),C.bindBuffer(C.ARRAY_BUFFER,null),C.uniform1i(T,0)}I=f.l,C.useProgram(f.s),C.canvas.width=b.width,C.canvas.height=b.height,C.viewport(0,0,b.width,b.height),C.activeTexture(C.TEXTURE0),f.i.bindTexture2d(b.glName),C.enableVertexAttribArray(I.O),C.bindBuffer(C.ARRAY_BUFFER,f.v),C.vertexAttribPointer(I.O,2,C.FLOAT,!1,0,0),C.enableVertexAttribArray(I.N),C.bindBuffer(C.ARRAY_BUFFER,f.u),C.vertexAttribPointer(I.N,2,C.FLOAT,!1,0,0),C.bindFramebuffer(C.DRAW_FRAMEBUFFER?C.DRAW_FRAMEBUFFER:C.FRAMEBUFFER,null),C.clearColor(0,0,0,0),C.clear(C.COLOR_BUFFER_BIT),C.colorMask(!0,!0,!0,!0),C.drawArrays(C.TRIANGLE_FAN,0,4),C.disableVertexAttribArray(I.O),C.disableVertexAttribArray(I.N),C.bindBuffer(C.ARRAY_BUFFER,null),f.i.bindTexture2d(0)}(f,b),"function"==typeof f.h.canvas.transferToImageBitmap?Promise.resolve(f.h.canvas.transferToImageBitmap()):C?Promise.resolve(f.h.canvas):"function"==typeof createImageBitmap?createImageBitmap(f.h.canvas):(void 0===f.j&&(f.j=document.createElement("canvas")),new Promise(function(I){f.j.height=f.h.canvas.height,f.j.width=f.h.canvas.width,f.j.getContext("2d",{}).drawImage(f.h.canvas,0,0,f.h.canvas.width,f.h.canvas.height),I(f.j)}))}function ha(f){this.h=f}hr.prototype.l=Gs(ss);var Qs=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function pa(f,b){return b+f}function ui(f,b){window[f]=b}function Su(f){if(this.h=f,this.listeners={},this.l={},this.L={},this.s={},this.v={},this.M=this.u=this.ga=!0,this.I=Promise.resolve(),this.fa="",this.D={},this.locateFile=f&&f.locateFile||pa,"object"==typeof window)var b=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else{if(!(typeof location<"u"))throw Error("solutions can only be loaded on a web page or in a web worker");b=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/"}if(this.ha=b,f.options)for(var C=(b=ke(Object.keys(f.options))).next();!C.done;C=b.next()){var I=f.options[C=C.value].default;void 0!==I&&(this.l[C]="function"==typeof I?I():I)}}function Zs(f,b){var C,I;return U(function(T){return b in f.L?T.return(f.L[b]):(C=f.locateFile(b,""),I=fetch(C).then(function(R){return R.arrayBuffer()}),f.L[b]=I,T.return(I))})}function Js(f,b){for(var C=b.name||"$",I=[].concat(Ne(b.wants)),T=new f.i.StringList,R=ke(b.wants),E=R.next();!E.done;E=R.next())T.push_back(E.value);R=f.i.PacketListener.implement({onResults:function(B){for(var G={},Z=0;Z<b.wants.length;++Z)G[I[Z]]=B.get(Z);var ue=f.listeners[C];ue&&(f.I=function Ip(f,b,C){var I,T,R,E,G,Z,ue,$e,Se,pe,Le,ft;return U(function(lt){switch(lt.h){case 1:if(!C)return lt.return(b);for(I={},T=0,R=ke(Object.keys(C)),E=R.next();!E.done;E=R.next())"string"!=typeof(G=C[E.value])&&"texture"===G.type&&void 0!==b[G.stream]&&++T;1<T&&(f.M=!1),Z=ke(Object.keys(C)),E=Z.next();case 2:if(E.done){lt.h=4;break}if("string"==typeof($e=C[ue=E.value]))return Le=I,ft=ue,Me(lt,function ya(f,b,C){var I;return U(function(T){return"number"==typeof C||C instanceof Uint8Array||C instanceof f.i.Uint8BlobList?T.return(C):C instanceof f.i.Texture2dDataOut?((I=f.v[b])||(I=new qs(f.i,f.K),f.v[b]=I),T.return(os(I,C,f.M))):T.return(void 0)})}(f,ue,b[$e]),14);if(Se=b[$e.stream],"detection_list"===$e.type){if(Se){for(var Ot=Se.getRectList(),Rn=Se.getLandmarksList(),Ht=Se.getClassificationsList(),Qe=[],Dt=0;Dt<Ot.size();++Dt){var rr=la(Ot.get(Dt)),is=void 0;is=void 0===is?0:is,rr={la:{sa:Cn(rr,1),ta:Cn(rr,2),height:Cn(rr,3),width:Cn(rr,4),rotation:Cn(rr,5,0),pa:es(Gt(rr,6),is)},ea:Xs(Rn.get(Dt)),ba:ca(js(Ht.get(Dt)))},Qe.push(rr)}Ot=Qe}else Ot=[];I[ue]=Ot,lt.h=7;break}if("proto_list"===$e.type){if(Se){for(Ot=Array(Se.size()),Rn=0;Rn<Se.size();Rn++)Ot[Rn]=Se.get(Rn);Se.delete()}else Ot=[];I[ue]=Ot,lt.h=7;break}if(void 0===Se){lt.h=3;break}if("float_list"===$e.type){I[ue]=Se,lt.h=7;break}if("proto"===$e.type){I[ue]=Se,lt.h=7;break}if("texture"!==$e.type)throw Error("Unknown output config type: '"+$e.type+"'");return(pe=f.v[ue])||(pe=new qs(f.i,f.K),f.v[ue]=pe),Me(lt,os(pe,Se,f.M),13);case 13:I[ue]=lt.i;case 7:$e.transform&&I[ue]&&(I[ue]=$e.transform(I[ue])),lt.h=3;break;case 14:Le[ft]=lt.i;case 3:E=Z.next(),lt.h=2;break;case 4:return lt.return(I)}})}(f,G,b.outs).then(function($e){$e=ue($e);for(var Se=0;Se<b.wants.length;++Se){var pe=G[I[Se]];"object"==typeof pe&&pe.hasOwnProperty&&pe.hasOwnProperty("delete")&&pe.delete()}$e&&(f.I=$e)}))}}),f.j.attachMultiListener(T,R),T.delete()}function li(f){switch(void 0===f&&(f=0),f){case 1:return"pose_landmark_full.tflite";case 2:return"pose_landmark_heavy.tflite";default:return"pose_landmark_lite.tflite"}}function xa(f){var b=this;this.h=new Su({locateFile:(f=f||{}).locateFile,files:function(C){return[{url:"pose_solution_packed_assets_loader.js"},{simd:!1,url:"pose_solution_wasm_bin.js"},{simd:!0,url:"pose_solution_simd_wasm_bin.js"},{data:!0,url:li(C.modelComplexity)}]},graph:{url:"pose_web.binarypb"},listeners:[{wants:["pose_landmarks","world_landmarks","segmentation_mask","image_transformed"],outs:{image:{type:"texture",stream:"image_transformed"},poseLandmarks:{type:"proto",stream:"pose_landmarks",transform:Xs},poseWorldLandmarks:{type:"proto",stream:"world_landmarks",transform:Xs},segmentationMask:{type:"texture",stream:"segmentation_mask"}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"object"==typeof window&&void 0!==window.navigator&&("iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document)},selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},modelComplexity:{type:1,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorModelComplexity",fieldName:"int_value"},onChange:function(C){var I,T;return U(function(E){return 1==E.h?(I=li(C),T="third_party/mediapipe/modules/pose_landmark/"+I,Me(E,Zs(b.h,I),2)):(b.h.overrideFile(T,E.i),E.return(!0))})}},smoothLandmarks:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothLandmarks",fieldName:"bool_value"}},enableSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorEnableSegmentation",fieldName:"bool_value"}},smoothSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothSegmentation",fieldName:"bool_value"}},minDetectionConfidence:{type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"poselandmarkgpu__posedetectiongpu__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}},minTrackingConfidence:{type:1,graphOptionXref:{calculatorType:"ThresholdingCalculator",calculatorName:"poselandmarkgpu__poselandmarkbyroigpu__tensorstoposelandmarksandsegmentation__ThresholdingCalculator",fieldName:"threshold"}}}})}(Re=Su.prototype).close=function(){return this.j&&this.j.delete(),Promise.resolve()},Re.reset=function(){var f=this;return U(function(b){f.j&&(f.j.reset(),f.s={},f.v={}),b.h=0})},Re.setOptions=function(f,b){var C=this;if(b=b||this.h.options){for(var I=[],T=[],R={},E=ke(Object.keys(f)),B=E.next();!B.done;R={X:R.X,Y:R.Y},B=E.next())if(!((B=B.value)in this.l)||this.l[B]!==f[B]){this.l[B]=f[B];var G=b[B];void 0!==G&&(G.onChange&&(R.X=G.onChange,R.Y=f[B],I.push(function(Z){return function(){return U(function($e){if(1==$e.h)return Me($e,Z.X(Z.Y),2);!0===$e.i&&(C.u=!0),$e.h=0})}}(R))),G.graphOptionXref&&(B=Object.assign({},{calculatorName:"",calculatorIndex:0},G.graphOptionXref,{valueNumber:1===G.type?f[B]:0,valueBoolean:0===G.type&&f[B],valueString:2===G.type?f[B]:""}),T.push(B)))}(0!==I.length||0!==T.length)&&(this.u=!0,this.H=(void 0===this.H?[]:this.H).concat(T),this.F=(void 0===this.F?[]:this.F).concat(I))}},Re.initialize=function(){var f=this;return U(function(b){return 1==b.h?Me(b,function Cp(f){var b,C,I,T,R,E,B,G,Z,ue,$e;return U(function(Se){switch(Se.h){case 1:return f.ga?(b=void 0===f.h.files?[]:"function"==typeof f.h.files?f.h.files(f.l):f.h.files,Me(Se,function ma(){return U(function(f){switch(f.h){case 1:return f.s=2,Me(f,WebAssembly.instantiate(Qs),4);case 4:f.h=3,f.s=0;break;case 2:return f.s=0,f.l=null,f.return(!1);case 3:return f.return(!0)}})}(),2)):Se.return();case 2:if(C=Se.i,"object"==typeof window)return ui("createMediapipeSolutionsWasm",{locateFile:f.locateFile}),ui("createMediapipeSolutionsPackedAssets",{locateFile:f.locateFile}),E=b.filter(function(pe){return void 0!==pe.data}),B=b.filter(function(pe){return void 0===pe.data}),G=Promise.all(E.map(function(pe){var Te=Zs(f,pe.url);if(void 0!==pe.path){var Le=pe.path;Te=Te.then(function(ft){return f.overrideFile(Le,ft),Promise.resolve(ft)})}return Te})),Z=Promise.all(B.map(function(pe){return void 0===pe.simd||pe.simd&&C||!pe.simd&&!C?function fa(f){var b=document.createElement("script");return b.setAttribute("src",f),b.setAttribute("crossorigin","anonymous"),new Promise(function(C){b.addEventListener("load",function(){C()},!1),b.addEventListener("error",function(){C()},!1),document.body.appendChild(b)})}(f.locateFile(pe.url,f.ha)):Promise.resolve()})).then(function(){var pe,Te,Le;return U(function(ft){if(1==ft.h)return pe=window.createMediapipeSolutionsWasm,Te=window.createMediapipeSolutionsPackedAssets,Le=f,Me(ft,pe(Te),2);Le.i=ft.i,ft.h=0})}),ue=U(function(pe){return f.h.graph&&f.h.graph.url?pe=Me(pe,Zs(f,f.h.graph.url),0):(pe.h=0,pe=void 0),pe}),Me(Se,Promise.all([Z,G,ue]),7);if("function"!=typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");return I=b.filter(function(pe){return void 0===pe.simd||pe.simd&&C||!pe.simd&&!C}).map(function(pe){return f.locateFile(pe.url,f.ha)}),importScripts.apply(null,Ne(I)),T=f,Me(Se,createMediapipeSolutionsWasm(Module),6);case 6:T.i=Se.i,f.m=new OffscreenCanvas(1,1),f.i.canvas=f.m,R=f.i.GL.createContext(f.m,{antialias:!1,alpha:!1,va:typeof WebGL2RenderingContext<"u"?2:1}),f.i.GL.makeContextCurrent(R),Se.h=4;break;case 7:if(f.m=document.createElement("canvas"),!($e=f.m.getContext("webgl2",{}))&&!($e=f.m.getContext("webgl",{})))return alert("Failed to create WebGL canvas context when passing video frame."),Se.return();f.K=$e,f.i.canvas=f.m,f.i.createContext(f.m,!0,!0,{});case 4:f.j=new f.i.SolutionWasm,f.ga=!1,Se.h=0}})}(f),2):3!=b.h?Me(b,function Sp(f){var C,I,T,R,E,G;return U(function(Z){if(1==Z.h)return f.h.graph&&f.h.graph.url&&f.fa===f.h.graph.url?Z.return():(f.u=!0,f.h.graph&&f.h.graph.url?(f.fa=f.h.graph.url,Me(Z,Zs(f,f.h.graph.url),3)):void(Z.h=2));for(2!=Z.h&&f.j.loadGraph(Z.i),C=ke(Object.keys(f.D)),I=C.next();!I.done;I=C.next())f.j.overrideFile(T=I.value,f.D[T]);if(f.D={},f.h.listeners)for(R=ke(f.h.listeners),E=R.next();!E.done;E=R.next())Js(f,E.value);G=f.l,f.l={},f.setOptions(G),Z.h=0})}(f),3):Me(b,function ga(f){var b,C,T,R,E;return U(function(G){switch(G.h){case 1:if(!f.u)return G.return();if(!f.F){G.h=2;break}b=ke(f.F),C=b.next();case 3:if(C.done){G.h=5;break}return Me(G,(0,C.value)(),4);case 4:C=b.next(),G.h=3;break;case 5:f.F=void 0;case 2:if(f.H){for(T=new f.i.GraphOptionChangeRequestList,R=ke(f.H),E=R.next();!E.done;E=R.next())T.push_back(E.value);f.j.changeOptions(T),T.delete(),f.H=void 0}f.u=!1,G.h=0}})}(f),0)})},Re.overrideFile=function(f,b){this.j?this.j.overrideFile(f,b):this.D[f]=b},Re.clearOverriddenFiles=function(){this.D={},this.j&&this.j.clearOverriddenFiles()},Re.send=function(f,b){var I,T,R,E,B,G,Z,ue,$e,C=this;return U(function(Se){switch(Se.h){case 1:return C.h.inputs?(I=1e3*(null==b?performance.now():b),Me(Se,C.I,2)):Se.return();case 2:return Me(Se,C.initialize(),3);case 3:for(T=new C.i.PacketDataList,R=ke(Object.keys(f)),E=R.next();!E.done;E=R.next())if(G=C.h.inputs[B=E.value]){e:{var pe=f[B];switch(G.type){case"video":var Te=C.s[G.stream];if(Te||(Te=new qs(C.i,C.K),C.s[G.stream]=Te),0===Te.m&&(Te.m=Te.i.createTexture()),typeof HTMLVideoElement<"u"&&pe instanceof HTMLVideoElement)var Le=pe.videoWidth,ft=pe.videoHeight;else typeof HTMLImageElement<"u"&&pe instanceof HTMLImageElement?(Le=pe.naturalWidth,ft=pe.naturalHeight):(Le=pe.width,ft=pe.height);ft={glName:Te.m,width:Le,height:ft},(Le=Te.h).canvas.width=ft.width,Le.canvas.height=ft.height,Le.activeTexture(Le.TEXTURE0),Te.i.bindTexture2d(Te.m),Le.texImage2D(Le.TEXTURE_2D,0,Le.RGBA,Le.RGBA,Le.UNSIGNED_BYTE,pe),Te.i.bindTexture2d(0),Te=ft;break e;case"detections":for((Te=C.s[G.stream])||(Te=new ha(C.i),C.s[G.stream]=Te),Te.data||(Te.data=new Te.h.DetectionListData),Te.data.reset(pe.length),ft=0;ft<pe.length;++ft){var lt=Te.data,Ot=lt.setBoundingBox,Rn=ft,Ht=(Le=pe[ft]).la,Qe=new hr;if(vn(Qe,1,Ht.sa),vn(Qe,2,Ht.ta),vn(Qe,3,Ht.height),vn(Qe,4,Ht.width),vn(Qe,5,Ht.rotation),wn(Qe,6,Ht.pa),Ht=Qe.l(),Ot.call(lt,Rn,Ht),Le.ea)for(lt=0;lt<Le.ea.length;++lt){Qe=Le.ea[lt],Rn=(Ot=Te.data).addNormalizedLandmark,Ht=ft,Qe=Object.assign({},Qe,{visibility:Qe.visibility?Qe.visibility:0});var Dt=new nr;vn(Dt,1,Qe.x),vn(Dt,2,Qe.y),vn(Dt,3,Qe.z),Qe.visibility&&vn(Dt,4,Qe.visibility),Qe=Dt.l(),Rn.call(Ot,Ht,Qe)}if(Le.ba)for(lt=0;lt<Le.ba.length;++lt)Rn=(Ot=Te.data).addClassification,Ht=ft,Qe=Le.ba[lt],vn(Dt=new Wn,2,Qe.qa),Qe.index&&wn(Dt,1,Qe.index),Qe.label&&wn(Dt,3,Qe.label),Qe.displayName&&wn(Dt,4,Qe.displayName),Qe=Dt.l(),Rn.call(Ot,Ht,Qe)}Te=Te.data;break e;default:Te={}}}switch(Z=Te,ue=G.stream,G.type){case"video":T.pushTexture2d(Object.assign({},Z,{stream:ue,timestamp:I}));break;case"detections":($e=Z).stream=ue,$e.timestamp=I,T.pushDetectionList($e);break;default:throw Error("Unknown input config type: '"+G.type+"'")}}return C.j.send(T),Me(Se,C.I,4);case 4:T.delete(),Se.h=0}})},Re.onResults=function(f,b){this.listeners[b||"$"]=f},Fe("Solution",Su),Fe("OptionType",{BOOL:0,NUMBER:1,ua:2,0:"BOOL",1:"NUMBER",2:"STRING"}),(Re=xa.prototype).reset=function(){this.h.reset()},Re.close=function(){return this.h.close(),Promise.resolve()},Re.onResults=function(f){this.h.onResults(f)},Re.initialize=function(){var f=this;return U(function(b){return Me(b,f.h.initialize(),0)})},Re.send=function(f,b){var C=this;return U(function(I){return Me(I,C.h.send(f,b),0)})},Re.setOptions=function(f){this.h.setOptions(f)},Fe("Pose",xa),Fe("POSE_CONNECTIONS",[[0,1],[1,2],[2,3],[3,7],[0,4],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[13,15],[15,17],[15,19],[15,21],[17,19],[12,14],[14,16],[16,18],[16,20],[16,22],[18,20],[11,23],[12,24],[23,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[27,31],[28,32]]),Fe("POSE_LANDMARKS",{NOSE:0,LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,LEFT_EAR:7,RIGHT_EAR:8,LEFT_RIGHT:9,RIGHT_LEFT:10,LEFT_SHOULDER:11,RIGHT_SHOULDER:12,LEFT_ELBOW:13,RIGHT_ELBOW:14,LEFT_WRIST:15,RIGHT_WRIST:16,LEFT_PINKY:17,RIGHT_PINKY:18,LEFT_INDEX:19,RIGHT_INDEX:20,LEFT_THUMB:21,RIGHT_THUMB:22,LEFT_HIP:23,RIGHT_HIP:24,LEFT_KNEE:25,RIGHT_KNEE:26,LEFT_ANKLE:27,RIGHT_ANKLE:28,LEFT_HEEL:29,RIGHT_HEEL:30,LEFT_FOOT_INDEX:31,RIGHT_FOOT_INDEX:32}),Fe("POSE_LANDMARKS_LEFT",{LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,LEFT_EAR:7,LEFT_RIGHT:9,LEFT_SHOULDER:11,LEFT_ELBOW:13,LEFT_WRIST:15,LEFT_PINKY:17,LEFT_INDEX:19,LEFT_THUMB:21,LEFT_HIP:23,LEFT_KNEE:25,LEFT_ANKLE:27,LEFT_HEEL:29,LEFT_FOOT_INDEX:31}),Fe("POSE_LANDMARKS_RIGHT",{RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,RIGHT_EAR:8,RIGHT_LEFT:10,RIGHT_SHOULDER:12,RIGHT_ELBOW:14,RIGHT_WRIST:16,RIGHT_PINKY:18,RIGHT_INDEX:20,RIGHT_THUMB:22,RIGHT_HIP:24,RIGHT_KNEE:26,RIGHT_ANKLE:28,RIGHT_HEEL:30,RIGHT_FOOT_INDEX:32}),Fe("POSE_LANDMARKS_NEUTRAL",{NOSE:0}),Fe("VERSION","0.5.1675469404")}).call(this)},1516:(Re,Ge,H)=>{"use strict";H.r(Ge),H.d(Ge,{Tab2PageModule:()=>FK});var Ee={};H.r(Ee),H.d(Ee,{CompositeArrayBuffer:()=>ar,browserFiles:()=>Fw,browserHTTPRequest:()=>Ww,concatenateArrayBuffers:()=>Db,copyModel:()=>ew,decodeWeights:()=>af,decodeWeightsStream:()=>cf,encodeWeights:()=>$b,fromMemory:()=>Gw,fromMemorySync:()=>Pf,getLoadHandlers:()=>Vb,getModelArtifactsForJSON:()=>Vc,getModelArtifactsForJSONSync:()=>ff,getModelArtifactsInfoForJSON:()=>Ea,getSaveHandlers:()=>zb,getWeightSpecs:()=>Uc,http:()=>sd,isHTTPScheme:()=>rd,listModels:()=>Zb,loadWeights:()=>Bw,moveModel:()=>tw,registerLoadRouter:()=>Mb,registerSaveRouter:()=>Bb,removeModel:()=>Jb,weightsLoaderFactory:()=>Ef,withSaveHandler:()=>Hw,withSaveHandlerSync:()=>jw});var ht={};H.r(ht),H.d(ht,{assertParamsValid:()=>Gu,computeFlatOffset:()=>hd,computeOutShape:()=>cd,getNormalizedAxes:()=>e1,isSliceContinous:()=>dd,maskToAxes:()=>Jw,parseSliceParams:()=>Hu,sliceInfo:()=>pd,startForAxis:()=>jf,startIndicesWithElidedDims:()=>Uf,stopForAxis:()=>Kf,stopIndicesWithElidedDims:()=>Gf,stridesForAxis:()=>Hf,stridesWithElidedDims:()=>zf});var ye={};H.r(ye),H.d(ye,{conv2d:()=>DI,depthwiseConv2d:()=>MI,matMul:()=>VI});var vt={};H.r(vt),H.d(vt,{collectGatherOpShapeInfo:()=>dh,computeOutShape:()=>ch,segOpComputeOptimalWindowSize:()=>Zm});var ke={};H.r(ke),H.d(ke,{ERF_A1:()=>Qd,ERF_A2:()=>Zd,ERF_A3:()=>Jd,ERF_A4:()=>eh,ERF_A5:()=>th,ERF_P:()=>Yd,PARALLELIZE_THRESHOLD:()=>Ud,RowPartitionType:()=>yr,SELU_SCALE:()=>qd,SELU_SCALEALPHA:()=>Xd,applyActivation:()=>sl,assertAndGetBroadcastShape:()=>Be,assertAxesAreInnerMostDims:()=>In,assertParamsConsistent:()=>Wd,assignToTypedArray:()=>EN,axesAreInnerMostDims:()=>xd,calculateShapes:()=>po,checkEinsumDimSizes:()=>oh,checkPadOnDimRoundingMode:()=>jn,combineLocations:()=>rm,combineRaggedTensorToTensorShapes:()=>Om,complexWithEvenIndex:()=>$N,complexWithOddIndex:()=>_N,computeConv2DInfo:()=>Ft,computeConv3DInfo:()=>gs,computeDefaultPad:()=>fd,computeDilation2DInfo:()=>Da,computeOptimalWindowSize:()=>il,computeOutAndReduceShapes:()=>Pn,computeOutShape:()=>Xn,computePool2DInfo:()=>Hn,computePool3DInfo:()=>zr,convertConv2DDataFormat:()=>ur,decodeEinsumEquation:()=>rh,eitherStridesOrDilationsAreOne:()=>nn,expandShapeToKeepDim:()=>mn,exponent:()=>AN,exponents:()=>RN,fromStringArrayToUint8:()=>Jm,fromUint8ToStringArray:()=>lr,getAxesPermutation:()=>jt,getBroadcastDims:()=>ms,getComplexWithIndex:()=>TN,getEinsumComputePath:()=>ih,getEinsumPermutation:()=>sh,getFusedBiasGradient:()=>rl,getFusedDyActivation:()=>nl,getImageCenter:()=>Gd,getInnerMostAxes:()=>Kt,getPermuted:()=>ja,getRaggedRank:()=>Lm,getReductionAxes:()=>If,getReshaped:()=>Ha,getReshapedPermuted:()=>Ka,getRowPartitionTypesHelper:()=>Fm,getSliceBeginCoords:()=>Hd,getSliceSize:()=>jd,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Vm,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Wm,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Um,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>jm,getSparseReshapeInputOutputMismatchErrorMessage:()=>Xm,getSparseReshapeInputOutputMultipleErrorMessage:()=>Km,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Gm,getSparseReshapeNegativeOutputDimErrorMessage:()=>Hm,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>Qm,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>lh,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>qm,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>Ym,getUndoAxesPermutation:()=>Ba,isIdentityPermutation:()=>ah,log:()=>Z0,mergeRealAndImagArrays:()=>mo,prepareAndValidate:()=>Kd,prepareSplitSize:()=>uh,segment_util:()=>vt,shouldFuse:()=>ol,slice_util:()=>ht,splitRealAndImagArrays:()=>NN,stridesOrDilationsArePositive:()=>lo,tupleValuesAreOne:()=>Fa,upcastType:()=>pn,validateDefaultValueShape:()=>Bm,validateInput:()=>Ed,validateUpdateShape:()=>Nm,warn:()=>sr});var Ne={};H.r(Ne),H.d(Ne,{json:()=>ON});var Oe={};H.r(Oe),H.d(Oe,{json:()=>FN});var fe={};H.r(fe),H.d(fe,{json:()=>LN});var V={};H.r(V),H.d(V,{json:()=>BN});var ee={};H.r(ee),H.d(ee,{json:()=>MN});var ce={};H.r(ce),H.d(ce,{json:()=>zN});var Y={};H.r(Y),H.d(Y,{json:()=>VN});var J={};H.r(J),H.d(J,{json:()=>WN});var me={};H.r(me),H.d(me,{json:()=>UN});var xe={};H.r(xe),H.d(xe,{json:()=>GN});var rt={};H.r(rt),H.d(rt,{json:()=>HN});var Nt={};H.r(Nt),H.d(Nt,{json:()=>jN});var Me={};H.r(Me),H.d(Me,{json:()=>KN});var yn={};H.r(yn),H.d(yn,{json:()=>XN});var cn={};H.r(cn),H.d(cn,{json:()=>qN});var He={};H.r(He),H.d(He,{json:()=>YN});var Ke={};H.r(Ke),H.d(Ke,{json:()=>QN});var et={};H.r(et),H.d(et,{json:()=>ZN});var Q={};H.r(Q),H.d(Q,{json:()=>JN});var U={};H.r(U),H.d(U,{OP_SCOPE_SUFFIX:()=>rf,abs:()=>Dn,acos:()=>r1,acosh:()=>o1,add:()=>Ce,addN:()=>a1,all:()=>l1,any:()=>d1,argMax:()=>qf,argMin:()=>f1,asin:()=>g1,asinh:()=>x1,atan:()=>w1,atan2:()=>C1,atanh:()=>I1,avgPool:()=>Yf,avgPool3d:()=>A1,basicLSTMCell:()=>M1,batchNorm:()=>ju,batchNorm2d:()=>G1,batchNorm3d:()=>j1,batchNorm4d:()=>X1,batchToSpaceND:()=>Qf,bincount:()=>Zf,bitwiseAnd:()=>Q1,booleanMaskAsync:()=>fI,broadcastArgs:()=>J1,broadcastTo:()=>La,buffer:()=>dt,cast:()=>mt,ceil:()=>nv,clipByValue:()=>Jf,clone:()=>fs,complex:()=>cs,concat:()=>zt,concat1d:()=>ov,concat2d:()=>av,concat3d:()=>lv,concat4d:()=>dv,conv1d:()=>fv,conv2d:()=>Ku,conv2dTranspose:()=>yv,conv3d:()=>bv,conv3dTranspose:()=>Sv,cos:()=>kv,cosh:()=>$v,cosineWindow:()=>Pd,cumprod:()=>Tv,cumsum:()=>Rv,denseBincount:()=>Dv,depthToSpace:()=>Ov,depthwiseConv2d:()=>yd,diag:()=>Bv,dilation2d:()=>zv,div:()=>je,divNoNan:()=>Gv,dot:()=>jv,dropout:()=>$I,einsum:()=>Ci,elu:()=>nm,enclosingPowerOfTwo:()=>Tm,ensureShape:()=>Yv,equal:()=>tm,erf:()=>Zv,euclideanNorm:()=>s2,exp:()=>Wr,expandDims:()=>On,expm1:()=>u2,eye:()=>om,fft:()=>_d,fill:()=>Ra,floor:()=>im,floorDiv:()=>Sf,fused:()=>ye,gather:()=>am,gatherND:()=>II,greater:()=>qu,greaterEqual:()=>um,ifft:()=>tl,imag:()=>Yu,image:()=>bs,inTopKAsync:()=>TI,irfft:()=>Sm,isFinite:()=>y2,isInf:()=>b2,isNaN:()=>v2,leakyRelu:()=>lm,less:()=>wd,lessEqual:()=>vd,linalg:()=>wN,linspace:()=>k2,localResponseNormalization:()=>$2,log:()=>za,log1p:()=>cm,logSigmoid:()=>D2,logSoftmax:()=>O2,logSumExp:()=>hm,logicalAnd:()=>Qu,logicalNot:()=>pm,logicalOr:()=>fm,logicalXor:()=>V2,losses:()=>vN,lowerBound:()=>U2,matMul:()=>gt,max:()=>Si,maxPool:()=>mm,maxPool3d:()=>j2,maxPoolWithArgmax:()=>X2,maximum:()=>kf,mean:()=>Ju,meshgrid:()=>Y2,min:()=>bd,minimum:()=>Va,mirrorPad:()=>gm,mod:()=>eC,moments:()=>nC,movingAverage:()=>yI,mul:()=>ne,multiRNNCell:()=>sC,multinomial:()=>iC,neg:()=>gr,norm:()=>Xu,notEqual:()=>ym,oneHot:()=>lC,ones:()=>co,onesLike:()=>dC,op:()=>O,outerProduct:()=>pC,pad:()=>xs,pad1d:()=>gC,pad2d:()=>xC,pad3d:()=>wC,pad4d:()=>CC,pool:()=>$C,pow:()=>Aa,prelu:()=>bm,print:()=>Cf,prod:()=>EC,raggedGather:()=>AC,raggedRange:()=>PC,raggedTensorToTensor:()=>FC,rand:()=>BC,randomGamma:()=>HC,randomNormal:()=>wm,randomStandardNormal:()=>XC,randomUniform:()=>Nd,randomUniformInt:()=>QC,range:()=>Wa,real:()=>Ua,reciprocal:()=>eS,relu:()=>el,relu6:()=>vm,reshape:()=>K,reverse:()=>ho,reverse1d:()=>oS,reverse2d:()=>aS,reverse3d:()=>lS,reverse4d:()=>dS,rfft:()=>Td,round:()=>Cm,rsqrt:()=>fS,scalar:()=>We,scatterND:()=>bI,searchSorted:()=>Cd,selu:()=>gS,separableConv2d:()=>xS,setdiff1dAsync:()=>wS,sigmoid:()=>Vr,sign:()=>CS,signal:()=>bN,sin:()=>IS,sinh:()=>NS,slice:()=>Ue,slice1d:()=>_S,slice2d:()=>ES,slice3d:()=>AS,slice4d:()=>PS,softmax:()=>FS,softplus:()=>dm,spaceToBatchND:()=>xm,sparse:()=>CN,sparseToDense:()=>CI,spectral:()=>xN,split:()=>Ga,sqrt:()=>Br,square:()=>Gn,squaredDifference:()=>Im,squeeze:()=>yt,stack:()=>Gr,step:()=>km,stridedSlice:()=>KS,string:()=>SN,sub:()=>Pe,sum:()=>kt,tan:()=>qS,tanh:()=>gd,tensor:()=>pr,tensor1d:()=>Yt,tensor2d:()=>Kn,tensor3d:()=>Of,tensor4d:()=>YS,tensor5d:()=>QS,tensor6d:()=>ZS,tensorScatterUpdate:()=>eI,tile:()=>Ma,topk:()=>nI,transpose:()=>Dd,truncatedNormal:()=>sI,unique:()=>iI,unsortedSegmentSum:()=>uI,unstack:()=>fo,upperBound:()=>cI,variable:()=>dI,where:()=>ys,whereAsync:()=>_m,zeros:()=>Ur,zerosLike:()=>An});var D={};H.r(D),H.d(D,{addImpl:()=>Rg,bincountImpl:()=>KT,bincountReduceImpl:()=>XT,bitwiseAndImpl:()=>Ag,castImpl:()=>Eg,ceilImpl:()=>Pg,concatImpl:()=>QT,equalImpl:()=>Og,expImpl:()=>Fg,expm1Impl:()=>Lg,floorDivImpl:()=>Mg,floorImpl:()=>Bg,gatherNdImpl:()=>rE,gatherV2Impl:()=>sE,greaterEqualImpl:()=>Vg,greaterImpl:()=>zg,lessEqualImpl:()=>Ug,lessImpl:()=>Wg,linSpaceImpl:()=>lE,logImpl:()=>Gg,maxImpl:()=>dE,maximumImpl:()=>Hg,minimumImpl:()=>jg,multiplyImpl:()=>Dh,negImpl:()=>Kg,notEqualImpl:()=>Xg,prodImpl:()=>Qg,raggedGatherImpl:()=>kE,raggedRangeImpl:()=>NE,raggedTensorToTensorImpl:()=>$E,rangeImpl:()=>_E,rsqrtImpl:()=>ny,scatterImpl:()=>EE,sigmoidImpl:()=>RE,simpleAbsImpl:()=>_g,sliceImpl:()=>ry,sparseFillEmptyRowsImpl:()=>PE,sparseReshapeImpl:()=>OE,sparseSegmentReductionImpl:()=>FE,sqrtImpl:()=>LE,staticRegexReplaceImpl:()=>sy,stridedSliceImpl:()=>zE,stringNGramsImpl:()=>WE,stringSplitImpl:()=>GE,stringToHashBucketFastImpl:()=>HE,subImpl:()=>oy,tileImpl:()=>XE,topKImpl:()=>qE,transposeImpl:()=>qg,uniqueImpl:()=>YE});var te=H(5672),_e=H(1368),Fe=H(4716),Ve=H(4692),st=H(7632),X=H(1528),St=H(2840);class Wt{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class It{refCount(t){return it("refCount")}incRef(t){return it("incRef")}timerAvailable(){return!0}time(t){return it("time")}read(t){return it("read")}readSync(t){return it("readSync")}readToGPU(t,e){return it("readToGPU")}numDataIds(){return it("numDataIds")}disposeData(t,e){return it("disposeData")}write(t,e,r){return it("write")}move(t,e,r,s,o){return it("move")}createTensorFromGPUData(t,e,r){return it("createTensorFromGPUData")}memory(){return it("memory")}floatPrecision(){return it("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return it("dispose")}}function it(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Do(n,t,e){return Math.max(n,Math.min(t,e))}function Po(n){return n%2==0?n:n+1}function Jn(n,t,e){const r=n[t];n[t]=n[e],n[e]=r}function Oo(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}function N(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function ut(n,t,e=""){N(ot(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function Sr(n){N(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function j(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function Ui(n){return 0===n.length}function ot(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function Ir(n){return n%1==0}function Es(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function xn(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function Gi(n,t=(s=>0),e,r){return new Promise((s,o)=>{let i=0;const a=()=>{if(n())return void s();i++;const u=t(i);null!=e&&i>=e?o():null!=r?r(a,u):setTimeout(a,u)};a()})}function Rs(n,t){let e=1,r=-1;for(let o=0;o<n.length;++o)if(n[o]>=0)e*=n[o];else if(-1===n[o]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${o}`);r=o}else if(n[o]<0)throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);if(-1===r){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const s=n.slice();return s[r]=t/e,s}function at(n,t){const e=t.length;return N((n=null==n?t.map((r,s)=>s):[].concat(n)).every(r=>r>=-e&&r<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),N(n.every(r=>Ir(r)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(r=>r<0?e+r:r)}function dr(n,t){const e=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,o=null==t||s?null:at(t,n).sort();let i=0;for(let a=0;a<n.length;++a){if(null!=o){if(o[i]===a&&1!==n[a])throw new Error(`Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`);(null==o[i]||o[i]>a)&&1===n[a]&&(e.push(n[a]),r.push(a)),o[i]<=a&&i++}1!==n[a]&&(e.push(n[a]),r.push(a))}return{newShape:e,keptDims:r}}function dn(n,t){return At(n,t)}function At(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function kr(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function Zr(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function As(n){return"string"==typeof n||n instanceof String}function bn(n){return Array.isArray(n)?bn(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":function Hi(n){return"number"==typeof n}(n)?"float32":As(n)?"string":function yu(n){return"boolean"==typeof n}(n)?"bool":"float32"}function Nr(n){return!!(n&&n.constructor&&n.call&&n.apply)}function Lo(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function pt(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let r=t-3;r>=0;--r)e[r]=e[r+1]*n[r+1];return e}function Bo(n,t,e,r=!1){const s=new Array;if(1===t.length){const o=t[0]*(r?2:1);for(let i=0;i<o;i++)s[i]=e[n+i]}else{const o=t[0],i=t.slice(1),a=i.reduce((u,l)=>u*l)*(r?2:1);for(let u=0;u<o;u++)s[u]=Bo(n+u*a,i,e,r)}return s}function $r(n,t,e=!1){if(0===n.length)return t[0];const r=n.reduce((s,o)=>s*o)*(e?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return Bo(0,n,t,e)}function er(n,t){if(Array.isArray(n))return n;if("float32"===t)return n instanceof Float32Array?n:new Float32Array(n);if("int32"===t)return n instanceof Int32Array?n:new Int32Array(n);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${t}`)}function Mo(n,t){const e=En(n,t);for(let r=0;r<e.length;r++)e[r]=1;return e}function En(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function Ut(n){n.forEach(t=>{N(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function Ds(n,t,e){if(0===t)return 0;if(1===t)return n[0];let r=n[n.length-1];for(let s=0;s<n.length-1;++s)r+=e[s]*n[s];return r}function tr(n,t,e){if(0===t)return[];if(1===t)return[n];const r=new Array(t);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(n/e[s]),n-=r[s]*e[s];return r[r.length-1]=n,r}function _r(n){return n&&n.then&&"function"==typeof n.then}const zn="tfjsflags";class Tr{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=xu,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,r){if(this.flagRegistry[t]={evaluationFn:e,setHook:r},null!=this.urlFlags[t]){const s=this.urlFlags[t];z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${s}.`),this.set(t,s)}}getAsync(t){var e=this;return(0,X.c)(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(_r(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=this.getQueryParams(this.global.location.search);zn in t&&t[zn].split(",").forEach(r=>{const[s,o]=r.split(":");this.urlFlags[s]=function Vn(n,t){const e=t.toLowerCase();return"true"===e||"false"===e?"true"===e:""+ +e===e?+e:t}(0,o)})}}function xu(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...r)=>(function Et(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,r[0],r[1]),r.join("="))),t}function z(){return bu}let Ps,bu=null;function Os(){if(null==Ps){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}Ps=n}return Ps}function Vo(n,t){const e=function Fs(){const n=Os();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const r=t();return e.set(n,r),e.get(n)}}const Ls="Acos",Wo="Acosh",Gt="Add",wn="AddN",Ms="ArgMax",Uo="ArgMin",zs="Asin",vn="Asinh",Go="Atan",es="Atanh",Cn="Atan2",ts="AvgPool",wu="AvgPoolGrad",Ho="AvgPool3D",jo="AvgPool3DGrad",Ki="BatchMatMul",Xi="BatchToSpaceND",Ko="Bincount",Vs="BitwiseAnd",Xo="BroadcastArgs",Bt="Cast",ns="Ceil",qo="ClipByValue",Rr="Complex",Yo="ComplexAbs",Qo="Concat",qi="Conv2D",Yi="Conv2DBackpropFilter",Zo="Conv2DBackpropInput",Jo="Conv3D",Ws="Conv3DBackpropFilterV2",ei="Conv3DBackpropInputV2",Ar="Cosh",Qi="Cumprod",Zi="Cumsum",Ji="CropAndResize",ea="DenseBincount",Us="DepthToSpace",Dr="DepthwiseConv2dNative",ta="DepthwiseConv2dNativeBackpropFilter",na="DepthwiseConv2dNativeBackpropInput",ra="Diag",sa="Dilation2D",ni="Draw",Pr="RealDiv",hn="Einsum",Cu="EluGrad",rs="Equal",Or="Exp",Gs="ExpandDims",Wn="Expm1",Hs="Fill",aa="FlipLeftRight",js="Floor",nr="FloorDiv",oi="FusedBatchNorm",ii="GatherV2",ua="GatherNd",Ks="Greater",hr="GreaterEqual",ss="Identity",la="IFFT",ai="Imag",ca="IsFinite",da="IsInf",Xs="IsNan",qs="LeakyRelu",os="Less",Ys="LessEqual",ha="LinSpace",Qs="Log",pa="Log1p",ui="LogicalAnd",fa="LogicalNot",ma="LogicalOr",Zs="LRNGrad",Js="Maximum",li="MaxPool",xa="MaxPoolGrad",f="MaxPool3D",b="MaxPool3DGrad",C="MaxPoolWithArgmax",I="Mean",T="Min",R="Minimum",E="MirrorPad",B="Mod",G="Multinomial",Z="Multiply",$e="NotEqual",Se="NonMaxSuppressionV3",pe="NonMaxSuppressionV4",Te="NonMaxSuppressionV5",Le="OnesLike",ft="OneHot",lt="Pack",Ot="PadV2",Qe="Prelu",Dt="Prod",rr="RaggedGather",Iu="RaggedRange",ku="RaggedTensorToTensor",ba="Range",ci="Real",wa="Reciprocal",is="Relu",ql="Reshape",Yl="ResizeNearestNeighbor",kp="ResizeNearestNeighborGrad",Ql="ResizeBilinear",Np="ResizeBilinearGrad",Zl="Relu6",Jl="Reverse",ec="Round",va="Rsqrt",tc="ScatterNd",nc="TensorScatterUpdate",rc="SearchSorted",sc="Select",oc="Selu",Nu="Slice",ac="Sinh",uc="Sign",Ca="Sigmoid",lc="Softplus",Sa="Sqrt",dc="SpaceToBatchND",hc="SplitV",pc="Softmax",$p="SparseFillEmptyRows",_p="SparseReshape",fc="SparseSegmentMean",mc="SparseSegmentSum",gc="SparseToDense",yc="SquaredDifference",$u="StaticRegexReplace",xc="StridedSlice",bc="StringNGrams",Ep="StringSplit",Rp="StringToHashBucketFast",Ia="Sub",vc="Tanh",_u="Tile",Cc="TopK",Sc="Transform",di="Transpose",Ic="Unpack",kc="UnsortedSegmentSum",Nc="ZerosLike",$c="Step",Tu="FromPixels",_c="RotateWithOffset",Eu="_FusedMatMul",Ru="FusedConv2D",Au="FusedDepthwiseConv2D";function sr(...n){z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(...n)}function Z0(...n){z().getBool("IS_TEST")||z().getBool("PROD")||console.log(...n)}const hi=Vo("kernelRegistry",()=>new Map),ka=Vo("gradRegistry",()=>new Map);function Du(n,t){const e=Rc(n,t);return hi.get(e)}function Dp(n){return ka.get(n)}function Tc(n){const t=hi.entries(),e=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[o,i]=s,[a]=o.split("_");a===n&&e.push(i)}return e}function Ec(n){const{kernelName:t,backendName:e}=n,r=Rc(t,e);hi.has(r)&&sr(`The kernel '${t}' for backend '${e}' is already registered`),hi.set(r,n)}function Rc(n,t){return`${t}_${n}`}function Pp(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}var Op=H(9476);const eo=H.n(Op)()||Op;function Pu(n){return eo.fromString(n,!0,16)}const Fp=Pu("c3a5c85c97cb3127"),to=Pu("b492b66fbe98f273"),en=Pu("9ae16a3b2f90404f");function Ac(n){return n.xor(n.shru(47))}function Lp(n,t,e){const r=n.slice(t,t+e);return eo.fromBytes(Array.from(r),!0,!0)}function Ct(n,t){return Lp(n,t,8)}function Bp(n,t){return Lp(n,t,4)}function Mt(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function as(n,t,e=Pu("9ddfea08eb382d69")){let r=n.xor(t).mul(e);r=r.xor(r.shru(47));let s=t.xor(r).mul(e);return s=s.xor(s.shru(47)),s=s.mul(e),s}function Ou(n,t,e,r){return function eb(n,t,e,r,s,o){s=s.add(n),o=Mt(o.add(s).add(r),21);const i=s;return s=(s=s.add(t)).add(e),o=o.add(Mt(s,44)),[s.add(r),o.add(i)]}(Ct(n,t),Ct(n,t+8),Ct(n,t+16),Ct(n,t+24),e,r)}function sb(n,t=n.length){const e=eo.fromNumber(81,!0);if(t<=32)return t<=16?function tb(n,t=n.length){if(t>=8){const e=en.add(2*t),r=Ct(n,0).add(en),s=Ct(n,t-8);return as(Mt(s,37).mul(e).add(r),Mt(r,25).add(s).mul(e),e)}if(t>=4){const e=en.add(2*t);return as(Bp(n,0).shl(3).add(t),Bp(n,t-4),e)}if(t>0){const i=t+(n[t-1]<<2);return Ac(en.mul(n[0]+(n[t>>1]<<8)).xor(Fp.mul(i))).mul(en)}return en}(n,t):function nb(n,t=n.length){const e=en.add(2*t),r=Ct(n,0).mul(to),s=Ct(n,8),o=Ct(n,t-8).mul(e),i=Ct(n,t-16).mul(en);return as(Mt(r.add(s),43).add(Mt(o,30)).add(i),r.add(Mt(s.add(en),18)).add(o),e)}(n,t);if(t<=64)return function rb(n,t=n.length){const e=en.add(2*t),r=Ct(n,0).mul(en),s=Ct(n,8),o=Ct(n,t-8).mul(e),i=Ct(n,t-16).mul(en),a=Mt(r.add(s),43).add(Mt(o,30)).add(i),u=as(a,r.add(Mt(s.add(en),18)).add(o),e),l=Ct(n,16).mul(e),c=Ct(n,24),d=a.add(Ct(n,t-32)).mul(e),h=u.add(Ct(n,t-24)).mul(e);return as(Mt(l.add(c),43).add(Mt(d,30)).add(h),l.add(Mt(c.add(r),18)).add(d),e)}(n,t);let r=e,s=e.mul(to).add(113),o=Ac(s.mul(en).add(113)).mul(en),i=[eo.UZERO,eo.UZERO],a=[eo.UZERO,eo.UZERO];r=r.mul(en).add(Ct(n,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=Mt(r.add(s).add(i[0]).add(Ct(n,u+8)),37).mul(to),s=Mt(s.add(i[1]).add(Ct(n,u+48)),42).mul(to),r=r.xor(a[1]),s=s.add(i[0]).add(Ct(n,u+40)),o=Mt(o.add(a[0]),33).mul(to),i=Ou(n,u,i[1].mul(to),r.add(a[0])),a=Ou(n,u+32,o.add(a[1]),s.add(Ct(n,u+16))),[o,r]=[r,o],u+=64}while(u!==l);const d=to.add(o.and(255).shl(1));return u=c,a[0]=a[0].add(t-1&63),i[0]=i[0].add(a[0]),a[0]=a[0].add(i[0]),r=Mt(r.add(s).add(i[0]).add(Ct(n,u+8)),37).mul(d),s=Mt(s.add(i[1]).add(Ct(n,u+48)),42).mul(d),r=r.xor(a[1].mul(9)),s=s.add(i[0].mul(9).add(Ct(n,u+40))),o=Mt(o.add(a[0]),33).mul(d),i=Ou(n,u,i[1].mul(d),r.add(a[0])),a=Ou(n,u+32,o.add(a[1]),s.add(Ct(n,u+16))),[o,r]=[r,o],as(as(i[0],a[0],d).add(Ac(s).mul(Fp)).add(o),as(i[1],a[1],d).add(r),d)}function pi(n,t){return"string"===t?us(n):Fu([n],t)}function Fu(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=Lr(n)),z().getBool("DEBUG")&&function fu(n,t){for(let e=0;e<n.length;e++){const r=n[e];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(n,t),function ob(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let r=0;r<e.length;++r)0!==Math.round(n[r])&&(e[r]=1);return e}throw new Error(`Unknown data type ${t}`)}function or(){return z().platform.now()}function us(n,t="utf-8"){return t=t||"utf-8",z().platform.encode(n,t)}function Fr(n,t="utf-8"){return t=t||"utf-8",z().platform.decode(n,t)}function Un(n){return null!=z().platform.isTypedArray?z().platform.isTypedArray(n):Pp(n)}function Lr(n,t=[],e=!1){if(null==t&&(t=[]),"boolean"==typeof n||"number"==typeof n||"string"==typeof n||_r(n)||null==n||Un(n)&&e)t.push(n);else if(Array.isArray(n)||Un(n))for(let r=0;r<n.length;++r)Lr(n[r],t,e);else{let r=-1;for(const s of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(s)&&(r=Math.max(r,Number(s)));for(let s=0;s<=r;s++)Lr(n[s],t,e)}return t}class ib{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ub)}profileKernel(t,e,r){let s;const o=()=>{s=r()};let i;const a=or();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(o);else{o();for(const l of s)l.dataSync();i=Promise.resolve({kernelMs:or()-a})}if(z().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let l=0;l<s.length;l++){const c=s[l];c.data().then(d=>{ab(d,c.dtype,t)})}return{kernelName:t,outputs:s,inputs:e,timeMs:i.then(l=>l.kernelMs),extraInfo:i.then(l=>null!=l.getExtraProfileInfo?l.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:r,timeMs:s,inputs:o,extraInfo:i}=t;r.forEach(a=>{Promise.all([a.data(),s,i]).then(u=>{this.logger.logKernelProfile(e,a,u[0],u[1],o,u[2])})})}}function ab(n,t,e){if("float32"!==t)return!1;for(let r=0;r<n.length;r++){const s=n[r];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${e}'`),!0}return!1}class ub{logKernelProfile(t,e,r,s,o,i){const a="number"==typeof s?xn(`${s}ms`,9):s.error,u=xn(t,25),l=e.rank,c=e.size,d=xn(e.shape.toString(),14);let h="";for(const p in o){const m=o[p];if(null!=m){const y=m.shape||e.shape,g=y.length;h+=`${p}: ${g}D ${g>0?y:""} `}}console.log(`%c${u}\t%c${a}\t%c${l}D ${d}\t%c${c}\t%c${h}\t%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const Mp=20,Na=3,Dc=7;function db(n,t,e,r){const s=pt(t),o=function hb(n,t,e,r){const s=j(t),o=r[r.length-1],i=new Array(o).fill(0),a=t.length,u="complex64"===e?_a(n):n;if(a>1)for(let l=0;l<s/o;l++){const c=l*o;for(let d=0;d<o;d++)i[d]=Math.max(i[d],$a(u[c+d],0,e).length)}return i}(n,t,e,s),i=t.length,a=Lu(n,t,e,s,o),u=["Tensor"];return r&&(u.push(`  dtype: ${e}`),u.push(`  rank: ${i}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(a.map(l=>"    "+l).join("\n")),u.join("\n")}function $a(n,t,e){let r;return r=Array.isArray(n)?`${parseFloat(n[0].toFixed(Dc))} + ${parseFloat(n[1].toFixed(Dc))}j`:As(n)?`'${n}'`:"bool"===e?zp(n):parseFloat(n.toFixed(Dc)).toString(),xn(r,t)}function zp(n){return 0===n?"false":"true"}function Lu(n,t,e,r,s,o=!0){const i="complex64"===e?2:1,a=t[0],u=t.length;if(0===u)return"complex64"===e?[$a(_a(n)[0],0,e)]:"bool"===e?[zp(n[0])]:[n[0].toString()];if(1===u){if(a>Mp){let x=Array.from(n.slice(0,Na*i)),w=Array.from(n.slice((a-Na)*i,a*i));return"complex64"===e&&(x=_a(x),w=_a(w)),["["+x.map((S,k)=>$a(S,s[k],e)).join(", ")+", ..., "+w.map((S,k)=>$a(S,s[a-Na+k],e)).join(", ")+"]"]}return["["+("complex64"===e?_a(n):Array.from(n)).map((g,x)=>$a(g,s[x],e)).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),d=r[0]*i,h=[];if(a>Mp){for(let y=0;y<Na;y++){const g=y*d;h.push(...Lu(n.slice(g,g+d),l,e,c,s,!1))}h.push("...");for(let y=a-Na;y<a;y++){const g=y*d;h.push(...Lu(n.slice(g,g+d),l,e,c,s,y===a-1))}}else for(let y=0;y<a;y++){const g=y*d;h.push(...Lu(n.slice(g,g+d),l,e,c,s,y===a-1))}const p=2===u?",":"";h[0]="["+(a>0?h[0]+p:"");for(let y=1;y<h.length-1;y++)h[y]=" "+h[y]+p;let m=",\n";for(let y=2;y<u;y++)m+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(o?"":m),h}function _a(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class fi{constructor(t,e,r){if(this.dtype=e,this.shape=t.slice(),this.size=j(t),null!=r){const s=r.length;N(s===this.size,()=>`Length of values '${s}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=r||At(e,this.size),this.strides=pt(t)}set(t,...e){0===e.length&&(e=[0]),N(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const r=this.locToIndex(e);this.values[r]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const s of t){if(s<0||s>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let r=t[t.length-1];for(let s=0;s<t.length-1;++s)r+=this.strides[s]*t[s];return this.values[r]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let r=0;r<t.length-1;++r)e+=this.strides[r]*t[r];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let r=0;r<e.length-1;++r)e[r]=Math.floor(t/this.strides[r]),t-=e[r]*this.strides[r];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return ir().makeTensor(this.values,this.shape,this.dtype)}}let ir=null,mi=null,Vp=null;class _t{constructor(t,e,r,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=j(t),this.strides=pt(t),this.dataId=r,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return(0,X.c)(function*(){const e=yield t.data();return mi.buffer(t.shape,t.dtype,e)})()}bufferSync(){return mi.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return(0,X.c)(function*(){const e=yield t.data();return $r(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return $r(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return(0,X.c)(function*(){t.throwIfDisposed();const e=ir().read(t.dataId);if("string"===t.dtype){const r=yield e;try{return r.map(s=>Fr(s))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataToGPU(t){return this.throwIfDisposed(),ir().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=ir().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>Fr(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return(0,X.c)(function*(){t.throwIfDisposed();const e=yield ir().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),ir().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return mi.print(this,t)}clone(){return this.throwIfDisposed(),mi.clone(this)}toString(t=!1){return db(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),mi.cast(this,t)}variable(t=!0,e,r){return this.throwIfDisposed(),ir().makeVariable(this,t,e,r)}}function Wp(){return Vo("Tensor",()=>_t)}Object.defineProperty(_t,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),Wp();class Bu extends _t{constructor(t,e,r,s){super(t.shape,t.dtype,t.dataId,s),this.trainable=e,this.name=r}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!ot(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);ir().disposeTensor(this),this.dataId=t.dataId,ir().incRef(this,null)}dispose(){ir().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Bu,Symbol.hasInstance,{value:n=>n instanceof _t&&null!=n.assign&&n.assign instanceof Function});var Up=function(n){return n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",n}(Up||{}),Gp=function(n){return n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",n}(Gp||{}),Hp=function(n){return n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",n}(Hp||{}),jp=function(n){return n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",n}(jp||{});const yb={float32:Hp,int32:Up,bool:Gp,complex64:jp};function pn(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return yb[n][t]}function Mu(n){return pn(n,"int32")}function Kp(n){return null!=n&&"object"==typeof n&&"texture"in n&&n.texture instanceof WebGLTexture}function Xp(n){return typeof GPUBuffer<"u"&&null!=n&&"object"==typeof n&&"buffer"in n&&n.buffer instanceof GPUBuffer}function Rt(n,t){if(n.dtype===t.dtype)return[n,t];const e=pn(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function qp(n){const t=[];return Yp(n,t,new Set),t}function Yp(n,t,e){if(null==n)return;if(n instanceof _t)return void t.push(n);if(!function bb(n){return Array.isArray(n)||"object"==typeof n}(n))return;const r=n;for(const s in r){const o=r[s];e.has(o)||(e.add(o),Yp(o,t,e))}}function Pc(n){return null!=n.kernelName}class Qp{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let wb=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Qp}ready(){var e=this;return(0,X.c)(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const r=e.getSortedBackends();for(let s=0;s<r.length;s++){const o=r[s];if(yield e.initializeBackend(o).success)return void(yield e.setBackend(o))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:r}=this.initializeBackendsAndReturnBest();if(r)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:r}=this.initializeBackend(e);if(r)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,r,s=1){return e in this.registryFactory?(sr(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:r,priority:s},!0)}setBackend(e){var r=this;return(0,X.c)(function*(){if(null==r.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(r.backendName=e,null==r.registry[e]){r.backendInstance=null;const{success:s,asyncInit:o}=r.initializeBackend(e);if(!(o?yield s:s))return!1}return r.backendInstance=r.registry[e],r.setupRegisteredKernels(),r.profiler=new ib(r.backendInstance),!0})()}setupRegisteredKernels(){Tc(this.backendName).forEach(r=>{null!=r.setupFunc&&r.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Tc(e).forEach(s=>{null!=s.disposeFunc&&s.disposeFunc(this.registry[e])})}initializeBackend(e){const r=this.registryFactory[e];if(null==r)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const s=r.factory();if(!s||s instanceof It||"function"!=typeof s.then)return this.registry[e]=s,{success:!0,asyncInit:!1};{const o=++this.pendingBackendInitId,i=s.then(a=>!(o<this.pendingBackendInitId||(this.registry[e]=a,this.pendingBackendInit=null,0))).catch(a=>(o<this.pendingBackendInitId||(this.pendingBackendInit=null,sr(`Initialization of backend ${e} failed`),sr(a.stack||a.message)),!1));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}}catch(s){return sr(`Initialization of backend ${e} failed`),sr(s.stack||s.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,r)=>this.registryFactory[r].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let r=0;r<e.length;r++){const s=e[r],{success:o,asyncInit:i}=this.initializeBackend(s);if(i||o)return{name:s,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,r){const s=this.state.tensorInfo.get(r),o=s.backend,i=this.readSync(r),a=o.refCount(r);o.disposeData(r,!0),s.backend=e,e.move(r,i,s.shape,s.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,r){let o,s=null;if(null==r){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");r=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof r)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun(()=>this.startScope(s),()=>this.endScope(o),()=>(o=r(),o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),o))}scopedRun(e,r,s){e();try{const o=s();return r(),o}catch(o){throw r(),o}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const r=F.runKernel(ss,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[r],a=>({x:()=>F.runKernel(Bt,{x:a},{dtype:"float32"})}),[],{}),r}runKernel(e,r,s){if(null==Du(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:r,attrs:s})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,r,s){const o=this.backend.numDataIds();let i=0;s.forEach(l=>{i+="complex64"===l.dtype?3:1});const u=o-r-i-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(u>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${u} data ids) after running '${e}'`)}runKernelFunc(e){let r,s=[];const o=this.isTapeOn(),i=this.state.numBytes,a=this.state.numTensors;let u,l;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=Pc(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Pc(e)){const{kernelName:y,inputs:g,attrs:x}=e,w=Du(y,this.backendName);N(null!=w,()=>`Cannot find registered kernel '${y}' for backend '${this.backendName}'`),u=()=>{const S=this.backend.numDataIds();l=w.kernelFunc({inputs:g,attrs:x,backend:this.backend});const k=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(y,S,k);const _=k.map(A=>null!=A.rank?A:this.makeTensorFromTensorInfo(A));if(o){const A=this.getTensorsForGradient(y,g,_);s=this.saveTensorsForBackwardMode(A)}return _}}else{const{forwardFunc:y}=e,g=x=>{o&&(s=x.map(w=>this.keep(this.clone(w))))};u=()=>{const x=this.backend.numDataIds();l=this.tidy(()=>y(this.backend,g));const w=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,x,w),w}}const{inputs:d,attrs:h}=e,p=Pc(e)?null:e.backwardsFunc;let m;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(c,d,()=>u()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),r=m.outputs):r=u()}),o&&this.addTapeNode(c,d,r,p,s,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-i,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(d).map(y=>null!=d[y]?d[y].shape:null),outputShapes:r.map(y=>y.shape),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(l)?r:r[0]}saveTensorsForBackwardMode(e){return e.map(s=>this.keep(this.clone(s)))}getTensorsForGradient(e,r,s){const o=Dp(e);if(null!=o){const i=o.inputsToSave||[],a=o.outputsToSave||[];let u;o.saveAllInputs?(N(Array.isArray(r),()=>"saveAllInputs is true, expected inputs to be an array."),u=Object.keys(r).map(c=>r[c])):u=i.map(c=>r[c]);const l=s.filter((c,d)=>a[d]);return u.concat(l)}return[]}makeTensor(e,r,s,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");o=o||this.backend;let i=e;"string"===(s=s||"float32")&&As(e[0])&&(i=e.map(l=>us(l)));const a=o.write(i,r,s),u=new _t(r,s,a,this.nextTensorId());if(this.trackTensor(u,o),"string"===s){const l=this.state.tensorInfo.get(a),c=function gu(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}(i);this.state.numBytes+=c-l.bytes,l.bytes=c}return u}makeTensorFromDataId(e,r,s,o){return this.makeTensorFromTensorInfo({dataId:e,shape:r,dtype:s=s||"float32"},o)}makeTensorFromTensorInfo(e,r){const{dataId:s,shape:o,dtype:i}=e,a=new _t(o,i,s,this.nextTensorId());return this.trackTensor(a,r),a}makeVariable(e,r=!0,s,o){s=s||this.nextVariableId().toString(),null!=o&&o!==e.dtype&&(e=e.cast(o));const i=new Bu(e,r,s,this.nextTensorId());if(null!=this.state.registeredVariables[i.name])throw new Error(`Variable with name ${i.name} was already registered`);return this.state.registeredVariables[i.name]=i,this.incRef(i,this.backend),i}trackTensor(e,r){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let s=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(s=e.size*Zr(e.dtype)),this.state.numBytes+=s,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:r||this.backend,dtype:e.dtype,shape:e.shape,bytes:s})),e instanceof Bu||this.track(e)}incRef(e,r){this.trackTensor(e,r),this.backend.incRef(e.dataId)}removeDataId(e,r){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===r&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const r=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=r.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const s=e.size*Zr(e.dtype);this.state.numBytes-=s}r.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,r.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var r=this;return(0,X.c)(function*(){r.state.profiling=!0;const s=r.state.numBytes,o=r.state.numTensors;r.state.activeProfile.kernels=[],r.state.activeProfile.result=yield e(),r.state.profiling=!1,r.state.activeProfile.peakBytes=Math.max(...r.state.activeProfile.kernels.map(i=>i.totalBytesSnapshot)),r.state.activeProfile.newBytes=r.state.numBytes-s,r.state.activeProfile.newTensors=r.state.numTensors-o;for(const i of r.state.activeProfile.kernels)i.kernelTimeMs=yield i.kernelTimeMs,i.extraInfo=yield i.extraInfo;return r.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,r,s,o,i,a){const u={id:this.state.nextTapeNodeId++,kernelName:e,inputs:r,outputs:s,saved:i},l=Dp(e);null!=l&&(o=l.gradFunc),null!=o&&(u.gradient=c=>(c=c.map((d,h)=>{if(null==d){const p=s[h],m=En(p.size,p.dtype);return this.makeTensor(m,p.shape,p.dtype)}return d}),o(c.length>1?c:c[0],i,a))),this.state.activeTape.push(u)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const r={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(r.name=e),this.state.scopeStack.push(r),this.state.activeScope=r}endScope(e){const r=qp(e),s=new Set(r.map(i=>i.id));for(let i=0;i<this.state.activeScope.track.length;i++){const a=this.state.activeScope.track[i];!a.kept&&!s.has(a.id)&&a.dispose()}const o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],r.forEach(i=>{!i.kept&&i.scopeId===o.id&&this.track(i)})}gradients(e,r,s,o=!1){if(N(r.length>0,()=>"gradients() received an empty list of xs."),null!=s&&"float32"!==s.dtype)throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);const i=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));N(i instanceof _t,()=>"The result y returned by f() must be a tensor.");const a=function lb(n,t,e){const r={},s={};for(let u=0;u<t.length;u++)r[t[u].id]=!0;for(let u=0;u<n.length;u++){const l=n[u],c=l.inputs;for(const d in c){const h=c[d];let p=!1;for(let m=0;m<t.length;m++)if(r[h.id]){l.outputs.forEach(y=>r[y.id]=!0),p=!0,s[l.id]=!0;break}if(p)break}}const o={};o[e.id]=!0;const i={};for(let u=n.length-1;u>=0;u--){const l=n[u],c=l.inputs;for(let d=0;d<l.outputs.length;d++)if(o[l.outputs[d].id]){for(const h in c)o[c[h].id]=!0,i[l.id]=!0;break}}const a=[];for(let u=0;u<n.length;u++){const l=n[u];if(s[l.id]&&i[l.id]){const c={};for(const h in l.inputs){const p=l.inputs[h];r[p.id]&&(c[h]=p)}const d=Object.assign({},l);d.inputs=c,d.outputs=l.outputs,a.push(d)}}return a}(this.state.activeTape,r,i);if(!o&&0===a.length&&r.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const u={};u[i.id]=null==s?function vb(n){const t=Mo(j(n),"float32");return F.makeTensor(t,n,"float32")}(i.shape):s,function cb(n,t,e,r){for(let s=t.length-1;s>=0;s--){const o=t[s],i=[];if(o.outputs.forEach(u=>{const l=n[u.id];i.push(null!=l?l:null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const a=o.gradient(i);for(const u in o.inputs){if(!(u in a))throw new Error(`Cannot backprop through input ${u}. Available gradients found: ${Object.keys(a)}.`);const l=e(()=>a[u]());if("float32"!==l.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${u} must have 'float32' dtype, but has '${l.dtype}'`);const c=o.inputs[u];if(!ot(l.shape,c.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${u}' has shape '${l.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=l;else{const d=n[c.id];n[c.id]=r(d,l),d.dispose()}}}}(u,a,c=>this.tidy(c),Cb);const l=r.map(c=>u[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const d of c.saved)d.dispose()}),this.state.activeTape=null),{value:i,grads:l}})}customGrad(e){return N(Nr(e),()=>"The f passed in customGrad(f) must be a function."),(...r)=>{let s;N(r.every(u=>u instanceof _t),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};return r.forEach((u,l)=>{o[l]=u}),this.runKernelFunc({forwardFunc:(u,l)=>(s=e(...r,l),N(s.value instanceof _t,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),N(Nr(s.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),s.value),backwardsFunc:(u,l)=>{const c=s.gradFunc(u,l),d=Array.isArray(c)?c:[c];N(d.length===r.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),N(d.every(p=>p instanceof _t),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const h={};return d.forEach((p,m)=>{h[m]=()=>p}),h},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,r){return this.state.tensorInfo.get(e).backend.readToGPU(e,r)}time(e){var r=this;return(0,X.c)(function*(){const s=or(),o=yield r.backend.time(e);return o.wallMs=or()-s,o})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Qp;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function Zp(){const n=Os();if(null==n._tfengine){const t=new Tr(n);n._tfengine=new wb(t)}return function zo(n){bu=n}(n._tfengine.ENV),function pb(n){ir=n}(()=>n._tfengine),n._tfengine}const F=Zp();function Cb(n,t){return F.runKernel(Gt,{a:n,b:t})}function Jp(n){if(n||function Sb(){return typeof navigator<"u"&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");return t?/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)):n.userAgentData&&n.userAgentData.mobile}return!1}function ef(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const fn=z();function ls(n,t){let e=n;if(Un(n))return"string"===t?[]:[n.length];if(Kp(n))return[n.height,n.width*(n.channels||"RGBA").length];if(Xp(n))return[n.buffer.size/(null==t?4:Zr(t))];if(!Array.isArray(n))return[];const r=[];for(;Array.isArray(e)||Un(e)&&"string"!==t;)r.push(e.length),e=e[0];return Array.isArray(n)&&z().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&tf(n,r,[]),r}function tf(n,t,e){if(e=e||[],!Array.isArray(n)&&!Un(n))return void N(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);N(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),N(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const r=t.slice(1);for(let s=0;s<n.length;++s)tf(n[s],r,e.concat(s))}function nf(n,t,e,r){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${r}' must be ${n} tensor, but got ${t} tensor`)}}function $(n,t,e,r="numeric"){if(n instanceof Wp())return nf(r,n.dtype,t,e),n;let s=bn(n);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),nf(r,s,t,e),null==n||!Un(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const o=ls(n,s);!Un(n)&&!Array.isArray(n)&&(n=[n]);const a="string"!==s?Fu(n,s):Lr(n,[],!0);return F.makeTensor(a,o,s)}function zu(n,t,e,r="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((o,i)=>$(o,`${t}[${i}]`,e,r))}fn.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),fn.registerFlag("IS_BROWSER",()=>ef()),fn.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),fn.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),fn.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),fn.registerFlag("PROD",()=>!1),fn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>fn.getBool("DEBUG")),fn.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),fn.registerFlag("IS_TEST",()=>!1),fn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>fn.getBool("DEBUG")),fn.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),fn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),fn.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const rf="__op";function O(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const r=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+=rf;const s=(...o)=>{F.startScope(e);try{const i=r(...o);return _r(i)&&console.error("Cannot return a Promise inside of tidy."),F.endScope(i),i}catch(i){throw F.endScope(null),i}};return Object.defineProperty(s,"name",{value:e,configurable:!0}),s}const cs=O({complex_:function Ib(n,t){const e=$(n,"real","complex"),r=$(t,"imag","complex");return ut(e.shape,r.shape,`real and imag shapes, ${e.shape} and ${r.shape}, must match in call to tf.complex().`),F.runKernel(Rr,{real:e,imag:r})}});function ds(n,t,e,r){if(null==r)r=bn(n);else if("complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Xp(n)||Kp(n)){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return F.backend.createTensorFromGPUData(n,t||e,r)}if(!Un(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Ut(t);const s=j(t),o=j(e);N(s===o,()=>`Based on the provided shape, [${t}], the tensor should have ${s} values but has ${o}`);for(let i=0;i<e.length;++i){const u=i!==e.length-1||e[i]!==j(t.slice(i));N(e[i]===t[i]||!u,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!Un(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==r?Fu(n,r):Lr(n,[],!0),F.makeTensor(n,t,r)}function pr(n,t,e){return ds(n,t,ls(n,e),e)}const no={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class ar{static join(t){return new ar(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,null==t||(t instanceof Array||(t=[t]),0===(t=t.map(r=>Un(r)?r.buffer:r)).length))return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let r=0;r<t.length;r++){const s=t[r];r!==t.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const o=e+s.byteLength;this.shards.push({buffer:s,start:e,end:o}),e=o}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),(e=Math.min(this.byteLength,e))<=t)return new ArrayBuffer(0);const r=this.findShardForByte(t);if(-1===r)throw new Error(`Could not find start shard for byte ${t}`);const o=new ArrayBuffer(e-t),i=new Uint8Array(o);let a=0;for(let u=r;u<this.shards.length;u++){const l=this.shards[u],d=t+a-l.start,h=a,m=Math.min(e,l.end)-l.start,y=new Uint8Array(l.buffer,d,m-d);if(i.set(y,h),a+=y.length,e<l.end)break}return o}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(s){return t<s.start?-1:t>=s.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const r=function kb(n,t){let e=0,r=n.length;for(;e<=r;){const s=Math.floor((r-e)/2)+e,o=t(n[s]);if(0===o)return s;o<0?r=s:e=s+1}return-1}(this.shards,e);return-1===r?-1:(this.previousShardIndex=r,this.previousShardIndex)}}function Sn(){return F}function Ae(n,t){return F.tidy(n,t)}function ct(n){qp(n).forEach(e=>e.dispose())}function fr(n){return F.keep(n)}function sf(){return F.ready()}function Ta(){return F.backendName}function of(n,t,e=1){return F.registerBackend(n,t,e)}function gi(){return F.backend}!function mb(n){Vp=n}(function Nb(n){z().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")});const hs=4;function $b(n,t){return Fc.apply(this,arguments)}function Fc(){return Fc=(0,X.c)(function*(n,t){const e=[],r=[],s=Array.isArray(n)?n.map(i=>i.name):Object.keys(n);for(let i=0;i<s.length;++i){const a=s[i],u=Array.isArray(n)?n[i].tensor:n[a];if("float32"!==u.dtype&&"int32"!==u.dtype&&"bool"!==u.dtype&&"string"!==u.dtype&&"complex64"!==u.dtype)throw new Error(`Unsupported dtype in weight '${a}': ${u.dtype}`);const l={name:a,shape:u.shape,dtype:u.dtype};if("string"===u.dtype){const c=new Promise(function(){var d=(0,X.c)(function*(h){const p=yield u.bytes(),m=p.reduce((x,w)=>x+w.length,0)+hs*p.length,y=new Uint8Array(m);let g=0;for(let x=0;x<p.length;x++){const w=p[x],S=new Uint8Array(new Uint32Array([w.length]).buffer);y.set(S,g),g+=hs,y.set(w,g),g+=w.length}h(y)});return function(h){return d.apply(this,arguments)}}());r.push(c)}else r.push(u.data());null!=t&&(l.group=t),e.push(l)}return{data:Eb(yield Promise.all(r)),specs:e}}),Fc.apply(this,arguments)}function af(n,t){const e=new ar(n),r={};let s=0;for(const o of t){const i=_b(o,(a,u)=>e.slice(s+a,s+u));r[o.name]=uf(o,e.slice(s,s+i)),s+=i}return r}function _b(n,t){const e=j(n.shape);let r;if("quantization"in n)r=no[n.quantization.dtype];else{if("string"===n.dtype){let s=0;for(let o=0;o<e;o++)s+=hs+new Uint32Array(t(s,s+hs))[0];return s}r=no[n.dtype]}return e*r}function Tb(n,t){return Lc.apply(this,arguments)}function Lc(){return(Lc=(0,X.c)(function*(n,t){const e=j(n.shape);let r;if("quantization"in n)r=no[n.quantization.dtype];else{if("string"===n.dtype){let s=0;for(let o=0;o<e;o++)s+=hs+new Uint32Array(yield t(s,s+hs))[0];return s}r=no[n.dtype]}return e*r})).apply(this,arguments)}function uf(n,t){const e=n.name,r=n.dtype,s=n.shape,o=j(s);let i,a=0;if("quantization"in n){const u=n.quantization;if("uint8"===u.dtype||"uint16"===u.dtype){if(!("min"in u)||!("scale"in u))throw new Error(`Weight ${n.name} with quantization ${u.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==u.dtype)throw new Error(`Weight ${n.name} has unknown quantization dtype ${u.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==r)throw new Error(`Weight ${n.name} is quantized with ${u.dtype} which only supports weights of type float32 not ${r}.`)}const l=no[u.dtype],c="uint8"===u.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===r)if("uint8"===u.dtype||"uint16"===u.dtype){i=new Float32Array(c.length);for(let d=0;d<c.length;d++)i[d]=c[d]*u.scale+u.min}else{if("float16"!==u.dtype)throw new Error(`Unsupported quantization type ${u.dtype} for weight type float32.`);i=function Lb(){const n=function Pb(){const n=e=>{let r=e<<13,s=0;for(;!(8388608&r);)s-=8388608,r<<=1;return r&=-8388609,s+=947912704,r|s},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function Ob(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function Fb(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return r=>{const s=new ArrayBuffer(4*r.length),o=new Uint32Array(s);for(let i=0;i<r.length;i++){const a=r[i];o[i]=n[e[a>>10]+(1023&a)]+t[a>>10]}return new Float32Array(s)}}()(c)}else{if("int32"!==r)throw new Error(`Unsupported dtype in weight '${e}': ${r}`);if("uint8"!==u.dtype&&"uint16"!==u.dtype)throw new Error(`Unsupported quantization type ${u.dtype} for weight type int32.`);i=new Int32Array(c.length);for(let d=0;d<c.length;d++)i[d]=Math.round(c[d]*u.scale+u.min)}a+=o*l}else if("string"===r){const u=j(n.shape);i=[];for(let l=0;l<u;l++){const c=new Uint32Array(t.slice(a,a+hs))[0];a+=hs;const d=new Uint8Array(t.slice(a,a+c));i.push(d),a+=c}}else{const u=no[r];if("float32"===r)i=new Float32Array(t);else if("int32"===r)i=new Int32Array(t);else{if("bool"!==r){if("complex64"===r){i=new Float32Array(t);const l=new Float32Array(i.length/2),c=new Float32Array(i.length/2);for(let m=0;m<l.length;m++)l[m]=i[2*m],c[m]=i[2*m+1];const d=pr(l,s,"float32"),h=pr(c,s,"float32"),p=cs(d,h);return d.dispose(),h.dispose(),p}throw new Error(`Unsupported dtype in weight '${e}': ${r}`)}i=new Uint8Array(t)}a+=o*u}return pr(i,s,r)}function lf(n,t,e){return Bc.apply(this,arguments)}function Bc(){return(Bc=(0,X.c)(function*(n,t,e){let r=new Uint8Array(t);for(;r.byteLength<e;){const{done:s,value:o}=yield n.read();if(s&&null==o)throw new Error(`Reader is done but ${e-r.byteLength} bytes are still expected`);const i=new Uint8Array(r.length+o.byteLength);i.set(r,0),i.set(new Uint8Array(o),r.length),r=i}return r.buffer})).apply(this,arguments)}function cf(n,t){return Mc.apply(this,arguments)}function Mc(){return Mc=(0,X.c)(function*(n,t){const e={},r=n.getReader();let s=new ArrayBuffer(0);for(const o of t){const i=yield Tb(o,function(){var l=(0,X.c)(function*(c,d){return s=yield lf(r,s,d),s.slice(c,d)});return function(c,d){return l.apply(this,arguments)}}());s=yield lf(r,s,i);const a=s.slice(0,i);s=s.slice(i);const u=uf(o,a);if(e[o.name]=u,"webgpu"===Ta()){const l=gi();"uploadToGPU"in l&&j(u.shape)>=z().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&l.uploadToGPU(u.dataId)}}return e}),Mc.apply(this,arguments)}function Eb(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(o=>{if(t+=o.byteLength,e.push(o.byteLength===o.buffer.byteLength?o:new o.constructor(o)),!(o instanceof Float32Array||o instanceof Int32Array||o instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`)});const r=new Uint8Array(t);let s=0;return e.forEach(o=>{r.set(new Uint8Array(o.buffer),s),s+=o.byteLength}),r.buffer}const zc=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function df(n){return zc?Buffer.byteLength(n,"utf8"):new Blob([n]).size}function Db(n){return ar.join(n)}function hf(n){for(n=n.trim();n.endsWith("/");)n=n.slice(0,n.length-1);const e=n.split("/");return e[e.length-1]}function pf(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(e.initializerSignature=n.initializerSignature),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function ff(n,t,e){const r={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(r.trainingConfig=n.trainingConfig),null!=n.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=e}return null!=n.signature&&(r.signature=n.signature),null!=n.userDefinedMetadata&&(r.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(r.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(r.initializerSignature=n.initializerSignature),r}function Vc(n,t){return Wc.apply(this,arguments)}function Wc(){return(Wc=(0,X.c)(function*(n,t){let e,r;return null!=n.weightsManifest&&([e,r]=yield t(n.weightsManifest)),ff(n,e,r)})).apply(this,arguments)}function Ea(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:df(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:df(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:new ar(n.weightData).byteLength}}function Uc(n){const t=[];for(const e of n)t.push(...e.weights);return t}class Tt{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Tt.instance&&(Tt.instance=new Tt),Tt.instance}static registerSaveRouter(t){Tt.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Tt.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Tt.getHandlers(t,"save")}static getLoadHandlers(t,e){return Tt.getHandlers(t,"load",e)}static getHandlers(t,e,r){const s=[];return("load"===e?Tt.getInstance().loadRouters:Tt.getInstance().saveRouters).forEach(i=>{const a=i(t,r);null!==a&&s.push(a)}),s}}const Bb=n=>Tt.registerSaveRouter(n),Mb=n=>Tt.registerLoadRouter(n),zb=n=>Tt.getSaveHandlers(n),Vb=(n,t)=>Tt.getLoadHandlers(n,t),Vu="tensorflowjs",ro="models_store",ps="model_info_store";function jc(){if(!z().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Kc(n){const t=n.result;t.createObjectStore(ro,{keyPath:"modelPath"}),t.createObjectStore(ps,{keyPath:"modelPath"})}let yi=(()=>{class n{constructor(e){if(this.indexedDB=jc(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var r=this;return(0,X.c)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return r.databaseAction(r.modelPath,e)})()}load(){var e=this;return(0,X.c)(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,r){return new Promise((s,o)=>{const i=this.indexedDB.open(Vu,1);i.onupgradeneeded=()=>Kc(i),i.onsuccess=()=>{const a=i.result;if(null==r){const u=a.transaction(ro,"readonly"),c=u.objectStore(ro).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return a.close(),o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));s(c.result.modelArtifacts)},c.onerror=d=>(a.close(),o(c.error)),u.oncomplete=()=>a.close()}else{r.weightData=ar.join(r.weightData);const u=Ea(r),l=a.transaction(ps,"readwrite");let d,h,c=l.objectStore(ps);try{d=c.put({modelPath:this.modelPath,modelArtifactsInfo:u})}catch(p){return o(p)}d.onsuccess=()=>{h=a.transaction(ro,"readwrite");const p=h.objectStore(ro);let m;try{m=p.put({modelPath:this.modelPath,modelArtifacts:r,modelArtifactsInfo:u})}catch(y){return o(y)}m.onsuccess=()=>s({modelArtifactsInfo:u}),m.onerror=y=>{c=l.objectStore(ps);const g=c.delete(this.modelPath);g.onsuccess=()=>(a.close(),o(m.error)),g.onerror=x=>(a.close(),o(m.error))}},d.onerror=p=>(a.close(),o(d.error)),l.oncomplete=()=>{null==h?a.close():h.oncomplete=()=>a.close()}}},i.onerror=a=>o(i.error)})}}return n.URL_SCHEME="indexeddb://",n})();const mf=n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(yi.URL_SCHEME)?function Wb(n){return new yi(n)}(n.slice(yi.URL_SCHEME.length)):null;Tt.registerSaveRouter(mf),Tt.registerLoadRouter(mf);class Gb{constructor(){this.indexedDB=jc()}listModels(){var t=this;return(0,X.c)(function*(){return new Promise((e,r)=>{const s=t.indexedDB.open(Vu,1);s.onupgradeneeded=()=>Kc(s),s.onsuccess=()=>{const o=s.result,i=o.transaction(ps,"readonly"),u=i.objectStore(ps).getAll();u.onsuccess=()=>{const l={};for(const c of u.result)l[c.modelPath]=c.modelArtifactsInfo;e(l)},u.onerror=l=>(o.close(),r(u.error)),i.oncomplete=()=>o.close()},s.onerror=o=>r(s.error)})})()}removeModel(t){var e=this;return(0,X.c)(function*(){return t=function Ub(n){return n.startsWith(yi.URL_SCHEME)?n.slice(yi.URL_SCHEME.length):n}(t),new Promise((r,s)=>{const o=e.indexedDB.open(Vu,1);o.onupgradeneeded=()=>Kc(o),o.onsuccess=()=>{const i=o.result,a=i.transaction(ps,"readwrite"),u=a.objectStore(ps),l=u.get(t);let c;l.onsuccess=()=>{if(null==l.result)return i.close(),s(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const d=u.delete(t),h=()=>{c=i.transaction(ro,"readwrite");const m=c.objectStore(ro).delete(t);m.onsuccess=()=>r(l.result.modelArtifactsInfo),m.onerror=y=>s(l.error)};d.onsuccess=h,d.onerror=p=>(h(),i.close(),s(l.error))}},l.onerror=d=>(i.close(),s(l.error)),a.oncomplete=()=>{null==c?i.close():c.oncomplete=()=>i.close()}},o.onerror=i=>s(o.error)})})()}}const mr="/",so="tensorflowjs_models",gf="info",Hb="model_topology",jb="weight_specs",Kb="weight_data",Xb="model_metadata";function yf(n){return{info:[so,n,gf].join(mr),topology:[so,n,Hb].join(mr),weightSpecs:[so,n,jb].join(mr),weightData:[so,n,Kb].join(mr),modelMetadata:[so,n,Xb].join(mr)}}function xf(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function bf(n){const t=n.split(mr);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(mr)}let xi=(()=>{class n{constructor(e){if(!z().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=yf(this.modelPath)}save(e){var r=this;return(0,X.c)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const s=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),i=Ea(e),a=ar.join(e.weightData);try{return r.LS.setItem(r.keys.info,JSON.stringify(i)),r.LS.setItem(r.keys.topology,s),r.LS.setItem(r.keys.weightSpecs,o),r.LS.setItem(r.keys.weightData,function Rb(n){if(zc)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let r=0,s=t.length;r<s;r++)e+=String.fromCharCode(t[r]);return btoa(e)}(a)),r.LS.setItem(r.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:i}}catch{throw xf(r.keys),new Error(`Failed to save model '${r.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${i.modelTopologyBytes}, weightSpecsBytes=${i.weightSpecsBytes}, weightDataBytes=${i.weightDataBytes}.`)}}})()}load(){var e=this;return(0,X.c)(function*(){const r=JSON.parse(e.LS.getItem(e.keys.info));if(null==r)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==r.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const s={},o=JSON.parse(e.LS.getItem(e.keys.topology));if(null==o)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);s.modelTopology=o;const i=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==i)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);s.weightSpecs=i;const a=e.LS.getItem(e.keys.modelMetadata);if(null!=a){const l=JSON.parse(a);s.format=l.format,s.generatedBy=l.generatedBy,s.convertedBy=l.convertedBy,null!=l.signature&&(s.signature=l.signature),null!=l.userDefinedMetadata&&(s.userDefinedMetadata=l.userDefinedMetadata),null!=l.modelInitializer&&(s.modelInitializer=l.modelInitializer),null!=l.initializerSignature&&(s.initializerSignature=l.initializerSignature),null!=l.trainingConfig&&(s.trainingConfig=l.trainingConfig)}const u=e.LS.getItem(e.keys.weightData);if(null==u)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return s.weightData=function Ab(n){if(zc){const r=Buffer.from(n,"base64");return r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let r=0;r<t.length;++r)e.set([t.charCodeAt(r)],r);return e.buffer}(u),s})()}}return n.URL_SCHEME="localstorage://",n})();const wf=n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(xi.URL_SCHEME)?function Yb(n){return new xi(n)}(n.slice(xi.URL_SCHEME.length)):null;Tt.registerSaveRouter(wf),Tt.registerLoadRouter(wf);class Qb{constructor(){N(z().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),N(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return(0,X.c)(function*(){const e={},r=so+mr,s=mr+gf;for(let o=0;o<t.LS.length;++o){const i=t.LS.key(o);i.startsWith(r)&&i.endsWith(s)&&(e[bf(i)]=JSON.parse(t.LS.getItem(i)))}return e})()}removeModel(t){var e=this;return(0,X.c)(function*(){const r=yf(t=function qb(n){return n.startsWith(xi.URL_SCHEME)?n.slice(xi.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(r.info))throw new Error(`Cannot find model at path '${t}'`);const s=JSON.parse(e.LS.getItem(r.info));return xf(r),s})()}}const bi="://";class tn{constructor(){this.managers={}}static getInstance(){return null==tn.instance&&(tn.instance=new tn),tn.instance}static registerManager(t,e){N(null!=t,()=>"scheme must not be undefined or null."),t.endsWith(bi)&&(t=t.slice(0,t.indexOf(bi))),N(t.length>0,()=>"scheme must not be an empty string.");const r=tn.getInstance();N(null==r.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),r.managers[t]=e}static getManager(t){const e=tn.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(tn.getInstance().managers)}}function Wu(n){if(-1===n.indexOf(bi))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${tn.getSchemes().join(",")}`);return{scheme:n.split(bi)[0],path:n.split(bi)[1]}}function vf(n,t){return Xc.apply(this,arguments)}function Xc(){return(Xc=(0,X.c)(function*(n,t,e=!1){N(n!==t,()=>`Old path and new path are the same: '${n}'`);const r=Tt.getLoadHandlers(n);N(r.length>0,()=>`Copying failed because no load handler is found for source URL ${n}.`),N(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${n}.`);const s=r[0],o=Tt.getSaveHandlers(t);N(o.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),N(o.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);const i=o[0],a=Wu(n).scheme,u=Wu(n).path,l=a===Wu(n).scheme,c=yield s.load();e&&l&&(yield tn.getManager(a).removeModel(u));const d=yield i.save(c);return e&&!l&&(yield tn.getManager(a).removeModel(u)),d.modelArtifactsInfo})).apply(this,arguments)}function Zb(){return qc.apply(this,arguments)}function qc(){return(qc=(0,X.c)(function*(){const n=tn.getSchemes(),t={};for(const e of n){const r=yield tn.getManager(e).listModels();for(const s in r)t[e+bi+s]=r[s]}return t})).apply(this,arguments)}function Jb(n){return Yc.apply(this,arguments)}function Yc(){return(Yc=(0,X.c)(function*(n){const t=Wu(n);return tn.getManager(t.scheme).removeModel(t.path)})).apply(this,arguments)}function ew(n,t){return Qc.apply(this,arguments)}function Qc(){return(Qc=(0,X.c)(function*(n,t){return vf(n,t,!1)})).apply(this,arguments)}function tw(n,t){return Zc.apply(this,arguments)}function Zc(){return(Zc=(0,X.c)(function*(n,t){return vf(n,t,!0)})).apply(this,arguments)}class nw{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){typeof window>"u"||!z().getBool("USE_SETTIMEOUTCUSTOM")?setTimeout(t,e):(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",r=>{r.source===window&&r.data.name===this.messageName&&(r.stopPropagation(),(0,this.functionRefs[r.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0)))}isTypedArray(t){return Pp(t)}}if(z().get("IS_BROWSER")){z().setPlatform("browser",new nw);try{tn.registerManager(xi.URL_SCHEME,new Qb)}catch{}try{tn.registerManager(yi.URL_SCHEME,new Gb)}catch{}}let wi;function dt(n,t="float32",e){return t=t||"float32",Ut(n),new fi(n,t,e)}z().get("IS_NODE")&&!z().get("IS_BROWSER")&&z().setPlatform("node",new class sw{constructor(){this.util=H(8688),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=z().global.fetch?z().global.fetch(t,e):(null==wi&&(wi=H(4748)),wi(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}});const mt=O({cast_:function ow(n,t){const e=$(n,"x","cast");if(!function mu(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return F.runKernel(Bt,{x:e},{dtype:t})}}),fs=O({clone_:function iw(n){const e={x:$(n,"x","clone","string_or_numeric")};return F.runKernel(ss,e)}});function Cf(n,t=!1){console.log(n.toString(t))}Zp(),function fb(n){mi=n}({buffer:dt,cast:mt,clone:fs,print:Cf});const Ce=O({add_:function aw(n,t){let e=$(n,"a","add"),r=$(t,"b","add");return[e,r]=Rt(e,r),F.runKernel(Gt,{a:e,b:r})}}),Sf=O({floorDiv_:function uw(n,t){let e=$(n,"a","floorDiv"),r=$(t,"b","floorDiv");return[e,r]=Rt(e,r),F.runKernel(nr,{a:e,b:r})}}),je=O({div_:function lw(n,t){let e=$(n,"a","div"),r=$(t,"b","div");return[e,r]=Rt(e,r),"int32"===e.dtype&&"int32"===r.dtype?Sf(e,r):F.runKernel(Pr,{a:e,b:r},{})}}),ne=O({mul_:function cw(n,t){let e=$(n,"a","mul"),r=$(t,"b","mul");return[e,r]=Rt(e,r),F.runKernel(Z,{a:e,b:r})}}),Br=O({sqrt_:function dw(n){const e={x:$(n,"x","sqrt","float32")};return F.runKernel(Sa,e)}}),Gn=O({square_:function hw(n){const t=$(n,"x","square");return F.runKernel("Square",{x:t},{})}}),An=O({zerosLike_:function pw(n){const e={x:$(n,"x","zerosLike")};return F.runKernel(Nc,e)}});function Mr(n){return F.customGrad(n)}function We(n,t){if((Un(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Un(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ds(n,[],[],t)}const mw=new Map,Jc=new Map;class gw{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class oo{constructor(){this.classNameMap={}}static getMap(){return null==oo.instance&&(oo.instance=new oo),oo.instance}static register(t){oo.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function yw(n,t,e){N(null!=n.className,()=>"Class being registered does not have the static className property defined."),N("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),N(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof t>"u"&&(t="Custom"),typeof e>"u"&&(e=n.className);const s=t+">"+e;return oo.register(n),mw.set(s,n),Jc.set(n,s),n}class ao extends gw{minimize(t,e=!1,r){const{value:s,grads:o}=this.computeGradients(t,r);if(null!=r){const i=r.map(a=>({name:a.name,tensor:o[a.name]}));this.applyGradients(i)}else this.applyGradients(o);return ct(o),e?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function fw(n,t){N(Nr(n),()=>"The f passed in variableGrads(f) must be a function"),N(null==t||Array.isArray(t)&&t.every(l=>l instanceof Bu),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const l in F.registeredVariables)t.push(F.registeredVariables[l])}const r=e?t.filter(l=>!l.trainable):null,s=t.length;N((t=t.filter(l=>l.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:i,grads:a}=F.gradients(n,t,null,!0);N(a.some(l=>null!=l),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),N(0===i.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);const u={};return t.forEach((l,c)=>{null!=a[c]&&(u[l.name]=a[c])}),null!=r&&r.forEach(l=>u[l.name]=null),{value:i,grads:u}}(t,e)}dispose(){null!=this.iterations_&&ct(this.iterations_)}saveIterations(){var t=this;return(0,X.c)(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:We(t.iterations_,"int32")}})()}getWeights(){return(0,X.c)(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return(0,X.c)(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return(0,X.c)(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}function Ra(n,t,e){return Ut(n),e=e||bn(t),F.runKernel(Hs,{},{shape:n,value:t,dtype:e})}Object.defineProperty(ao,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});const Aa=O({pow_:function ww(n,t){let e=$(n,"base","pow"),r=$(t,"exp","pow");return[e,r]=Rt(e,r),F.runKernel("Pow",{a:e,b:r})}}),Pe=O({sub_:function vw(n,t){let e=$(n,"a","sub"),r=$(t,"b","sub");return[e,r]=Rt(e,r),F.runKernel(Ia,{a:e,b:r})}}),Dn=O({abs_:function Sw(n){const t=$(n,"x","abs");return F.runKernel("complex64"===t.dtype?Yo:"Abs",{x:t})}});function ms(n,t){const e=n.length,r=[];for(let s=0;s<e;s++){const o=e-1-s;(t[t.length-1-s]||1)>1&&1===(n[o]||1)&&r.unshift(o)}return r}function If(n,t){const e=[];for(let r=0;r<t.length;r++){const s=n[n.length-r-1],o=t.length-r-1;(null==s||1===s&&t[o]>1)&&e.unshift(o)}return e}function Be(n,t){const e=Math.max(n.length,t.length),r=new Array(e);for(let s=0;s<e;s++){let o=n[n.length-s-1];null==o&&(o=1);let i=t[t.length-s-1];if(null==i&&(i=1),1===o)r[e-s-1]=i;else if(1===i)r[e-s-1]=o;else{if(o!==i)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);r[e-s-1]=o}}return r}const kf=O({maximum_:function Iw(n,t){let e=$(n,"a","maximum"),r=$(t,"b","maximum");return[e,r]=Rt(e,r),"bool"===e.dtype&&(e=mt(e,"int32"),r=mt(r,"int32")),Be(e.shape,r.shape),F.runKernel(Js,{a:e,b:r})}});class Nf extends ao{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(r=>r.name):Object.keys(t)).forEach((r,s)=>{const o=Array.isArray(t)?t[s].tensor:t[r];if(null==o)return;const i=F.registeredVariables[r];Ae(()=>{const a=Ce(ne(this.c,o),i);i.assign(a)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=fr(We(-t))}dispose(){this.c.dispose()}getWeights(){var t=this;return(0,X.c)(function*(){return[yield t.saveIterations()]})()}setWeights(t){var e=this;return(0,X.c)(function*(){if(0!==(t=yield e.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}const _w=[class xw extends ao{static get className(){return"Adadelta"}constructor(t,e,r=null){super(),this.learningRate=t,this.rho=e,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==r&&(this.epsilon=F.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(r=>r.name):Object.keys(t)).forEach((r,s)=>{const o=F.registeredVariables[r];null==this.accumulatedGrads[s]&&(this.accumulatedGrads[s]={originalName:`${r}/accum_grad`,variable:Ae(()=>An(o).variable(!1))}),null==this.accumulatedUpdates[s]&&(this.accumulatedUpdates[s]={originalName:`${r}/accum_var`,variable:Ae(()=>An(o).variable(!1))});const a=Array.isArray(t)?t[s].tensor:t[r];if(null==a)return;const u=this.accumulatedGrads[s].variable,l=this.accumulatedUpdates[s].variable;Ae(()=>{const c=Ce(ne(u,this.rho),ne(Gn(a),1-this.rho)),d=ne(je(Br(Ce(l,this.epsilon)),Br(Ce(u,this.epsilon))),a),h=Ce(ne(l,this.rho),ne(Gn(d),1-this.rho));u.assign(c),l.assign(h);const p=Ce(ne(d,-this.learningRate),o);o.assign(p)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ct(this.accumulatedGrads.map(t=>t.variable)),ct(this.accumulatedUpdates.map(t=>t.variable)))}getWeights(){var t=this;return(0,X.c)(function*(){const e=[...t.accumulatedGrads,...t.accumulatedUpdates];return[yield t.saveIterations()].concat(e.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(t){var e=this;return(0,X.c)(function*(){const r=(t=yield e.extractIterations(t)).length/2;e.accumulatedGrads=t.slice(0,r).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedUpdates=t.slice(r,2*r).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}},class bw extends ao{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(r=>r.name):Object.keys(t)).forEach((r,s)=>{const o=F.registeredVariables[r];null==this.accumulatedGrads[s]&&(this.accumulatedGrads[s]={originalName:`${r}/accumulator`,variable:Ae(()=>Ra(o.shape,this.initialAccumulatorValue).variable(!1))});const i=Array.isArray(t)?t[s].tensor:t[r];if(null==i)return;const a=this.accumulatedGrads[s].variable;Ae(()=>{const u=Ce(a,Gn(i));a.assign(u);const l=Ce(ne(je(i,Br(Ce(u,F.backend.epsilon()))),-this.learningRate),o);o.assign(l)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ct(this.accumulatedGrads.map(t=>t.variable))}getWeights(){var t=this;return(0,X.c)(function*(){return[yield t.saveIterations()].concat(t.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,X.c)(function*(){t=yield e.extractIterations(t),e.accumulatedGrads=t.map(s=>({originalName:s.name,variable:s.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}},class Cw extends ao{static get className(){return"Adam"}constructor(t,e,r,s=null){super(),this.learningRate=t,this.beta1=e,this.beta2=r,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Ae(()=>{this.accBeta1=We(e).variable(),this.accBeta2=We(r).variable()}),null==s&&(this.epsilon=F.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(r=>r.name):Object.keys(t);Ae(()=>{const r=Pe(1,this.accBeta1),s=Pe(1,this.accBeta2);e.forEach((o,i)=>{const a=F.registeredVariables[o];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${o}/m`,variable:Ae(()=>An(a).variable(!1))}),null==this.accumulatedSecondMoment[i]&&(this.accumulatedSecondMoment[i]={originalName:`${o}/v`,variable:Ae(()=>An(a).variable(!1))});const l=Array.isArray(t)?t[i].tensor:t[o];if(null==l)return;const c=this.accumulatedFirstMoment[i].variable,d=this.accumulatedSecondMoment[i].variable,h=Ce(ne(c,this.beta1),ne(l,1-this.beta1)),p=Ce(ne(d,this.beta2),ne(Gn(l),1-this.beta2)),m=je(h,r),y=je(p,s);c.assign(h),d.assign(p);const g=Ce(ne(je(m,Ce(Br(y),this.epsilon)),-this.learningRate),a);a.assign(g)}),this.accBeta1.assign(ne(this.accBeta1,this.beta1)),this.accBeta2.assign(ne(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ct(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&ct(this.accumulatedSecondMoment.map(t=>t.variable))}getWeights(){var t=this;return(0,X.c)(function*(){const e=[...t.accumulatedFirstMoment,...t.accumulatedSecondMoment];return[yield t.saveIterations()].concat(e.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(t){var e=this;return(0,X.c)(function*(){t=yield e.extractIterations(t),Ae(()=>{e.accBeta1.assign(Aa(e.beta1,e.iterations_+1)),e.accBeta2.assign(Aa(e.beta2,e.iterations_+1))});const r=t.length/2;e.accumulatedFirstMoment=t.slice(0,r).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedSecondMoment=t.slice(r,2*r).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}},class kw extends ao{static get className(){return"Adamax"}constructor(t,e,r,s=null,o=0){super(),this.learningRate=t,this.beta1=e,this.beta2=r,this.epsilon=s,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Ae(()=>{this.iteration=We(0).variable(),this.accBeta1=We(e).variable()}),null==s&&(this.epsilon=F.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(r=>r.name):Object.keys(t);Ae(()=>{const r=Pe(1,this.accBeta1),s=je(-this.learningRate,Ce(ne(this.iteration,this.decay),1));e.forEach((o,i)=>{const a=F.registeredVariables[o];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${o}/m`,variable:An(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[i]&&(this.accumulatedWeightedInfNorm[i]={originalName:`${o}/v`,variable:An(a).variable(!1)});const l=Array.isArray(t)?t[i].tensor:t[o];if(null==l)return;const c=this.accumulatedFirstMoment[i].variable,d=this.accumulatedWeightedInfNorm[i].variable,h=Ce(ne(c,this.beta1),ne(l,1-this.beta1)),p=ne(d,this.beta2),m=Dn(l),y=kf(p,m);c.assign(h),d.assign(y);const g=Ce(ne(je(s,r),je(h,Ce(y,this.epsilon))),a);a.assign(g)}),this.iteration.assign(Ce(this.iteration,1)),this.accBeta1.assign(ne(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ct(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&ct(this.accumulatedWeightedInfNorm.map(t=>t.variable))}getWeights(){return(0,X.c)(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(t){return(0,X.c)(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}},class Nw extends Nf{static get className(){return"Momentum"}constructor(t,e,r=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=r,this.accumulations=[],this.m=We(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(r=>r.name):Object.keys(t)).forEach((r,s)=>{const o=F.registeredVariables[r];null==this.accumulations[s]&&(this.accumulations[s]={originalName:`${r}/momentum`,variable:Ae(()=>An(o).variable(!1))});const i=this.accumulations[s].variable,a=Array.isArray(t)?t[s].tensor:t[r];null!=a&&Ae(()=>{let u;const l=Ce(ne(this.m,i),a);u=Ce(ne(this.c,this.useNesterov?Ce(a,ne(l,this.m)):l),o),i.assign(l),o.assign(u)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ct(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}getWeights(){var t=this;return(0,X.c)(function*(){return[yield t.saveIterations()].concat(t.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,X.c)(function*(){t=yield e.extractIterations(t),e.accumulations=t.map(s=>({originalName:s.name,variable:s.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}},class $w extends ao{static get className(){return"RMSProp"}constructor(t,e=.9,r=0,s=null,o=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=r,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==s&&(this.epsilon=F.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(r=>r.name):Object.keys(t)).forEach((r,s)=>{const o=F.registeredVariables[r],i=!1;null==this.accumulatedMeanSquares[s]&&(this.accumulatedMeanSquares[s]={originalName:`${r}/rms`,variable:Ae(()=>An(o).variable(i))}),null==this.accumulatedMoments[s]&&(this.accumulatedMoments[s]={originalName:`${r}/momentum`,variable:Ae(()=>An(o).variable(i))}),null==this.accumulatedMeanGrads[s]&&this.centered&&(this.accumulatedMeanGrads[s]={originalName:`${r}/mg`,variable:Ae(()=>An(o).variable(i))});const a=Array.isArray(t)?t[s].tensor:t[r];if(null==a)return;const u=this.accumulatedMeanSquares[s].variable,l=this.accumulatedMoments[s].variable;Ae(()=>{const c=Ce(ne(u,this.decay),ne(Gn(a),1-this.decay));if(this.centered){const d=this.accumulatedMeanGrads[s].variable,h=Ce(ne(d,this.decay),ne(a,1-this.decay)),p=je(ne(a,this.learningRate),Br(Pe(c,Ce(Gn(h),this.epsilon)))),m=Ce(ne(l,this.momentum),p);u.assign(c),d.assign(h),l.assign(m);const y=Pe(o,m);o.assign(y)}else{const d=Ce(ne(u,this.decay),ne(Gn(a),1-this.decay)),h=Ce(ne(l,this.momentum),je(ne(a,this.learningRate),Br(Ce(d,this.epsilon))));u.assign(d),l.assign(h);const p=Pe(o,h);o.assign(p)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ct(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&ct(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&ct(this.accumulatedMoments.map(t=>t.variable))}getWeights(){var t=this;return(0,X.c)(function*(){const e=[...t.accumulatedMeanSquares,...t.accumulatedMoments];return t.centered&&e.push(...t.accumulatedMeanGrads),[yield t.saveIterations()].concat(e.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(t){var e=this;return(0,X.c)(function*(){t=yield e.extractIterations(t);const r=e.centered?t.length/3:t.length/2,s=!1;e.accumulatedMeanSquares=t.slice(0,r).map(o=>({originalName:o.name,variable:o.tensor.variable(s)})),e.accumulatedMoments=t.slice(r,2*r).map(o=>({originalName:o.name,variable:o.tensor.variable(s)})),e.centered&&(e.accumulatedMeanGrads=t.slice(2*r,3*r).map(o=>({originalName:o.name,variable:o.tensor.variable(s)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}},Nf];function $f(n){return new Promise(t=>setTimeout(t)).then(n)}let ed=(()=>{class n{constructor(e){if(!z().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var r=this;return(0,X.c)(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const s=ar.join(e.weightData),o=window.URL.createObjectURL(new Blob([s],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const a=pf(e,[{paths:["./"+r.weightDataFileName],weights:e.weightSpecs}]),u=window.URL.createObjectURL(new Blob([JSON.stringify(a)],{type:"application/json"})),l=null==r.modelJsonAnchor?document.createElement("a"):r.modelJsonAnchor;if(l.download=r.modelJsonFileName,l.href=u,yield $f(()=>l.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const c=null==r.weightDataAnchor?document.createElement("a"):r.weightDataAnchor;c.download=r.weightDataFileName,c.href=o,yield $f(()=>c.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Ea(e)}}})()}}return n.URL_SCHEME="downloads://",n})();class Dw{constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}load(){var t=this;return(0,X.c)(function*(){return new Promise((e,r)=>{const s=new FileReader;s.onload=o=>{const i=JSON.parse(o.target.result),a=i.modelTopology;if(null==a)return void r(new Error(`modelTopology field is missing from file ${t.jsonFile.name}`));if(null==i.weightsManifest)return void r(new Error(`weightManifest field is missing from file ${t.jsonFile.name}`));if(0===t.weightsFiles.length)return void e({modelTopology:a});const l=Vc(i,c=>t.loadWeights(c));e(l)},s.onerror=o=>r(`Failed to read model topology and weights manifest JSON from file '${t.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t.jsonFile)})})()}loadWeights(t){const e=[],r=[];for(const i of t)e.push(...i.weights),r.push(...i.paths);const s=this.checkManifestAndWeightFiles(t),o=r.map(i=>this.loadWeightsFile(i,s[i]));return Promise.all(o).then(i=>[e,i])}loadWeightsFile(t,e){return new Promise((r,s)=>{const o=new FileReader;o.onload=i=>{r(i.target.result)},o.onerror=i=>s(`Failed to weights data from file of path '${t}'.`),o.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){const e=[],r=this.weightsFiles.map(o=>hf(o.name)),s={};for(const o of t)o.paths.forEach(i=>{const a=hf(i);if(-1!==e.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(e.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[i]=this.weightsFiles[r.indexOf(a)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function Fw(n){return new Dw(n)}function _f(n,t,e,r){(function i(u){N(null!=u&&Array.isArray(u)&&u.length>0,()=>"promises must be a none empty array")})(n),function a(u,l){N(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${u}`),N(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${l}`),N(l>=u,()=>`startFraction must be no more than endFraction, but got startFraction ${u} and endFraction ${l}`)}(e=null==e?0:e,r=null==r?1:r);let s=0;return Promise.all(n.map(u=>(u.then(l=>{const c=e+ ++s/n.length*(r-e);return t(c),l}),u)))}function Tf(n,t){return td.apply(this,arguments)}function td(){return(td=(0,X.c)(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?z().platform.fetch:t.fetchFunc,r=n.map(d=>e(d,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?yield Promise.all(r):yield _f(r,t.onProgress,0,.5)).map(d=>d.arrayBuffer());return null==t.onProgress?yield Promise.all(a):yield _f(a,t.onProgress,.5,1)})).apply(this,arguments)}function Bw(n){return nd.apply(this,arguments)}function nd(){return(nd=(0,X.c)(function*(n,t="",e,r){return Ef(i=>Tf(i,{requestInit:r}))(n,t,e)})).apply(this,arguments)}function Ef(n){return function(){var t=(0,X.c)(function*(e,r="",s){const o=e.map(()=>!1),i={},a=null!=s?s.map(()=>!1):[],u=[];if(e.forEach((m,y)=>{let g=0;m.weights.forEach(x=>{const S=no["quantization"in x?x.quantization.dtype:x.dtype]*j(x.shape),k=()=>{o[y]=!0,null==i[y]&&(i[y]=[]),i[y].push({manifestEntry:x,groupOffset:g,sizeBytes:S})};null!=s?s.forEach((_,A)=>{_===x.name&&(k(),a[A]=!0)}):k(),u.push(x.name),g+=S})}),!a.every(m=>m)){const m=s.filter((y,g)=>!a[g]);throw new Error(`Could not find weights in manifest with names: ${m.join(", ")}. \nManifest JSON has weights with names: ${u.join(", ")}.`)}const l=o.reduce((m,y,g)=>(y&&m.push(g),m),[]),c=[];l.forEach(m=>{e[m].paths.forEach(y=>{const g=r+(r.endsWith("/")?"":"/")+y;c.push(g)})});const d=yield n(c),h={};let p=0;return l.forEach(m=>{const y=e[m].paths.length,g=new ar(d.slice(p,p+y));i[m].forEach(w=>{const k=af(g.slice(w.groupOffset,w.groupOffset+w.sizeBytes),[w.manifestEntry]);for(const _ in k)h[_]=k[_]}),p+=y}),h});return function(e){return t.apply(this,arguments)}}()}Tt.registerSaveRouter(n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(ed.URL_SCHEME)?function Ow(n="model"){return new ed(n)}(n.slice(ed.URL_SCHEME.length)):null);let Rf=(()=>{class n{constructor(e,r){if(this.DEFAULT_METHOD="POST",null==r&&(r={}),this.weightPathPrefix=r.weightPathPrefix,this.weightUrlConverter=r.weightUrlConverter,null!=r.fetchFunc?(N("function"==typeof r.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=r.fetchFunc):this.fetch=z().platform.fetch,N(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&N(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=r.requestInit&&null!=r.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=r.requestInit||{},this.loadOptions=r}save(e){var r=this;return(0,X.c)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const s=Object.assign({method:r.DEFAULT_METHOD},r.requestInit);s.body=new FormData;const i=pf(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(s.body.append("model.json",new Blob([JSON.stringify(i)],{type:"application/json"}),"model.json"),null!=e.weightData){const u=ar.join(e.weightData);s.body.append("model.weights.bin",new Blob([u],{type:"application/octet-stream"}),"model.weights.bin")}const a=yield r.fetch(r.path,s);if(a.ok)return{modelArtifactsInfo:Ea(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)})()}loadModelJSON(){var e=this;return(0,X.c)(function*(){const r=yield e.fetch(e.path,e.requestInit);if(!r.ok)throw new Error(`Request to ${e.path} failed with status code ${r.status}. Please verify this URL points to the model JSON of the model to load.`);let s;try{s=yield r.json()}catch{let u=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?u+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":u+=" Please make sure the server is serving valid JSON for this request.",new Error(u)}if(null==s.modelTopology&&null==s.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return s})()}load(){var e=this;return(0,X.c)(function*(){return e.loadOptions.streamWeights?e.loadStream():Vc(yield e.loadModelJSON(),s=>e.loadWeights(s))})()}loadStream(){var e=this;return(0,X.c)(function*(){const r=yield e.loadModelJSON(),s=yield e.getWeightUrls(r.weightsManifest),o=Uc(r.weightsManifest);return Object.assign(Object.assign({},r),{weightSpecs:o,getWeightStream:()=>function Lw(n,t){var e;const r=null==t.fetchFunc?z().platform.fetch:t.fetchFunc;let o,s=0;return null===(e=t.onProgress)||void 0===e||e.call(t,0),new ReadableStream({pull:(i=(0,X.c)(function*(a){for(var u;s<n.length;){o||(o=(yield r(n[s],t.requestInit,{isBinary:!0})).body.getReader());const{done:l,value:c}=yield o.read();if(!l)return void a.enqueue(c);s++,o=void 0,null===(u=t.onProgress)||void 0===u||u.call(t,s/n.length)}a.close()}),function(u){return i.apply(this,arguments)})});var i}(s,e.loadOptions)})})()}getWeightUrls(e){var r=this;return(0,X.c)(function*(){const s=Array.isArray(r.path)?r.path[1]:r.path,[o,i]=function Vw(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(s),a=r.weightPathPrefix||o,u=[],l=[];for(const c of e)for(const d of c.paths)null!=r.weightUrlConverter?l.push(r.weightUrlConverter(d)):u.push(a+d+i);return r.weightUrlConverter&&u.push(...yield Promise.all(l)),u})()}loadWeights(e){var r=this;return(0,X.c)(function*(){const s=yield r.getWeightUrls(e);return[Uc(e),yield Tf(s,r.loadOptions)]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function rd(n){return null!=n.match(Rf.URL_SCHEME_REGEX)}const Af=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(r=>rd(r)):rd(n),e)return sd(n,t)}return null};function sd(n,t){return new Rf(n,t)}function Ww(n,t){return sd(n,t)}Tt.registerSaveRouter(Af),Tt.registerLoadRouter(Af);class od{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}}class Df{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}}class Uw{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}}function Gw(n,t,e,r){return new Uw(Pf(...arguments))}function Pf(n,t,e,r){return 1===arguments.length?null!=n.modelTopology||null!=n.weightSpecs?new od(n):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new od({modelTopology:n})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new od({modelTopology:n,weightSpecs:t,weightData:e,trainingConfig:r}))}function Hw(n){return new Df(n)}function jw(n){return new Df(n)}function Of(n,t,e){if(Sr(n),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=ls(n,e);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ds(n,t,r,e)}let uo,Ff=!1;function ad(n,t){return ud.apply(this,arguments)}function ud(){return(ud=(0,X.c)(function*(n,t){let e=$(n,"img","toPixels");if(!(n instanceof _t)){const l=e;e=mt(l,"int32"),l.dispose()}!function Bf(n){if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const t=2===n.rank?1:n.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`)}(e);const[r,s]=e.shape.slice(0,2),o=2===e.rank?1:e.shape[2],i=yield e.data(),a="float32"===e.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let l=0;l<r*s;++l){const c=[0,0,0,255];for(let h=0;h<o;h++){const p=i[l*o+h];if("float32"===e.dtype){if(p<0||p>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`)}else if("int32"===e.dtype&&(p<0||p>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);1===o?(c[0]=p*a,c[1]=p*a,c[2]=p*a):c[h]=p*a}const d=4*l;u[d+0]=Math.round(c[0]),u[d+1]=Math.round(c[1]),u[d+2]=Math.round(c[2]),u[d+3]=Math.round(c[3])}if(null!=t){Ff||null!=Du(ni,F.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),Ff=!0),t.width=s,t.height=r;const l=t.getContext("2d"),c=new ImageData(u,s,r);l.putImageData(c,0,0)}return e!==n&&e.dispose(),u})).apply(this,arguments)}const Mf=O({fromPixels_:function Lf(n,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==n)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,r=!1,s=!1,o=!1,i=!1,a=!1;if(n.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&n instanceof ImageData)r=!0;else if(typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement)s=!0;else if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement)o=!0;else if(null!=n.getContext)i=!0;else{if(!(typeof ImageBitmap<"u"&&n instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);a=!0}if(null!=Du(Tu,F.backendName))return F.runKernel(Tu,{pixels:n},{numChannels:t});const[l,c]=s?[n.videoWidth,n.videoHeight]:[n.width,n.height];let d,h;if(i)d=n.getContext("2d").getImageData(0,0,l,c).data;else if(r||e)d=n.data;else if(o||s||a){if(null==uo)if(typeof document>"u"){if(!(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u"))throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");uo=new OffscreenCanvas(1,1).getContext("2d")}else uo=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});uo.canvas.width=l,uo.canvas.height=c,uo.drawImage(n,0,0,l,c),d=uo.getImageData(0,0,l,c).data}if(4===t)h=new Int32Array(d);else{const m=l*c;h=new Int32Array(m*t);for(let y=0;y<m;y++)for(let g=0;g<t;++g)h[y*t+g]=d[4*y+g]}return Of(h,[c,l,t],"int32")}}),ld=-2,Zw=-1;function Gu(n,t,e){const r=n.shape.length;N(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),N(r===e.length,()=>`Error in slice${r}D: Length of size ${e} must match the rank of the array (${r}).`);for(let s=0;s<r;++s)N(t[s]+e[s]<=n.shape[s],()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+e[s]}) would overflow input.shape[${s}] (${n.shape[s]})`)}function Jw(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function cd(n,t,e){const r=[];for(let s=0;s<n.length;s++)r[s]=Math.ceil((t[s]-n[s])/e[s]);return r}function zf(n,t,e,r){const s=[...n];for(let o=s.length;o<r.length;o++)s.push(1);for(let o=0;o<e;o++)0===o?s[t]=1:(s.splice(t,0,1),s.pop());return s}function Vf(n,t,e){return e<=n?e:e-(t-1)}function Wf(n,t){const e=[];for(let r=0;r<n;r++)e.push(t+r);return e}function e1(n,t,e,r,s,o,i,a,u){const l=n.length;let c=new Array(l),d=new Array(l),h=new Array(l);if(t.length&&e>0){const p=t[0],m=e+1;c=Uf(i,p,m,r,n),d=Gf(a,p,m,s,n),h=zf(o,p,m,n)}else for(let p=0;p<l;p++)c[p]=jf(i,r,o,n,p,u),d[p]=Kf(a,s,o,n,p,u),h[p]=Hf(o,p,u);return{begin:c,end:d,strides:h}}function Uf(n,t,e,r,s){const o=[...s],i=Wf(e,t);for(let a=0;a<o.length;a++)if(i.indexOf(a)>-1)o[a]=0;else{const u=Vf(t,e,a);let l=r[u];n&1<<u&&(l=0),o[a]=l}return o}function Gf(n,t,e,r,s){const o=[...s],i=Wf(e,t);for(let a=0;a<o.length;a++)if(i.indexOf(a)>-1)o[a]=Number.MAX_SAFE_INTEGER;else{const u=Vf(t,e,a);let l=r[u];n&1<<u&&(l=Number.MAX_SAFE_INTEGER),o[a]=l}for(let a=0;a<o.length;a++)o[a]<0&&(o[a]+=s[a]),o[a]=Do(0,o[a],s[a]);return o}function Hf(n,t,e){let r=n[t];return(e&1<<t||null==r)&&(r=1),r}function jf(n,t,e,r,s,o){let i=t[s];(n&1<<s||o&1<<s||null==i)&&(i=(e[s]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=Do(0,i,u-1),i}function Kf(n,t,e,r,s,o){let i=t[s];const a=e[s]||1;(n&1<<s||o&1<<s||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=a>0?Do(0,i,u):Do(-1,i,u-1),i}function dd(n,t,e){let r=e.length;for(let s=0;s<e.length;s++)if(e[s]>1){r=s;break}for(let s=r+1;s<e.length;s++)if(t[s]>0||e[s]!==n[s])return!1;return!0}function hd(n,t){let e=n.length>0?n[n.length-1]:1;for(let r=0;r<n.length-1;r++)e+=n[r]*t[r];return e}function Hu(n,t,e){let r;const s=n.shape.length;let o;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach(i=>{N(-1!==i,()=>"slice() does not support negative begin indexing.")}),o=null==e?new Array(s).fill(-1):"number"==typeof e?[e,...new Array(s-1).fill(-1)]:e.length<s?e.concat(new Array(s-e.length).fill(-1)):e,o=o.map((i,a)=>i>=0?i:(N(-1===i,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`),n.shape[a]-r[a])),[r,o]}function pd(n,t,e,r,s,o,i,a,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=i&&i&i-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const d={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:l.slice(),beginMask:s,endMask:o,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:u};for(let S=0;S<d.dims;S++)c&&1<<S&a&&d.numAddAxisAfterEllipsis++,1<<S&i&&(c=!0);c||(d.ellipsisMask|=1<<d.dims,d.dims++);const h={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function t1(n,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=null!=n.begin,t.endValid=null!=n.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<n.dims;r++)if(1<<r&n.ellipsisMask){const s=Math.min(t.dims-(n.dims-r)+1+n.numAddAxisAfterEllipsis,t.dims);for(;e<s;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=r}else if(1<<r&n.newAxisMask)t.finalShapeGatherIndices.push(ld),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=n.begin&&(t.begin[e]=n.begin[r]),null!=n.end&&(t.end[e]=n.end[r]),t.strides[e]=n.strides[r],n.beginMask&1<<r&&(t.beginMask|=1<<e),n.endMask&1<<r&&(t.endMask|=1<<e),n.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(Zw),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[e]=r,e++}}(d,h);let p=!0,m=!0,y=!0;const g=[],x=[];for(let S=0;S<n.length;++S){if(0===h.strides[S])throw Error(`strides[${S}] must be non-zero`);const k=!!(h.shrinkAxisMask&1<<S),_=n[S];if(-1===_){g.push(k?1:-1);continue}const A=[h.beginMask&1<<S,h.endMask&1<<S],P=[h.strides[S]>0?0:-1,h.strides[S]>0?_:_-1];if(k&&h.strides[S]<=0)throw Error("only stride 1 allowed on non-range indexing.");y=y&&1===h.strides[S];const L=!!(h.beginMask&1<<S&&h.endMask&1<<S);if(h.beginValid&&h.endValid){if(k){const re=h.begin[S]<0?_+h.begin[S]:h.begin[S];if(h.begin[S]=re,h.end[S]=h.begin[S]+1,re<0||re>=_)throw Error(`slice index ${h.begin[S]} of dimension ${S} out of bounds.`)}else h.begin[S]=Xf(h.begin[S],0,h.strides[S],_,A,P),h.end[S]=Xf(h.end[S],1,h.strides[S],_,A,P);const q=1===h.strides[S]&&0===h.begin[S]&&h.end[S]===_;p=p&&q,m=m&&(0===S&&1===h.strides[S]||q)}else p=p&&1===h.strides[S]&&L,m=m&&(0===S&&1===h.strides[S]||L);let M,W=!1;if(h.beginValid&&h.endValid?(M=h.end[S]-h.begin[S],W=!0):k?(M=1,W=!0):L&&_>=0&&(M=h.strides[S]<0?-_:_,W=!0),W){let q;q=0===M||M<0!=h.strides[S]<0?0:Math.trunc(M/h.strides[S])+(M%h.strides[S]!=0?1:0),g.push(q)}else g.push(-1)}for(let S=0;S<h.finalShapeGatherIndices.length;++S){const k=h.finalShapeGatherIndices[S];k>=0?x.push(g[k]):k===ld&&x.push(1)}return{finalShapeSparse:x.filter((S,k)=>h.finalShapeGatherIndices[k]!==ld),finalShape:x,isIdentity:p,sliceDim0:m,isSimpleSlice:y,begin:h.begin,end:h.end,strides:h.strides}}function Xf(n,t,e,r,s,o){if(s[t])return e>0?o[t]:o[t+1&1];{const i=n<0?r+n:n;return i<o[0]?o[0]:i>o[1]?o[1]:i}}const r1=O({acos_:function n1(n){const e={x:$(n,"x","acos")};return F.runKernel(Ls,e)}}),o1=O({acosh_:function s1(n){const e={x:$(n,"x","acosh")};return F.runKernel(Wo,e)}}),a1=O({addN_:function i1(n){N(Array.isArray(n),()=>"The argument passed to tf.addN() must be a list of tensors"),N(n.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${n.length}`);const t=n.map((s,o)=>$(s,`tensors${o}`,"addN")),e=t[0];return t.forEach(s=>{if(s.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(s=>{if(!ot(s.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),F.runKernel(wn,t)}}),l1=O({all_:function u1(n,t=null,e=!1){const s={x:$(n,"x","all","bool")};return F.runKernel("All",s,{axis:t,keepDims:e})}}),d1=O({any_:function c1(n,t=null,e=!1){const s={x:$(n,"x","any","bool")};return F.runKernel("Any",s,{axis:t,keepDims:e})}}),qf=O({argMax_:function h1(n,t=0){const r={x:$(n,"x","argMax")};return F.runKernel(Ms,r,{axis:t})}}),f1=O({argMin_:function p1(n,t=0){const r={x:$(n,"x","argMin")};return F.runKernel(Uo,r,{axis:t})}}),g1=O({asin_:function m1(n){const e={x:$(n,"x","asin")};return F.runKernel(zs,e)}}),x1=O({asinh_:function y1(n){const e={x:$(n,"x","asinh")};return F.runKernel(vn,e)}}),w1=O({atan_:function b1(n){const e={x:$(n,"x","atan")};return F.runKernel(Go,e)}}),C1=O({atan2_:function v1(n,t){let e=$(n,"a","atan2"),r=$(t,"b","atan2");return[e,r]=Rt(e,r),F.runKernel(Cn,{a:e,b:r})}}),I1=O({atanh_:function S1(n){const e={x:$(n,"x","atanh")};return F.runKernel(es,e)}});function Da(n,t,e,r,s="NHWC",o){return Ft(n,[...t,n[3]],e,o,r,null,null,ur(s))}function Hn(n,t,e,r,s,o,i="channelsLast"){const[a,u]=Pa(t);let l;if("channelsLast"===i)l=[a,u,n[3],n[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);l=[a,u,n[1],n[1]]}return Ft(n,l,e,r,s,o,!1,i)}function zr(n,t,e,r,s,o,i="NDHWC"){const[a,u,l]=md(t);let c,d;if("NDHWC"===i)d="channelsLast",c=[a,u,l,n[4],n[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);d="channelsFirst",c=[a,u,l,n[1],n[1]]}return gs(n,c,e,r,s,!1,d,o)}function Ft(n,t,e,r,s,o,i=!1,a="channelsLast"){let[u,l,c,d]=[-1,-1,-1,-1];if("channelsLast"===a)[u,l,c,d]=n;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[u,d,l,c]=n}const[h,p,,m]=t,[y,g]=Pa(e),[x,w]=Pa(r),S=vi(h,x),k=vi(p,w),{padInfo:_,outHeight:A,outWidth:P}=function $1(n,t,e,r,s,o,i,a,u){let l,c,d;if("number"==typeof n){l={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function k1(n,t,e,r,s){null==r&&(r=fd(n,t,e));const i=n[1];return[Oa((n[0]-t+2*r)/e+1,s),Oa((i-t+2*r)/e+1,s)]}([t,e],o,r,n,a);c=p[0],d=p[1]}else if("same"===n){c=Math.ceil(t/r),d=Math.ceil(e/s);const h=Math.max(0,(c-1)*r+o-t),p=Math.max(0,(d-1)*s+i-e),m=Math.floor(h/2),y=h-m,g=Math.floor(p/2);l={top:m,bottom:y,left:g,right:p-g,type:"SAME"}}else if("valid"===n)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-o+1)/r),d=Math.ceil((e-i+1)/s);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const h="channelsLast"===u?n[1][0]:n[2][0],p="channelsLast"===u?n[1][1]:n[2][1],m="channelsLast"===u?n[2][0]:n[3][0],y="channelsLast"===u?n[2][1]:n[3][1];l={top:h,bottom:p,left:m,right:y,type:0===h&&0===p&&0===m&&0===y?"VALID":"EXPLICIT"},c=Oa((t-o+h+p)/r+1,a),d=Oa((e-i+m+y)/s+1,a)}}return{padInfo:l,outHeight:c,outWidth:d}}(s,l,c,y,g,S,k,o,a),L=i?m*d:m;let M;return"channelsFirst"===a?M=[u,L,A,P]:"channelsLast"===a&&(M=[u,A,P,L]),{batchSize:u,dataFormat:a,inHeight:l,inWidth:c,inChannels:d,outHeight:A,outWidth:P,outChannels:L,padInfo:_,strideHeight:y,strideWidth:g,filterHeight:h,filterWidth:p,effectiveFilterHeight:S,effectiveFilterWidth:k,dilationHeight:x,dilationWidth:w,inShape:n,outShape:M,filterShape:t}}function gs(n,t,e,r,s,o=!1,i="channelsLast",a){let[u,l,c,d,h]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,d,h]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,h,l,c,d]=n}const[p,m,y,,g]=t,[x,w,S]=md(e),[k,_,A]=md(r),P=vi(p,k),L=vi(m,_),M=vi(y,A),{padInfo:W,outDepth:q,outHeight:re,outWidth:oe}=function _1(n,t,e,r,s,o,i,a,u,l,c){let d,h,p,m;if("valid"===n&&(n=0),"number"==typeof n){d={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const g=function N1(n,t,e,r,s,o){null==s&&(s=fd(n,t[0],r[0]));const i=[0,0,0,e];for(let a=0;a<3;a++)n[a]+2*s>=t[a]&&(i[a]=Oa((n[a]-t[a]+2*s)/r[a]+1,o));return i}([t,e,r,1],[a,u,l],1,[s,o,i],n,c);h=g[0],p=g[1],m=g[2]}else{if("same"!==n)throw Error(`Unknown padding parameter: ${n}`);{h=Math.ceil(t/s),p=Math.ceil(e/o),m=Math.ceil(r/i);const y=(h-1)*s+a-t,g=(p-1)*o+u-e,x=(m-1)*i+l-r,w=Math.floor(y/2),S=y-w,k=Math.floor(g/2),_=g-k,A=Math.floor(x/2);d={top:k,bottom:_,left:A,right:x-A,front:w,back:S,type:"SAME"}}}return{padInfo:d,outDepth:h,outHeight:p,outWidth:m}}(s,l,c,d,x,w,S,P,L,M,a),ge=o?g*h:g;let Ie;return"channelsFirst"===i?Ie=[u,ge,q,re,oe]:"channelsLast"===i&&(Ie=[u,q,re,oe,ge]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:d,inChannels:h,outDepth:q,outHeight:re,outWidth:oe,outChannels:ge,padInfo:W,strideDepth:x,strideHeight:w,strideWidth:S,filterDepth:p,filterHeight:m,filterWidth:y,effectiveFilterDepth:P,effectiveFilterHeight:L,effectiveFilterWidth:M,dilationDepth:k,dilationHeight:_,dilationWidth:A,inShape:n,outShape:Ie,filterShape:t}}function fd(n,t,e,r=1){const s=vi(t,r);return Math.floor((n[0]*(e-1)-e+s)/2)}function Pa(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function md(n){return"number"==typeof n?[n,n,n]:n}function vi(n,t){return t<=1?n:n+(n-1)*(t-1)}function Oa(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function Fa(n){const[t,e,r]=Pa(n);return 1===t&&1===e&&1===r}function nn(n,t){return Fa(n)||Fa(t)}function lo(n){return Pa(n).every(t=>t>0)}function ur(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function jn(n,t,e){if(null!=e){if("string"==typeof t)throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if("number"==typeof t)N(Ir(t),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);t.forEach(r=>{r.forEach(s=>{N(Ir(s),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${s}.`)})})}}}const K=O({reshape_:function T1(n,t){const r={x:$(n,"x","reshape","string_or_numeric")};return F.runKernel(ql,r,{shape:t})}}),Yf=O({avgPool_:function E1(n,t,e,r,s){const o=$(n,"x","avgPool","float32");N(nn(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let a=o,u=!1;3===o.rank&&(u=!0,a=K(o,[1,o.shape[0],o.shape[1],o.shape[2]])),N(4===a.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),jn("avgPool",r,s);let d=F.runKernel(ts,{x:a},{filterSize:t,strides:e,pad:r,dimRoundingMode:s});return d=mt(d,o.dtype),u?K(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),A1=O({avgPool3d_:function R1(n,t,e,r,s,o="NDHWC"){const i=$(n,"x","avgPool3d","float32");let a=i,u=!1;4===i.rank&&(u=!0,a=K(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),N(5===a.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),N("NDHWC"===o,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),N("number"==typeof e&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),jn("avgPool3d",r,s);let d=F.runKernel(Ho,{x:a},{filterSize:t,strides:e,pad:r,dimRoundingMode:s,dataFormat:o});return d=mt(d,a.dtype),u?K(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),zt=O({concat_:function D1(n,t=0){N(n.length>=1,()=>"Pass at least one tensor to concat");const e=zu(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(o=>{if("complex64"!==o.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${o.dtype}. `)}),1===e.length?fs(e[0]):F.runKernel(Qo,e,{axis:t})}}),gt=O({matMul_:function P1(n,t,e=!1,r=!1){let s=$(n,"a","matMul"),o=$(t,"b","matMul");return[s,o]=Rt(s,o),F.runKernel(Ki,{a:s,b:o},{transposeA:e,transposeB:r})}}),Vr=O({sigmoid_:function O1(n){const e={x:$(n,"x","sigmoid","float32")};return F.runKernel(Ca,e)}}),Ue=O({slice_:function F1(n,t,e){const r=$(n,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");return F.runKernel(Nu,{x:r},{begin:t,size:e})}}),gd=O({tanh_:function L1(n){const e={x:$(n,"x","tanh","float32")};return F.runKernel(vc,e)}}),M1=O({basicLSTMCell_:function B1(n,t,e,r,s,o){const i=$(n,"forgetBias","basicLSTMCell"),a=$(t,"lstmKernel","basicLSTMCell"),u=$(e,"lstmBias","basicLSTMCell"),l=$(r,"data","basicLSTMCell"),c=$(s,"c","basicLSTMCell"),d=$(o,"h","basicLSTMCell"),h=zt([l,d],1),p=gt(h,a),m=Ce(p,u),g=m.shape[1]/4,x=[m.shape[0],g],w=Ue(m,[0,0],x),S=Ue(m,[0,g],x),k=Ue(m,[0,2*g],x),_=Ue(m,[0,3*g],x),A=Ce(ne(Vr(w),gd(S)),ne(c,Vr(Ce(i,k))));return[A,ne(gd(A),Vr(_))]}}),Qf=O({batchToSpaceND_:function z1(n,t,e){const r=$(n,"x","batchToSpaceND"),s=t.reduce((a,u)=>a*u);return N(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),N(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),N(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`),F.runKernel(Xi,{x:r},{blockShape:t,crops:e})}});function V1(n){let t;return t=0===n.rank||1===n.rank?K(n,[1,1,1,n.size]):2===n.rank?K(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?K(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const ju=O({batchNorm_:function W1(n,t,e,r,s,o){null==o&&(o=.001);const i=$(n,"x","batchNorm"),a=$(t,"mean","batchNorm"),u=$(e,"variance","batchNorm");let l,c;null!=s&&(l=$(s,"scale","batchNorm")),null!=r&&(c=$(r,"offset","batchNorm")),N(a.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),N(null==c||a.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),N(null==l||a.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h={x:V1(i),scale:l,offset:c,mean:a,variance:u},m=F.runKernel(oi,h,{varianceEpsilon:o});return K(m,i.shape)}}),G1=O({batchNorm2d_:function U1(n,t,e,r,s,o){const i=$(n,"x","batchNorm"),a=$(t,"mean","batchNorm"),u=$(e,"variance","batchNorm");let l,c;return null!=s&&(l=$(s,"scale","batchNorm")),null!=r&&(c=$(r,"offset","batchNorm")),N(2===i.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),N(2===a.rank||1===a.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),N(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&N(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=c&&N(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),ju(i,a,u,c,l,o)}}),j1=O({batchNorm3d_:function H1(n,t,e,r,s,o){const i=$(n,"x","batchNorm"),a=$(t,"mean","batchNorm"),u=$(e,"variance","batchNorm");let l,c;return null!=s&&(l=$(s,"scale","batchNorm")),null!=r&&(c=$(r,"offset","batchNorm")),N(3===i.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),N(3===a.rank||1===a.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),N(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&N(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=c&&N(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),ju(i,a,u,c,l,o)}}),X1=O({batchNorm4d_:function K1(n,t,e,r,s,o){const i=$(n,"x","batchNorm"),a=$(t,"mean","batchNorm"),u=$(e,"variance","batchNorm");let l,c;return null!=s&&(l=$(s,"scale","batchNorm")),null!=r&&(c=$(r,"offset","batchNorm")),N(4===i.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),N(4===a.rank||1===a.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),N(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&N(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=c&&N(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),ju(i,a,u,c,l,o)}}),Zf=O({bincount_:function q1(n,t,e){const r=$(n,"x","bincount"),s=$(t,"weights","bincount");return N("int32"===r.dtype,()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`),N(e>=0,()=>`size must be non-negative, but got ${e}.`),N(s.size===r.size||0===s.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`),F.runKernel(Ko,{x:r,weights:s},{size:e})}}),Q1=O({bitwiseAnd_:function Y1(n,t){const e=$(n,"x","bitwiseAnd"),r=$(t,"y","bitwiseAnd");if(!ot(e.shape,r.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${r.shape}`);if("int32"!==e.dtype||"int32"!==r.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${r.dtype}`);return F.runKernel(Vs,{a:e,b:r})}}),J1=O({broadcastArgs_:function Z1(n,t){const e=$(n,"s0","broadcastArgs","int32"),r=$(t,"s1","broadcastArgs","int32");if(1!==e.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);return F.runKernel(Xo,{s0:e,s1:r})}}),La=O({broadcastTo_:function ev(n,t){let e=$(n,"broadcastTo","x");const r=e.shape;if(Ut(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const l=e.shape.slice();for(;l.length<t.length;)l.unshift(1);e=K(e,l)}const s=e.shape,o=Array.from(t);for(let l=t.length-1;l>=0;l--)if(s[l]===t[l])o[l]=1;else if(1!==e.shape[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);return 0===o.map((l,c)=>l>1?c:-1).filter(l=>l>=0).length?fs(e):F.runKernel(_u,{x:e},{reps:o})}}),nv=O({ceil_:function tv(n){const e={x:$(n,"x","ceil","float32")};return F.runKernel(ns,e)}}),Jf=O({clipByValue_:function rv(n,t,e){const r=$(n,"x","clipByValue");return N(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e?Ra(r.shape,t,r.dtype):F.runKernel(qo,{x:r},{clipValueMin:t,clipValueMax:e})}}),ov=O({concat1d_:function sv(n){return zt(n,0)}}),av=O({concat2d_:function iv(n,t){return zt(n,t)}}),lv=O({concat3d_:function uv(n,t){return zt(n,t)}}),dv=O({concat4d_:function cv(n,t){return zt(n,t)}}),Ku=O({conv2d_:function hv(n,t,e,r,s="NHWC",o=[1,1],i){const a=$(n,"x","conv2d","float32"),u=$(t,"filter","conv2d","float32");let l=a,c=!1;3===a.rank&&(c=!0,l=K(a,[1,a.shape[0],a.shape[1],a.shape[2]])),N(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),N(4===u.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`),jn("conv2d",r,i);const d="NHWC"===s?l.shape[3]:l.shape[1];N(d===u.shape[2],()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${u.shape[2]}.`),N(nn(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),N(lo(o),()=>"Error in conv2D: Dilated rates should be larger than 0."),N(lo(e),()=>"Error in conv2D: Strides should be larger than 0.");const m=F.runKernel(qi,{x:l,filter:u},{strides:e,pad:r,dataFormat:s,dilations:o,dimRoundingMode:i});return c?K(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),fv=O({conv1d_:function pv(n,t,e,r,s="NWC",o=1,i){const a=$(n,"x","conv1d"),u=$(t,"filter","conv1d");let l=a,c=!1;2===a.rank&&(c=!0,l=K(a,[1,a.shape[0],a.shape[1]])),N(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),N(3===u.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`),jn("conv1d",r,i),N(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),N(nn(e,o),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`),N(lo(o),()=>"Error in conv1D: Dilated rates should be larger than 0."),N(lo(e),()=>"Error in conv1D: Stride should be larger than 0."),N("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const d=K(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=K(l,[l.shape[0],1,l.shape[1],l.shape[2]]),g=Ku(h,d,[1,e],r,"NHWC",[1,o],i);return K(g,c?[g.shape[2],g.shape[3]]:[g.shape[0],g.shape[2],g.shape[3]])}}),em=O({conv2DBackpropInput_:function mv(n,t,e,r,s,o="NHWC",i){N(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let a=n,u=t,l=!1;3===t.rank&&(l=!0,u=K(t,[1,t.shape[0],t.shape[1],t.shape[2]]),a=[1,n[0],n[1],n[2]]),N(4===a.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),N(4===u.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`),N(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===o?a[3]:a[1],d="NHWC"===o?u.shape[3]:u.shape[1];N(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),N(d===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${e.shape[3]}.`),jn("conv2dDerInput",s,i);const m=F.runKernel(Zo,{dy:u,filter:e},{strides:r,pad:s,dataFormat:o,dimRoundingMode:i,inputShape:a});return l?K(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),yv=O({conv2dTranspose_:function gv(n,t,e,r,s,o){const i=$(n,"x","conv2dTranspose"),a=$(t,"filter","conv2dTranspose");return em(e,i,a,r,s,"NHWC",o)}}),bv=O({conv3d_:function xv(n,t,e,r,s="NDHWC",o=[1,1,1]){const i=$(n,"x","conv3d"),a=$(t,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=K(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),N(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),N(5===a.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),N(u.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${a.shape[3]}.`),N(nn(e,o),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),N("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`),N(lo(o),()=>"Error in conv3D: Dilated rates should be larger than 0."),N(lo(e),()=>"Error in conv3D: Strides should be larger than 0.");const h=F.runKernel(Jo,{x:u,filter:a},{strides:e,pad:r,dataFormat:s,dilations:o});return l?K(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),vv=O({conv3DBackpropInput_:function wv(n,t,e,r,s){N(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let o=n,i=t,a=!1;4===t.rank&&(a=!0,i=K(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),o=[1,n[0],n[1],n[2],n[3]]);const u=o[4],l=i.shape[4];N(5===o.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`),N(5===i.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),N(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),N(u===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${e.shape[3]}.`),N(l===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${e.shape[4]}.`);const h=F.runKernel(ei,{dy:i,filter:e},{pad:s,strides:r,inputShape:o});return a?K(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Sv=O({conv3dTranspose_:function Cv(n,t,e,r,s){const o=$(n,"x","conv3dTranspose"),i=$(t,"filter","conv3dTranspose");return vv(e,o,i,r,s)}}),kv=O({cos_:function Iv(n){const e={x:$(n,"x","cos","float32")};return F.runKernel("Cos",e)}}),$v=O({cosh_:function Nv(n){const e={x:$(n,"x","cosh","float32")};return F.runKernel(Ar,e)}}),Tv=O({cumprod_:function _v(n,t=0,e=!1,r=!1){const o={x:$(n,"x","cumprod")};return F.runKernel(Qi,o,{axis:t,exclusive:e,reverse:r})}}),Rv=O({cumsum_:function Ev(n,t=0,e=!1,r=!1){const o={x:$(n,"x","cumsum")};return F.runKernel(Zi,o,{axis:t,exclusive:e,reverse:r})}}),Dv=O({denseBincount_:function Av(n,t,e,r=!1){const s=$(n,"x","denseBincount"),o=$(t,"weights","denseBincount");return N("int32"===s.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`),N(s.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`),N(e>=0,()=>`size must be non-negative, but got ${e}.`),N(o.size===s.size||0===o.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${o.shape}.`),F.runKernel(ea,{x:s,weights:o},{size:e,binaryOutput:r})}}),Ov=O({depthToSpace_:function Pv(n,t,e="NHWC"){const r=$(n,"x","depthToSpace","float32"),s="NHWC"===e?r.shape[1]:r.shape[2],o="NHWC"===e?r.shape[2]:r.shape[3],i="NHWC"===e?r.shape[3]:r.shape[1];return N(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),N(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),N(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t} for depthToSpace with input shape\n        ${r.shape}`),N(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`),F.runKernel(Us,{x:r},{blockSize:t,dataFormat:e})}}),yd=O({depthwiseConv2d_:function Fv(n,t,e,r,s="NHWC",o=[1,1],i){const a=$(n,"x","depthwiseConv2d","float32"),u=$(t,"filter","depthwiseConv2d","float32");let l=a,c=!1;3===a.rank&&(c=!0,l=K(a,[1,a.shape[0],a.shape[1],a.shape[2]])),N(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),N(4===u.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`);const d="NHWC"===s?l.shape[3]:l.shape[1];N(d===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${d}) must match the inChannels dimension in filter ${u.shape[2]}.`),jn("depthwiseConv2d",r,i);const m=F.runKernel(Dr,{x:l,filter:u},{strides:e,pad:r,dataFormat:s,dilations:o,dimRoundingMode:i});return c?K(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Bv=O({diag_:function Lv(n){const e={x:$(n,"x","diag")};return F.runKernel(ra,e)}}),zv=O({dilation2d_:function Mv(n,t,e,r,s=[1,1],o="NHWC"){const i=$(n,"x","dilation2d"),a=$(t,"filter","dilation2d");N(3===i.rank||4===i.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),N(3===a.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),N("NHWC"===o,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);let u=i,l=!1;3===i.rank&&(u=K(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0),N(u.shape[3]===a.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${u.shape[3]} vs ${a.shape[2]}`);const h=F.runKernel(sa,{x:u,filter:a},{strides:e,pad:r,dilations:s});return l?K(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),tm=O({equal_:function Vv(n,t){let e=$(n,"a","equal","string_or_numeric"),r=$(t,"b","equal","string_or_numeric");return[e,r]=Rt(e,r),Be(e.shape,r.shape),F.runKernel(rs,{a:e,b:r})}}),ys=O({where_:function Wv(n,t,e){const r=$(t,"a","where"),s=$(e,"b","where"),o=$(n,"condition","where","bool"),i=Be(Be(o.shape,r.shape),s.shape),a=La(o,i),u=La(r,i),l=La(s,i);return F.runKernel(sc,{condition:a,t:u,e:l})}}),Gv=O({divNoNan_:function Uv(n,t){let e=$(n,"a","div"),r=$(t,"b","div");[e,r]=Rt(e,r);const s=je(e,r),o=An(s),i=tm(r,o);return ys(i,o,s)}}),jv=O({dot_:function Hv(n,t){const e=$(n,"t1","dot"),r=$(t,"t2","dot");N(!(1!==e.rank&&2!==e.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${r.rank}.`);const s=1===e.rank?e.size:e.shape[1],o=1===r.rank?r.size:r.shape[0];if(N(s===o,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${o}.`),1===e.rank&&1===r.rank){const i=K(e,[1,-1]),a=K(r,[-1,1]),u=gt(i,a);return K(u,[])}if(1===e.rank&&2===r.rank){const i=K(e,[1,-1]),a=K(r,[r.shape[0],r.shape[1]]),u=gt(i,a);return K(u,[u.size])}if(2===e.rank&&1===r.rank){const i=K(r,[-1,1]),a=gt(e,i);return K(a,[a.size])}{const i=K(r,[r.shape[0],r.shape[1]]);return gt(e,i)}}}),Ci=O({einsum_:function Kv(n,...t){const e=t.map((s,o)=>$(s,`tensors${o}`,"einsum"));return F.runKernel(hn,e,{equation:n})}}),nm=O({elu_:function Xv(n){const e={x:$(n,"x","elu","float32")};return F.runKernel("Elu",e)}}),Yv=O({ensureShape_:function qv(n,t){const e=$(n,"x","ensureShape","string_or_numeric");if(!function pu(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(null!==n[e]&&null!==t[e]&&n[e]!==t[e])return!1;return!0}(e.shape,t))throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`);return n}}),Zv=O({erf_:function Qv(n){let t=$(n,"x","erf");return N("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=mt(t,"float32")),F.runKernel("Erf",{x:t})}});function xd(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function rm(n,t,e){const r=n.length+t.length,s=[];let o=0,i=0;for(let a=0;a<r;a++)-1===e.indexOf(a)?s.push(n[o++]):s.push(t[i++]);return s}function Pn(n,t){const e=[],r=n.length;for(let o=0;o<r;o++)-1===t.indexOf(o)&&e.push(n[o]);return[e,t.map(o=>n[o])]}function mn(n,t){return rm(n,t.map(r=>1),t)}function In(n,t,e){N(xd(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function jt(n,t){if(xd(n,t))return null;const e=[];for(let r=0;r<t;++r)-1===n.indexOf(r)&&e.push(r);return n.forEach(r=>e.push(r)),e}function Ba(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Kt(n,t){const e=[];for(let r=t-n;r<t;++r)e.push(r);return e}const Si=O({max_:function Jv(n,t=null,e=!1){const s={x:$(n,"x","max")};return F.runKernel("Max",s,{reductionIndices:t,keepDims:e})}}),bd=O({min_:function e2(n,t=null,e=!1){const s={x:$(n,"x","min")};return F.runKernel(T,s,{axis:t,keepDims:e})}}),kt=O({sum_:function t2(n,t=null,e=!1){let r=$(n,"x","sum");return"bool"===r.dtype&&(r=mt(r,"int32")),F.runKernel("Sum",{x:r},{axis:t,keepDims:e})}});function sm(n,t,e=null){if(0===n.rank)return Dn(n);if(1!==n.rank&&null===e)return sm(K(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return kt(Dn(n),e);if(t===1/0)return Si(Dn(n),e);if(t===-1/0)return bd(Dn(n),e);if("euclidean"===t||2===t)return Br(kt(Aa(Dn(n),We(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return Si(kt(Dn(n),e[0]),e[1]-1);if(t===1/0)return Si(kt(Dn(n),e[1]),e[0]);if(t===-1/0)return bd(kt(Dn(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return Br(kt(Gn(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const Xu=O({norm_:function n2(n,t="euclidean",e=null,r=!1){const s=sm(n=$(n,"x","norm"),t,e);let o=s.shape;if(r){const i=at(e,n.shape);o=mn(s.shape,i)}return K(s,o)}}),s2=O({euclideanNorm_:function r2(n,t=null,e=!1){return Xu(n,"euclidean",t,e)}}),Wr=O({exp_:function o2(n){const e={x:$(n,"x","exp")};return F.runKernel(Or,e)}}),On=O({expandDims_:function i2(n,t=0){const e=$(n,"x","expandDims","string_or_numeric");return N(t<=e.rank,()=>"Axis must be <= rank of the tensor"),F.runKernel(Gs,{input:e},{dim:t})}}),u2=O({expm1_:function a2(n){const e={x:$(n,"x","expm1")};return F.runKernel(Wn,e)}}),Ma=O({tile_:function l2(n,t){const e=$(n,"x","tile","string_or_numeric");return N(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),F.runKernel(_u,{x:e},{reps:t})}}),om=O({eye_:function c2(n,t,e,r="float32"){null==t&&(t=n);const s=dt([n,t],r),o=n<=t?n:t;for(let a=0;a<o;++a)s.set(1,a,a);const i=K(s.toTensor(),[n,t]);if(null==e)return i;if(1===e.length)return Ma(On(i,0),[e[0],1,1]);if(2===e.length)return Ma(On(On(i,0),0),[e[0],e[1],1,1]);if(3===e.length)return Ma(On(On(On(i,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}}),im=O({floor_:function d2(n){const e={x:$(n,"x","floor","float32")};return F.runKernel(js,e)}}),am=O({gather_:function h2(n,t,e=0,r=0){const s=$(n,"x","gather"),o=$(t,"indices","gather","int32");return F.runKernel(ii,{x:s,indices:o},{axis:e,batchDims:r})}}),qu=O({greater_:function p2(n,t){let e=$(n,"a","greater","string_or_numeric"),r=$(t,"b","greater","string_or_numeric");return[e,r]=Rt(e,r),Be(e.shape,r.shape),F.runKernel(Ks,{a:e,b:r})}}),um=O({greaterEqual_:function f2(n,t){let e=$(n,"a","greaterEqual","string_or_numeric"),r=$(t,"b","greaterEqual","string_or_numeric");return[e,r]=Rt(e,r),Be(e.shape,r.shape),F.runKernel(hr,{a:e,b:r})}}),Yu=O({imag_:function m2(n){const e={input:$(n,"input","imag")};return F.runKernel(ai,e)}}),y2=O({isFinite_:function g2(n){const e={x:$(n,"x","isFinite")};return F.runKernel(ca,e)}}),b2=O({isInf_:function x2(n){const e={x:$(n,"x","isInf")};return F.runKernel(da,e)}}),v2=O({isNaN_:function w2(n){const e={x:$(n,"x","isNaN")};return F.runKernel(Xs,e)}}),lm=O({leakyRelu_:function C2(n,t=.2){const r={x:$(n,"x","leakyRelu")};return F.runKernel(qs,r,{alpha:t})}}),wd=O({less_:function S2(n,t){let e=$(n,"a","less","string_or_numeric"),r=$(t,"b","less","string_or_numeric");return[e,r]=Rt(e,r),Be(e.shape,r.shape),F.runKernel(os,{a:e,b:r})}}),vd=O({lessEqual_:function I2(n,t){let e=$(n,"a","lessEqual","string_or_numeric"),r=$(t,"b","lessEqual","string_or_numeric");return[e,r]=Rt(e,r),Be(e.shape,r.shape),F.runKernel(Ys,{a:e,b:r})}});function k2(n,t,e){if(e<=0)throw new Error("The number of values should be positive.");return F.runKernel(ha,{},{start:n,stop:t,num:e})}const $2=O({localResponseNormalization_:function N2(n,t=5,e=1,r=1,s=.5){const o=$(n,"x","localResponseNormalization");N(4===o.rank||3===o.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${o.rank}.`),N(Ir(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=o,a=!1;3===o.rank&&(a=!0,i=K(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const c=F.runKernel("LRN",{x:i},{depthRadius:t,bias:e,alpha:r,beta:s});return a?K(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),za=O({log_:function _2(n){const e={x:$(n,"x","log","float32")};return F.runKernel(Qs,e)}}),cm=O({log1p_:function T2(n){const e={x:$(n,"x","log1p")};return F.runKernel(pa,e)}}),gr=O({neg_:function E2(n){const e={x:$(n,"x","neg")};return F.runKernel("Neg",e)}}),dm=O({softplus_:function R2(n){const e={x:$(n,"x","softplus")};return F.runKernel(lc,e)}}),D2=O({logSigmoid_:function A2(n){const t=$(n,"x","logSigmoid");return Mr(r=>({value:gr(dm(gr(r))),gradFunc:i=>ne(i,Vr(gr(r)))}))(t)}}),O2=O({logSoftmax_:function P2(n,t=-1){const e=$(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return Mr((s,o)=>{const a=Si(s,t,!0),u=Pe(s,a),l=Pe(mt(u,"float32"),za(kt(Wr(u),t,!0)));return o([l]),{value:l,gradFunc:(d,h)=>{const[p]=h,y=Wr(p);return Pe(d,ne(kt(d,t,!0),y))}}})(e)}}),hm=O({logSumExp_:function F2(n,t=null,e=!1){const r=$(n,"x","logSumExp"),s=at(t,r.shape),o=Si(r,s,!0),i=Pe(r,o),a=Wr(i),u=kt(a,s),l=za(u),c=Ce(K(o,l.shape),l);if(e){const d=mn(c.shape,s);return K(c,d)}return c}}),Qu=O({logicalAnd_:function L2(n,t){const e=$(n,"a","logicalAnd","bool"),r=$(t,"b","logicalAnd","bool");return Be(e.shape,r.shape),F.runKernel(ui,{a:e,b:r})}}),pm=O({logicalNot_:function B2(n){const e={x:$(n,"x","logicalNot","bool")};return F.runKernel(fa,e)}}),fm=O({logicalOr_:function M2(n,t){const e=$(n,"a","logicalOr","bool"),r=$(t,"b","logicalOr","bool");return Be(e.shape,r.shape),F.runKernel(ma,{a:e,b:r})}}),V2=O({logicalXor_:function z2(n,t){const e=$(n,"a","logicalXor","bool"),r=$(t,"b","logicalXor","bool");return Be(e.shape,r.shape),Qu(fm(n,t),pm(Qu(n,t)))}}),Zu=2147483648,Cd=O({searchSorted_:function W2(n,t,e="left"){const r=$(n,"sortedSequence","searchSorted"),s=$(t,"values","searchSorted"),i=s.shape[s.shape.length-1],a=K(r,[-1,r.shape[r.shape.length-1]]),u=K(s,[-1,i]);if(a.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(a.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(j(u.shape)>=Zu)throw new Error(`values tensor size must less than ${Zu}`);if(a.shape[1]>=Zu)throw new Error(`trailing dim_size must less than ${Zu} for int32 output type, was ${a.shape[1]}`);return F.runKernel(rc,{sortedSequence:a,values:u},{side:e})}});function U2(n,t){return Cd(n,t,"left")}const mm=O({maxPool_:function G2(n,t,e,r,s){const o=$(n,"x","maxPool");let a=o,u=!1;3===o.rank&&(u=!0,a=K(o,[1,o.shape[0],o.shape[1],o.shape[2]])),N(4===a.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),N(nn(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),jn("maxPool",r,s);const d=F.runKernel(li,{x:a},{filterSize:t,strides:e,pad:r,dimRoundingMode:s});return u?K(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),j2=O({maxPool3d_:function H2(n,t=[1,1,1],e,r,s,o="NDHWC"){const i=$(n,"x","maxPool3d");let a=i,u=!1;4===i.rank&&(u=!0,a=K(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),N(5===a.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),N("NDHWC"===o,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),jn("maxPool3d",r,s);const d=F.runKernel(f,{x:a},{filterSize:t,strides:e,pad:r,dimRoundingMode:s,dataFormat:o});return u?K(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),X2=O({maxPoolWithArgmax_:function K2(n,t,e,r,s=!1){const i={x:$(n,"x","maxPoolWithArgmax")},u=F.runKernel(C,i,{filterSize:t,strides:e,pad:r,includeBatchInIndex:s});return{result:u[0],indexes:u[1]}}}),Ju=O({mean_:function q2(n,t=null,e=!1){const s={x:$(n,"x","mean")};return F.runKernel(I,s,{axis:t,keepDims:e})}});function Ur(n,t="float32"){if(Ut(n),"complex64"===t){const r=Ur(n,"float32"),s=Ur(n,"float32");return cs(r,s)}const e=En(j(n),t);return F.makeTensor(e,n,t)}function co(n,t="float32"){if(Ut(n),"complex64"===t){const r=co(n,"float32"),s=Ur(n,"float32");return cs(r,s)}const e=Mo(j(n),t);return F.makeTensor(e,n,t)}function Y2(n,t,{indexing:e="xy"}={}){if("xy"!==e&&"ij"!==e)throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(void 0===n)return[];let r=$(n,"x","meshgrid",n instanceof _t?n.dtype:"float32");if(void 0===t)return[r];let s=$(t,"y","meshgrid",t instanceof _t?t.dtype:"float32");const o=j(r.shape),i=j(s.shape);return"xy"===e?(r=K(r,[1,-1]),s=K(s,[-1,1]),[gt(co([i,1],r.dtype),r),gt(s,co([1,o],s.dtype))]):(r=K(r,[-1,1]),s=K(s,[1,-1]),[gt(r,co([1,i],r.dtype)),gt(co([o,1],s.dtype),s)])}const Va=O({minimum_:function Q2(n,t){let e=$(n,"a","minimum"),r=$(t,"b","minimum");return[e,r]=Rt(e,r),"bool"===e.dtype&&(e=mt(e,"int32"),r=mt(r,"int32")),Be(e.shape,r.shape),F.runKernel(R,{a:e,b:r})}}),gm=O({mirrorPad_:function Z2(n,t,e){N("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const r=$(n,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");N(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);const s="reflect"===e?1:0;for(let a=0;a<r.rank;a++)N(2===t[a].length,()=>"Invalid number of paddings. Must be length of 2 each."),N(t[a][0]>=0&&t[a][0]<=r.shape[a]-s&&t[a][1]>=0&&t[a][1]<=r.shape[a]-s,()=>`Padding in dimension ${a} cannot be greater than or equal to ${r.shape[a]-s} or less than 0 for input of shape ${r.shape}`);return F.runKernel(E,{x:r},{paddings:t,mode:e})}}),eC=O({mod_:function J2(n,t){let e=$(n,"a","mod"),r=$(t,"b","mod");return[e,r]=Rt(e,r),F.runKernel(B,{a:e,b:r})}}),nC=O({moments_:function tC(n,t=null,e=!1){const r=at(t,(n=$(n,"x","moments")).shape),s=Ju(n,r,e);let o=s.shape;e||(o=mn(s.shape,r));const i=Gn(Pe(mt(n,"float32"),K(s,o)));return{mean:s,variance:Ju(i,r,e)}}}),sC=O({multiRNNCell_:function rC(n,t,e,r){const s=$(t,"data","multiRNNCell"),o=zu(e,"c","multiRNNCell"),i=zu(r,"h","multiRNNCell");let a=s;const u=[];for(let d=0;d<n.length;d++){const h=n[d](a,o[d],i[d]);u.push(h[0]),u.push(h[1]),a=h[1]}const l=[],c=[];for(let d=0;d<u.length;d+=2)l.push(u[d]),c.push(u[d+1]);return[l,c]}}),iC=O({multinomial_:function oC(n,t,e,r=!1){const s=$(n,"logits","multinomial"),o=s.size,i=s.rank;if(o<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);e=e||Math.random();const u={logits:1===i?K(s,[1,-1]):s},c=F.runKernel(G,u,{numSamples:t,seed:e,normalized:r});return 1===i?K(c,[c.size]):c}}),ym=O({notEqual_:function aC(n,t){let e=$(n,"a","notEqual","string_or_numeric"),r=$(t,"b","notEqual","string_or_numeric");return[e,r]=Rt(e,r),Be(e.shape,r.shape),F.runKernel($e,{a:e,b:r})}}),lC=O({oneHot_:function uC(n,t,e=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const i={indices:$(n,"indices","oneHot","int32")};return F.runKernel(ft,i,{dtype:s,depth:t,onValue:e,offValue:r})}}),dC=O({onesLike_:function cC(n){const e={x:$(n,"x","onesLike")};return F.runKernel(Le,e)}}),pC=O({outerProduct_:function hC(n,t){const e=$(n,"v1","outerProduct"),r=$(t,"v2","outerProduct");N(1===e.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${r.rank}.`);const s=K(e,[-1,1]),o=K(r,[1,-1]);return gt(s,o)}}),xs=O({pad_:function fC(n,t,e=0){const r=$(n,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return F.runKernel(Ot,{x:r},{paddings:t,constantValue:e})}}),gC=O({pad1d_:function mC(n,t,e=0){return N(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),xs(n,[t],e)}}),xC=O({pad2d_:function yC(n,t,e=0){return N(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),xs(n,t,e)}}),wC=O({pad3d_:function bC(n,t,e=0){return N(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),xs(n,t,e)}}),CC=O({pad4d_:function vC(n,t,e=0){return N(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),xs(n,t,e)}}),xm=O({spaceToBatchND_:function SC(n,t,e){const r=$(n,"x","spaceToBatchND");return N(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),N(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),N(r.shape.reduce((i,a,u)=>u>0&&u<=t.length?i&&(a+e[u-1][0]+e[u-1][1])%t[u-1]==0:i,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),F.runKernel(dc,{x:r},{blockShape:t,paddings:e})}}),$C=O({pool_:function IC(n,t,e,r,s,o,i){null==s&&(s=[1,1]),null==o&&(o=1),0===r&&(r="valid");const a=$(n,"x","maxPool");let u=a,l=!1;3===a.rank&&(l=!0,u=K(a,[1,a.shape[0],a.shape[1],a.shape[2]])),N(nn(o,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${s}'`);const c=Hn(u.shape,t,o,s,r),d=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function NC(n,t){const r=n.map((i,a)=>i+(i-1)*(t[a]-1)).map(i=>i-1),s=r.map(i=>Math.floor(i/2)),o=r.map((i,a)=>i-s[a]);return r.map((i,a)=>[s[a],o[a]])}([c.filterHeight,c.filterWidth],d):[[0,0],[0,0]];const p=1===d[0]&&1===d[1],[m,y]=function kC(n,t,e){const r=e.map(c=>c[0]),s=e.map(c=>c[1]),o=n.concat(r,s),i=t.map((c,d)=>(c-o[d]%c)%c),a=s.map((c,d)=>c+i[d]),u=t.map((c,d)=>[r[d],a[d]]),l=t.map((c,d)=>[0,i[d]]);return[u,l]}([c.inHeight,c.inWidth],d,h),g=p?r:"valid",x=p?u:xm(u,d,m),S=("avg"===e?()=>Yf(x,t,o,g,i):()=>mm(x,t,o,g,i))(),k=p?S:Qf(S,d,y);return l?K(k,[k.shape[1],k.shape[2],k.shape[3]]):k}}),bm=O({prelu_:function _C(n,t){const e=$(n,"x","prelu"),r=$(t,"alpha","prelu");return F.runKernel(Qe,{x:e,alpha:r})}}),EC=O({prod_:function TC(n,t=null,e=!1){let r=$(n,"x","prod");return"bool"===r.dtype&&(r=mt(r,"int32")),F.runKernel(Dt,{x:r},{axis:t,keepDims:e})}}),AC=O({raggedGather_:function RC(n,t,e,r){const s=n.map((c,d)=>$(c,`tensors${d}`,"raggedGather","int32")),o=$(t,"paramsDenseValues","raggedGather"),i=$(e,"indices","raggedGather","int32"),l=F.runKernel(rr,{paramsNestedSplits:s,paramsDenseValues:o,indices:i},{outputRaggedRank:r});return{outputNestedSplits:l.slice(0,l.length-1),outputDenseValues:l[l.length-1]}}}),PC=O({raggedRange_:function DC(n,t,e){const r=$(n,"starts","raggedRange"),s=$(t,"limits","raggedRange",r.dtype),o=$(e,"deltas","raggedRange",r.dtype),a=F.runKernel(Iu,{starts:r,limits:s,deltas:o});return{rtNestedSplits:a[0],rtDenseValues:a[1]}}}),FC=O({raggedTensorToTensor_:function OC(n,t,e,r,s){const o=$(n,"shape","raggedTensorToTensor","int32"),i=$(t,"values","raggedTensorToTensor"),a=$(e,"defaultValue","raggedTensorToTensor",i.dtype),u=r.map((d,h)=>$(d,`tensors${h}`,"raggedTensorToTensor","int32"));return F.runKernel(ku,{shape:o,values:i,defaultValue:a,rowPartitionTensors:u},{rowPartitionTypes:s})}}),BC=O({rand_:function LC(n,t,e){Ut(n);const r=j(n);let s=null;if(null==e||"float32"===e)s=new Float32Array(r);else if("int32"===e)s=new Int32Array(r);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);s=new Uint8Array(r)}for(let o=0;o<r;o++)s[o]=t();return F.makeTensor(s,n,e)}});var Sd=H(1276);class Id{constructor(t,e,r,s,o){this.mean=t,this.stdDev=e,this.dtype=r,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const i=o||Math.random();this.random=Sd.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){const s=this.nextVal;return this.nextVal=NaN,s}let t,e,r=!1;for(;!r;){let s,o,i;do{s=2*this.random()-1,o=2*this.random()-1,i=s*s+o*o}while(i>=1||0===i);const a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*s*a,e=this.mean+this.stdDev*o*a,(!this.truncated||this.isValidTruncated(t))&&(r=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class MC{constructor(t,e,r,s){this.alpha=t,this.beta=1/e,this.dtype=r;const o=s||Math.random();this.randu=Sd.alea(o.toString()),this.randn=new Id(0,1,r,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,r,s,o,i;for(;;){do{s=this.randn.nextValue(),i=1+this.c*s}while(i<=0);if(i*=i*i,t=s*s,e=1-.331*t*t,r=.5*t+this.d*(1-i+Math.log(i)),o=this.randu(),o<e||Math.log(o)<r)break}return i*=1/this.beta*this.d,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class zC{constructor(t=0,e=1,r,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=r,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Sd.alea(s)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const HC=O({randomGamma_:function GC(n,t,e=1,r="float32",s){if(Ut(n),null==e&&(e=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const o=new MC(t,e,r,s),i=dt(n,r);for(let a=0;a<i.values.length;a++)i.values[a]=o.nextValue();return i.toTensor()}}),wm=O({randomNormal_:function jC(n,t=0,e=1,r,s){if(Ut(n),null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const o=new Id(t,e,r,!1,s),i=dt(n,r);for(let a=0;a<i.values.length;a++)i.values[a]=o.nextValue();return i.toTensor()}}),XC=O({randomStandardNormal_:function KC(n,t,e){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return wm(n,0,1,t,e)}}),Nd=O({randomUniform_:function qC(n,t=0,e=1,r="float32",s){Ut(n);const o=dt(n,r),i=new zC(t,e,null,s);for(let a=0;a<o.values.length;a++)o.values[a]=i.nextValue();return o.toTensor()}}),QC=O({randomUniformInt_:function YC(n,t,e,r){return Nd(n,t,e,"int32",r)}});function Wa(n,t,e=1,r="float32"){if(0===e)throw new Error("Cannot have a step of zero");return F.runKernel(ba,{},{start:n,stop:t,step:e,dtype:r})}const Ua=O({real_:function ZC(n){const e={input:$(n,"input","real")};return F.runKernel(ci,e)}}),eS=O({reciprocal_:function JC(n){const e={x:$(n,"x","reciprocal")};return F.runKernel(wa,e)}}),el=O({relu_:function tS(n){const e={x:$(n,"x","relu")};return F.runKernel(is,e)}}),vm=O({relu6_:function nS(n){const e={x:$(n,"x","relu6")};return F.runKernel(Zl,e)}}),ho=O({reverse_:function rS(n,t){const r={x:$(n,"x","reverse")};return F.runKernel(Jl,r,{dims:t})}}),oS=O({reverse1d_:function sS(n){const t=$(n,"x","reverse");return N(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),ho(t,0)}}),aS=O({reverse2d_:function iS(n,t){const e=$(n,"x","reverse");return N(2===e.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),ho(e,t)}}),lS=O({reverse3d_:function uS(n,t){const e=$(n,"x","reverse");return N(3===e.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),ho(e,t)}}),dS=O({reverse4d_:function cS(n,t){const e=$(n,"x","reverse");return N(4===e.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),ho(e,t)}}),Cm=O({round_:function hS(n){const e={x:$(n,"x","round")};return F.runKernel(ec,e)}}),fS=O({rsqrt_:function pS(n){const e={x:$(n,"x","rsqrt","float32")};return F.runKernel(va,e)}}),gS=O({selu_:function mS(n){const e={x:$(n,"x","selu")};return F.runKernel(oc,e)}}),xS=O({separableConv2d_:function yS(n,t,e,r,s,o=[1,1],i="NHWC"){const a=$(n,"x","separableConv2d"),u=$(t,"depthwiseFilter","separableConv2d"),l=$(e,"pointwiseFilter","separableConv2d");let c=a,d=!1;if(3===a.rank&&(d=!0,c=K(a,[1,a.shape[0],a.shape[1],a.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");N(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),N(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),N(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),N(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),N(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const h=u.shape[2],p=u.shape[3];N(l.shape[2]===h*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*p}, but got ${l.shape[2]}.`);const m=yd(c,u,r,s,i,o),g=Ku(m,l,1,"valid",i);return d?K(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});function $d(){return($d=(0,X.c)(function*(n,t){const e=$(n,"x","setdiff1d"),r=$(t,"y","setdiff1d");N(e.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${r.dtype}).`),N(1===e.rank,()=>`x should be 1D tensor, but got x (${e.shape}).`),N(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=yield e.data(),o=yield r.data(),i=new Set(o);let a=0;for(let c=0;c<s.length;c++)i.has(s[c])||a++;const u=new fi([a],e.dtype),l=new fi([a],"int32");for(let c=0,d=0;c<s.length;c++)i.has(s[c])||(u.values[d]=s[c],l.values[d]=c,d++);return[u.toTensor(),l.toTensor()]})).apply(this,arguments)}const wS=function bS(n,t){return $d.apply(this,arguments)},CS=O({sign_:function vS(n){const e={x:$(n,"x","sign")};return F.runKernel(uc,e)}}),IS=O({sin_:function SS(n){const e={x:$(n,"x","sin","float32")};return F.runKernel("Sin",e)}}),NS=O({sinh_:function kS(n){const e={x:$(n,"x","sinh")};return F.runKernel(ac,e)}}),_S=O({slice1d_:function $S(n,t,e){const r=$(n,"x","slice1d");return N(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Ue(r,[t],[e])}}),ES=O({slice2d_:function TS(n,t,e){const r=$(n,"x","slice2d");return N(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Ue(r,t,e)}}),AS=O({slice3d_:function RS(n,t,e){const r=$(n,"x","slice3d");return N(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Ue(r,t,e)}}),PS=O({slice4d_:function DS(n,t,e){const r=$(n,"x","slice4d");return N(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Ue(r,t,e)}}),FS=O({softmax_:function OS(n,t=-1){const e=$(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return F.runKernel(pc,{logits:e},{dim:t})}}),_d=O({fft_:function LS(n){return N("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),F.runKernel("FFT",{input:n})}}),tl=O({ifft_:function BS(n){return N("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),F.runKernel(la,{input:n})}}),Sm=O({irfft_:function MS(n){const t=n.shape[n.shape.length-1],e=n.size/t;let r;if(t<=2){const s=K(n,[e,t]);r=tl(s)}else{const s=[e,2*(t-1)],o=K(Ua(n),[e,t]),i=K(Yu(n),[e,t]),a=ho(Ue(o,[0,1],[e,t-2]),1),u=ne(ho(Ue(i,[0,1],[e,t-2]),1),We(-1)),l=zt([o,a],1),c=zt([i,u],1),d=K(cs(l,c),[s[0],s[1]]);r=tl(d)}if(r=Ua(r),3===n.rank&&0!==n.shape[0]){const s=r,o=n.shape[0];r=K(r,[o,r.shape[0]/o,r.shape[1]]),s.dispose()}return r}}),Ga=O({split_:function zS(n,t,e=0){const s={x:$(n,"x","split")};return F.runKernel(hc,s,{numOrSizeSplits:t,axis:e})}}),Td=O({rfft_:function VS(n,t){N("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const r=n.size/e;let s;if(null!=t&&t<e){const m=n.shape.map(g=>0),y=n.shape.map(g=>g);y[n.shape.length-1]=t,s=Ue(n,m,y),e=t}else if(null!=t&&t>e){const m=n.shape.map(y=>y);m[n.shape.length-1]=t-e,s=zt([n,Ur(m)],n.shape.length-1),e=t}else s=n;const o=An(s),i=K(cs(s,o),[r,e]),a=_d(i),u=Math.floor(e/2)+1,l=Ua(a),c=Yu(a),d=Ga(l,[u,e-u],l.shape.length-1),h=Ga(c,[u,e-u],c.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=u,K(cs(d[0],h[0]),p)}}),Im=O({squaredDifference_:function WS(n,t){let e=$(n,"a","squaredDifference"),r=$(t,"b","squaredDifference");return[e,r]=Rt(e,r),Be(e.shape,r.shape),F.runKernel(yc,{a:e,b:r},{})}}),yt=O({squeeze_:function US(n,t){const e=$(n,"x","squeeze","string_or_numeric");return K(e,dr(e.shape,t).newShape)}}),Gr=O({stack_:function GS(n,t=0){const e=zu(n,"tensors","stack","string_or_numeric");return N(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&N(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),F.runKernel(lt,e,{axis:t})}}),km=O({step_:function HS(n,t=0){const r={x:$(n,"x","step")};return F.runKernel($c,r,{alpha:t})}}),KS=O({stridedSlice_:function jS(n,t,e,r,s=0,o=0,i=0,a=0,u=0){const c={x:$(n,"x","stridedSlice","string_or_numeric")};return F.runKernel(xc,c,{begin:t,end:e,strides:r,beginMask:s,endMask:o,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:u})}}),qS=O({tan_:function XS(n){const e={x:$(n,"x","tan","float32")};return F.runKernel("Tan",e)}});function Yt(n,t){Sr(n);const e=ls(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ds(n,null,e,t)}function Kn(n,t,e){if(Sr(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=ls(n,e);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ds(n,t,r,e)}function YS(n,t,e){if(Sr(n),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=ls(n,e);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ds(n,t,r,e)}function QS(n,t,e){if(Sr(n),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=ls(n,e);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ds(n,t,r,e)}function ZS(n,t,e){if(Sr(n),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=ls(n,e);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ds(n,t=t||r,r,e)}function Nm(n,t,e){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,o=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${r}, and batchDim: ${s}.`;if(e.rank<s)throw new Error(o+` update.rank < ${s}. `);if(n.length<r+(e.rank-s))throw new Error(o+` Output shape length < ${r+(e.rank-s)}`);if(e.rank!==s+n.length-r)throw new Error(o+" update.rank != "+(s+n.length-r));for(let i=0;i<s;++i)if(e.shape[i]!==t.shape[i])throw new Error(o+` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<e.rank-s;++i)if(e.shape[i+s]!==n[i+r])throw new Error(o+` updates.shape[${i+s}] (${e.shape[i+s]}) != shape[${i+s}] (${n[i+s]})`)}function Ed(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}Nm(e,t,n)}function po(n,t,e){const r=t.shape.length,s=r>1?t.shape[r-1]:1,o=e.length;let i=1;for(let d=s;d<o;++d)i*=e[d];const a=s<1?1:s;return{sliceRank:s,numUpdates:j(t.shape)/a,sliceSize:i,strides:[...pt(e.slice(0,s)),1],outputSize:j(e)}}const eI=O({tensorScatterUpdate_:function JS(n,t,e){const r=$(n,"tensor","tensorScatterupdate"),s=$(t,"indices","tensorScatterupdate","int32"),o=$(e,"updates","tensorScatterupdate");if(Ed(o,s,r.shape),r.dtype!==o.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${r.dtype} and ${o.dtype}.`);return F.runKernel(nc,{tensor:r,indices:s,updates:o},{})}}),nI=O({topk_:function tI(n,t=1,e=!0){const r=$(n,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const o={x:r},i={k:t,sorted:e},[a,u]=F.runKernel(Cc,o,i);return{values:a,indices:u}}}),sI=O({truncatedNormal_:function rI(n,t=0,e=1,r,s){if(Ut(n),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const o=new Id(t,e,r,!0,s),i=dt(n,r);for(let a=0;a<i.values.length;a++)i.values[a]=o.nextValue();return i.toTensor()}}),iI=O({unique_:function oI(n,t=0){const e=$(n,"x","unique","string_or_numeric");N(e.rank>0,()=>"The input tensor must be at least 1D");const r={x:e},s={axis:t},[o,i]=F.runKernel("Unique",r,s);return{values:o,indices:i}}}),uI=O({unsortedSegmentSum_:function aI(n,t,e){const r=$(n,"x","unsortedSegmentSum"),s=$(t,"segmentIds","unsortedSegmentSum","int32");return N(Ir(e),()=>"numSegments must be of dtype int"),F.runKernel(kc,{x:r,segmentIds:s},{numSegments:e})}}),fo=O({unstack_:function lI(n,t=0){const e=$(n,"x","unstack","string_or_numeric");return N(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),F.runKernel(Ic,{value:e},{axis:t})}});function cI(n,t){return Cd(n,t,"right")}function dI(n,t=!0,e,r){return F.makeVariable(n,t,e,r)}function $m(n,t){const e=[];for(let o=0;o<t.length;o++)t[o]&&e.push(o);const r=dt(n,"int32"),s=dt([e.length,n.length],"int32");for(let o=0;o<e.length;o++){const i=r.indexToLoc(e[o]);s.values.set(i,o*n.length)}return s.toTensor()}function Rd(){return(Rd=(0,X.c)(function*(n){const t=$(n,"condition","whereAsync","bool"),e=yield t.data(),r=$m(t.shape,e);return n!==t&&t.dispose(),r})).apply(this,arguments)}const _m=function hI(n){return Rd.apply(this,arguments)};function Ad(){return(Ad=(0,X.c)(function*(n,t,e){const r=$(n,"tensor","boolMask"),s=$(t,"mask","boolMask","bool"),o=null==e?0:e,i=s.rank,a=r.shape;N(i>0,()=>"mask cannot be scalar"),ut(a.slice(o,o+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let y=o;y<o+i;y++)u*=a[y];const l=a.slice(0,o).concat([u],a.slice(o+i)),c=K(r,l),d=K(s,[-1]),h=yield _m(d),p=yt(h,[1]),m=am(c,p,o);return n!==r&&r.dispose(),t!==s&&s.dispose(),p.dispose(),c.dispose(),d.dispose(),h.dispose(),m})).apply(this,arguments)}const fI=function pI(n,t,e){return Ad.apply(this,arguments)},Dd=O({transpose_:function mI(n,t,e){const r=$(n,"x","transpose");if(null==t&&(t=r.shape.map((i,a)=>a).reverse()),N(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`),t.forEach(i=>{N(i>=0&&i<r.rank,()=>`All entries in 'perm' must be between 0 and ${r.rank-1} but got ${t}`)}),r.rank<=1)return r.clone();const s={x:r},o={perm:t};return"complex64"===r.dtype?Ae(()=>{let i=Ua(r),a=Yu(r);return i=F.runKernel(di,{x:i},o),a=F.runKernel(di,{x:a},o),e&&(a=gr(a)),cs(i,a)}):F.runKernel(di,s,o)}}),yI=O({movingAverage_:function gI(n,t,e,r,s=!0){const o=$(n,"v","movingAverage"),i=$(t,"x","movingAverage"),a=$(e,"decay","movingAverage");(function xb(n,t){N(n.dtype===t.dtype,()=>`The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`)})(o,i),N(ot(o.shape,i.shape),()=>"Shape mismatch in v and x");const u=We(1),l=Pe(u,a);let c=ne(Pe(i,o),l);if(s){N(null!=r,()=>"When using zeroDebias: true, step is required.");const d=$(r,"step","movingAverage");c=je(c,Pe(u,Aa(a,d)))}return Ce(o,c)}}),bI=O({scatterND_:function xI(n,t,e){Ut(e);const r=$(n,"indices","scatterND","int32"),s=$(t,"updates","scatterND");return Ed(s,r,e),F.runKernel(tc,{indices:r,updates:s},{shape:e})}}),CI=O({sparseToDense_:function vI(n,t,e,r=0){Ut(e);const s=$(n,"sparseIndices","sparseToDense","int32"),o=$(t,"sparseValues","sparseToDense","string_or_numeric"),i=$(r,"defaultValue","sparseToDense",o.dtype);return function wI(n,t,e,r){if("int32"!==n.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);if(n.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);const s=n.rank>0?n.shape[0]:1,o=n.rank>1?n.shape[1]:1;if(e.length!==o)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);if(0!==t.rank&&(1!==t.rank||t.size!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,o,e,i),F.runKernel(gc,{sparseIndices:s,sparseValues:o,defaultValue:i},{outputShape:e})}}),II=O({gatherND_:function SI(n,t){const e=$(t,"indices","gatherND","int32"),s={params:$(n,"x","gatherND","string_or_numeric"),indices:e};return F.runKernel(ua,s)}}),$I=O({dropout_:function NI(n,t,e,r){const s=$(n,"x","dropout");if(N("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),N(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof _t?s.clone():s;const o=function kI(n,t){if(null==t)return n.shape.slice();if(ot(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let r=0;r<n.shape.length;r++)e.push(null==t[r]&&null!=n.shape[r]?n.shape[r]:t[r]);return e}return t}(s,e),i=1-t,a=je(im(Ce(Nd(o,0,1,"float32",r),i)),i);return ne(s,a)}});function Tm(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}function Pd(n,t,e){const r=1-n%2,s=new Float32Array(n);for(let o=0;o<n;++o){const i=2*Math.PI*o/(n+r-1);s[o]=t-e*Math.cos(i)}return Yt(s,"float32")}function Od(){return(Od=(0,X.c)(function*(n,t,e=1){const r=$(n,"predictions","inTopK"),s=$(t,"targets","inTopK");N(r.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`),N(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),ut(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const o=r.shape[r.shape.length-1];N(e>0&&e<=o,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`);const i=yield r.data(),a=yield s.data(),[u,l]=[i.length/o,o],c=dn("bool",u);for(let d=0;d<u;d++){const h=d*l,p=i.subarray(h,h+l),m=[];for(let y=0;y<p.length;y++)m.push({value:p[y],index:y});m.sort((y,g)=>g.value-y.value),c[d]=0;for(let y=0;y<e;y++)if(m[y].index===a[d]){c[d]=1;break}}return n!==r&&r.dispose(),t!==s&&s.dispose(),pr(c,s.shape,"bool")})).apply(this,arguments)}const TI=function _I(n,t){return Od.apply(this,arguments)},RI=O({conv2DBackpropFilter_:function EI(n,t,e,r,s,o="NHWC",i){let a=n;3===n.rank&&(a=K(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let u=t;3===u.rank&&(u=K(t,[1,t.shape[0],t.shape[1],t.shape[2]])),N(4===a.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),N(4===u.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`),N(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const l="NHWC"===o?a.shape[3]:a.shape[1],c="NHWC"===o?u.shape[3]:u.shape[1];return N(l===e[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${e[2]}.`),N(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),jn("conv2dDerFilter",s,i),F.runKernel(Yi,{x:a,dy:u},{strides:r,pad:s,dataFormat:o,dimRoundingMode:i,filterShape:e})}});function nl(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return ne(n,km(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function rl(n,t){let e=t;const r=If(n.shape,t.shape);return r.length>0&&(e=kt(e,r)),K(e,n.shape)}function sl(n,t,e,r){if("linear"===t)return n;if("relu"===t)return el(n);if("elu"===t)return nm(n);if("relu6"===t)return vm(n);if("prelu"===t)return bm(n,e);if("leakyrelu"===t)return lm(n,r);if("sigmoid"===t)return Vr(n);throw new Error(`Unknown fused activation ${t}.`)}const ol=(n,t)=>!(n>0)||"linear"===t,DI=O({fusedConv2d_:function AI({x:n,filter:t,strides:e,pad:r,dataFormat:s="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:a,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===ol(F.state.gradientDepth,u=u||"linear")){N("NHWC"===s,()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let A=Ku(n,t,e,r,s,o,i);return null!=a&&(A=Ce(A,a)),sl(A,u,l,c)}const d=$(n,"x","conv2d","float32"),h=$(t,"filter","conv2d","float32");let p=d,m=!1;3===d.rank&&(m=!0,p=K(d,[1,d.shape[0],d.shape[1],d.shape[2]])),N(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),N(4===h.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`),jn("fused conv2d",r,i);const y="NHWC"===s?p.shape[3]:p.shape[1];N(h.shape[2]===y,()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${h.shape[2]}.`),N(nn(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);const g=Ft(p.shape,h.shape,e,o,r,i);let x,w;if(null!=a&&(x=$(a,"bias","fused conv2d"),[x]=Rt(x,d),"NHWC"===s?Be(g.outShape,x.shape):(N(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),N(0===x.shape.length||x.shape[0]===g.outChannels||1===x.shape[0],()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`))),null!=l){const A=l.shape;if(N(A.length<=1||3===A.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${A.length}.`),1===A.length)N(1===A[0]||A[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${A}) is not compatible with the number of output channels (${g.outChannels}).`);else if(3===A.length)try{Be(A,g.outShape)}catch{throw Error(`Error in fused conv2d: PReLU activation weights (${A}) is not compatible with the output shape of the conv2d (${g.outShape}).`)}w=$(l,"prelu weights","fused conv2d")}const S=(A,P)=>{N("NHWC"===s,()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`);const[L,M,W,q]=P,re=nl(A,W,u);N(Fa(o),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);const Ie=[em(M.shape,re,L,e,r),RI(M,re,L.shape,e,r)];if(null!=q){const ve=rl(q,re);Ie.push(ve)}return Ie},k={x:p,filter:h,bias:x,preluActivationWeights:w},_={strides:e,pad:r,dataFormat:s,dilations:o,dimRoundingMode:i,activation:u,leakyreluAlpha:c};return null==a?Mr((P,L,M)=>{let W=F.runKernel(Ru,k,_);return M([L,P,W]),m&&(W=K(W,[W.shape[1],W.shape[2],W.shape[3]])),{value:W,gradFunc:S}})(p,h):Mr((P,L,M,W)=>{let q=F.runKernel(Ru,k,_);return W([L,P,q,M]),m&&(q=K(q,[q.shape[1],q.shape[2],q.shape[3]])),{value:q,gradFunc:S}})(p,h,x)}}),OI=O({depthwiseConv2dNativeBackpropFilter_:function PI(n,t,e,r,s,o=[1,1],i){let a=n;3===n.rank&&(a=K(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let u=t;return 3===u.rank&&(u=K(t,[1,t.shape[0],t.shape[1],t.shape[2]])),F.runKernel(ta,{x:a,dy:u},{strides:r,pad:s,dimRoundingMode:i,dilations:o,filterShape:e})}}),LI=O({depthwiseConv2dNativeBackpropInput_:function FI(n,t,e,r,s,o=[1,1],i){let a=t,u=!1;3===t.rank&&(u=!0,a=K(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d=F.runKernel(na,{dy:a,filter:e},{strides:r,pad:s,dimRoundingMode:i,dilations:o,inputShape:n});return u?K(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),MI=O({fusedDepthwiseConv2d_:function BI({x:n,filter:t,strides:e,pad:r,dataFormat:s="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:a,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===ol(F.state.gradientDepth,u)){let _=yd(n,t,e,r,s,o,i);return null!=a&&(_=Ce(_,a)),sl(_,u,l,c)}const d=$(n,"x","depthwiseConv2d","float32"),h=$(t,"filter","depthwiseConv2d","float32");let p=d,m=!1;3===d.rank&&(m=!0,p=K(d,[1,d.shape[0],d.shape[1],d.shape[2]])),N(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),N(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),N(p.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==o&&(o=[1,1]),N(nn(e,o),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),jn("fused depthwiseConv2d",r,i);const y=Ft(p.shape,h.shape,e,o,r,i,!0);let g,x;null!=a&&(g=$(a,"bias","fused conv2d"),[g]=Rt(g,d),Be(y.outShape,g.shape)),null!=l&&(x=$(l,"prelu weights","fused depthwiseConv2d"));const w=(_,A)=>{N(Fa(o),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[P,L,M,W]=A,q=nl(_,M,u),re=LI(L.shape,q,P,e,r,o,i),oe=OI(L,q,P.shape,e,r,o,i);return null!=W?[re,oe,rl(g,q)]:[re,oe]},S={x:p,filter:h,bias:g,preluActivationWeights:x},k={strides:e,pad:r,dataFormat:s,dilations:o,dimRoundingMode:i,activation:u,leakyreluAlpha:c};return null==a?Mr((A,P,L)=>{let M=F.runKernel(Au,S,k);return L([P,A,M]),m&&(M=K(M,[M.shape[1],M.shape[2],M.shape[3]])),{value:M,gradFunc:w}})(p,h):Mr((A,P,L,M)=>{let W=F.runKernel(Au,S,k);return M([P,A,W,L]),m&&(W=K(W,[W.shape[1],W.shape[2],W.shape[3]])),{value:W,gradFunc:w}})(p,h,g)}}),VI=O({fusedMatMul_:function zI({a:n,b:t,transposeA:e=!1,transposeB:r=!1,bias:s,activation:o="linear",preluActivationWeights:i,leakyreluAlpha:a=.2}){if(!1===ol(F.state.gradientDepth,o)){let q=gt(n,t,e,r);return null!=s&&(q=Ce(q,s)),sl(q,o,i,a)}let u=$(n,"a","fused matMul"),l=$(t,"b","fused matMul");[u,l]=Rt(u,l);const c=e?u.shape[u.rank-2]:u.shape[u.rank-1],d=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=e?u.shape[u.rank-1]:u.shape[u.rank-2],p=r?l.shape[l.rank-2]:l.shape[l.rank-1],m=u.shape.slice(0,-2),y=l.shape.slice(0,-2),g=j(m),x=j(y);N(c===d,()=>`Error in fused matMul: inner shapes (${c}) and (${d}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${e} and transposeB=${r} must match.`);const S=Be(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([h,p]),k=K(u,e?[g,c,h]:[g,h,c]),_=K(l,r?[x,p,d]:[x,d,p]);let A,P;null!=s&&(A=$(s,"bias","fused matMul"),[A]=Rt(A,u),Be(S,A.shape)),null!=i&&(P=$(i,"prelu weights","fused matMul"));const L=(q,re)=>{const[oe,ge,Ie,ve]=re,qe=nl(K(q,Ie.shape),Ie,o);let Ye,bt;return e||r?!e&&r?(Ye=gt(qe,ge,!1,!1),bt=gt(qe,oe,!0,!1)):e&&!r?(Ye=gt(ge,qe,!1,!0),bt=gt(oe,qe,!1,!1)):(Ye=gt(ge,qe,!0,!0),bt=gt(qe,oe,!0,!0)):(Ye=gt(qe,ge,!1,!0),bt=gt(oe,qe,!0,!1)),null!=s?[Ye,bt,rl(ve,qe)]:[Ye,bt]},M={a:k,b:_,bias:A,preluActivationWeights:P},W={transposeA:e,transposeB:r,activation:o,leakyreluAlpha:a};return null==s?Mr((re,oe,ge)=>{const Ie=F.runKernel(Eu,M,W);return ge([re,oe,Ie]),{value:K(Ie,S),gradFunc:L}})(k,_):Mr((re,oe,ge,Ie)=>{const ve=F.runKernel(Eu,M,W);return Ie([re,oe,ve,ge]),{value:K(ve,S),gradFunc:L}})(k,_,A)}}),UI=O({hammingWindow_:function WI(n){return Pd(n,.54,.46)}}),Em=O({hannWindow_:function GI(n){return Pd(n,.5,.5)}}),Rm=O({frame_:function HI(n,t,e,r=!1,s=0){let o=0;const i=[];for(;o+t<=n.size;)i.push(Ue(n,o,t)),o+=e;if(r)for(;o<n.size;){const a=o+t-n.size,u=zt([Ue(n,o,t-a),Ra([a],s)]);i.push(u),o+=e}return 0===i.length?Kn([],[0,t]):K(zt(i),[i.length,t])}}),KI=O({stft_:function jI(n,t,e,r,s=Em){null==r&&(r=Tm(t));const o=Rm(n,t,e),i=ne(o,s(t));return Td(i,r)}}),qI=O({cropAndResize_:function XI(n,t,e,r,s="bilinear",o=0){const i=$(n,"image","cropAndResize"),a=$(t,"boxes","cropAndResize","float32"),u=$(e,"boxInd","cropAndResize","int32"),l=a.shape[0];return N(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),N(2===a.rank&&4===a.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${a.shape}.`),N(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${a.shape}.`),N(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),N(r[0]>=1&&r[1]>=1,()=>`cropSize must be atleast [1,1], but was ${r}`),N("bilinear"===s||"nearest"===s,()=>`method must be bilinear or nearest, but was ${s}`),F.runKernel(Ji,{image:i,boxes:a,boxInd:u},{method:s,extrapolationValue:o,cropSize:r})}}),QI=O({flipLeftRight_:function YI(n){const t=$(n,"image","flipLeftRight","float32");return N(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),F.runKernel(aa,{image:t},{})}}),JI=O({grayscaleToRGB_:function ZI(n){const t=$(n,"image","grayscaleToRGB"),e=t.rank-1,r=t.shape[e];N(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),N(1===r,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);const s=new Array(t.rank);return s.fill(1,0,e),s[e]=3,Ma(t,s)}}),tk=O({rgbToGrayscale_:function ek(n){const t=$(n,"image","RGBToGrayscale"),r=t.shape[t.rank-1];N(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),N(3===r,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${r}.`);const s=t.dtype,o=mt(t,"float32"),i=Yt([.2989,.587,.114]);let a;switch(t.rank){case 2:a=Ci("ij,j->i",o,i);break;case 3:a=Ci("ijk,k->ij",o,i);break;case 4:a=Ci("ijkl,l->ijk",o,i);break;case 5:a=Ci("ijklm,m->ijkl",o,i);break;case 6:a=Ci("ijklmn,n->ijklm",o,i);break;default:throw new Error("Not a valid tensor rank.")}return a=On(a,-1),mt(a,s)}}),rk=O({rotateWithOffset_:function nk(n,t,e=0,r=.5){const s=$(n,"image","rotateWithOffset","float32");return N(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`),F.runKernel(_c,{image:s},{radians:t,fillValue:e,center:r})}});function Ii(n,t,e,r,s,o){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==o&&(o=0);const i=n.shape[0];return e=Math.min(e,i),N(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),N(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),N(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),N(1===t.rank,()=>"scores must be a 1D tensor"),N(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),N(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:e,iouThreshold:r,scoreThreshold:s,softNmsSigma:o}}const ok=O({nonMaxSuppression_:function sk(n,t,e,r=.5,s=Number.NEGATIVE_INFINITY){const o=$(n,"boxes","nonMaxSuppression","float32"),i=$(t,"scores","nonMaxSuppression","float32"),a=Ii(o,i,e,r,s);return F.runKernel(Se,{boxes:o,scores:i},{maxOutputSize:e=a.maxOutputSize,iouThreshold:r=a.iouThreshold,scoreThreshold:s=a.scoreThreshold})}});function ik(n,t,e){const r=function ak(n,t,e){return function lk(n,t,e){let r=0,s=n.length,o=0,i=!1;for(;r<s;){o=r+(s-r>>>1);const a=e(t,n[o]);a>0?r=o+1:(s=o,i=!a)}return i?r:-r-1}(n,t,e||uk)}(n,t,e);n.splice(r<0?-(r+1):r,0,t)}function uk(n,t){return n>t?1:n<t?-1:0}function Fd(n,t,e,r,s){return Bd(n,t,e,r,s,0)}function Am(n,t,e,r,s,o){return Bd(n,t,e,r,s,0,!1,o,!0)}function Ld(n,t,e,r,s,o){return Bd(n,t,e,r,s,o,!0)}function Bd(n,t,e,r,s,o,i=!1,a=!1,u=!1){const l=[];for(let g=0;g<t.length;g++)t[g]>s&&l.push({score:t[g],boxIndex:g,suppressBeginIndex:0});l.sort(Dm);const c=o>0?-.5/o:0,d=[],h=[];for(;d.length<e&&l.length>0;){const g=l.pop(),{score:x,boxIndex:w,suppressBeginIndex:S}=g;if(x<s)break;let k=!1;for(let _=d.length-1;_>=S;--_){const A=ck(n,w,d[_]);if(A>=r){k=!0;break}if(g.score=g.score*dk(r,c,A),g.score<=s)break}g.suppressBeginIndex=d.length,k||(g.score===x?(d.push(w),h.push(g.score)):g.score>s&&ik(l,g,Dm))}const p=d.length,m=e-p;a&&m>0&&(d.push(...new Array(m).fill(0)),h.push(...new Array(m).fill(0)));const y={selectedIndices:d};return i&&(y.selectedScores=h),u&&(y.validOutputs=p),y}function ck(n,t,e){const r=n.subarray(4*t,4*t+4),s=n.subarray(4*e,4*e+4),o=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),a=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),d=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),p=(a-o)*(u-i),m=(d-l)*(h-c);if(p<=0||m<=0)return 0;const y=Math.max(o,l),g=Math.max(i,c),x=Math.min(a,d),w=Math.min(u,h),S=Math.max(x-y,0)*Math.max(w-g,0);return S/(p+m-S)}function dk(n,t,e){const r=Math.exp(t*e*e);return e<=n?r:0}function Dm(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function Md(){return(Md=(0,X.c)(function*(n,t,e,r=.5,s=Number.NEGATIVE_INFINITY){const o=$(n,"boxes","nonMaxSuppressionAsync"),i=$(t,"scores","nonMaxSuppressionAsync"),a=Ii(o,i,e,r,s);e=a.maxOutputSize,r=a.iouThreshold,s=a.scoreThreshold;const u=yield Promise.all([o.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:d}=Fd(l,c,e,r,s);return o!==n&&o.dispose(),i!==t&&i.dispose(),Yt(d,"int32")})).apply(this,arguments)}const mk=O({nonMaxSuppressionWithScore_:function fk(n,t,e,r=.5,s=Number.NEGATIVE_INFINITY,o=0){const i=$(n,"boxes","nonMaxSuppression"),a=$(t,"scores","nonMaxSuppression"),u=Ii(i,a,e,r,s,o),d=F.runKernel(Te,{boxes:i,scores:a},{maxOutputSize:e=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:o=u.softNmsSigma});return{selectedIndices:d[0],selectedScores:d[1]}}});function zd(){return(zd=(0,X.c)(function*(n,t,e,r=.5,s=Number.NEGATIVE_INFINITY,o=0){const i=$(n,"boxes","nonMaxSuppressionAsync"),a=$(t,"scores","nonMaxSuppressionAsync"),u=Ii(i,a,e,r,s,o);e=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,o=u.softNmsSigma;const l=yield Promise.all([i.data(),a.data()]),c=l[0],d=l[1],{selectedIndices:h,selectedScores:p}=Ld(c,d,e,r,s,o);return i!==n&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:Yt(h,"int32"),selectedScores:Yt(p)}})).apply(this,arguments)}const bk=O({nonMaxSuppressionPadded_:function xk(n,t,e,r=.5,s=Number.NEGATIVE_INFINITY,o=!1){const i=$(n,"boxes","nonMaxSuppression"),a=$(t,"scores","nonMaxSuppression"),u=Ii(i,a,e,r,s,null),m=F.runKernel(pe,{boxes:i,scores:a},{maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:o});return{selectedIndices:m[0],validOutputs:m[1]}}});function Vd(){return(Vd=(0,X.c)(function*(n,t,e,r=.5,s=Number.NEGATIVE_INFINITY,o=!1){const i=$(n,"boxes","nonMaxSuppressionAsync"),a=$(t,"scores","nonMaxSuppressionAsync"),u=Ii(i,a,e,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,d=u.scoreThreshold,[h,p]=yield Promise.all([i.data(),a.data()]),{selectedIndices:m,validOutputs:y}=Am(h,p,l,c,d,o);return i!==n&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:Yt(m,"int32"),validOutputs:We(y,"int32")}})).apply(this,arguments)}const Sk=O({resizeBilinear_:function Ck(n,t,e=!1,r=!1){const s=$(n,"images","resizeBilinear");N(3===s.rank||4===s.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),N(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),N(!1===r||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let o=s,i=!1;3===s.rank&&(i=!0,o=K(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,l=F.runKernel(Ql,{images:o},{alignCorners:e,halfPixelCenters:r,size:t});return i?K(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),kk=O({resizeNearestNeighbor_:function Ik(n,t,e=!1,r=!1){const s=$(n,"images","resizeNearestNeighbor");N(3===s.rank||4===s.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),N(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),N("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype"),N(!1===r||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let o=s,i=!1;3===s.rank&&(i=!0,o=K(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,l=F.runKernel(Yl,{images:o},{alignCorners:e,halfPixelCenters:r,size:t});return i?K(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),_k=O({threshold_:function Nk(n,t="binary",e=!1,r=.5){const s=$(n,"image","threshold"),u=s.shape[0]*s.shape[1];let c,d,h,p,l=ne(Yt([r]),255);if(N(3===s.rank,()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`),N(3===s.shape[2]||1===s.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`),N("int32"===s.dtype||"float32"===s.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`),N("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===s.shape[2]){[c,d,h]=Ga(s,[1,1,1],-1);const g=ne(c,.2989),x=ne(d,.587),w=ne(h,.114);p=Ce(Ce(g,x),w)}else p=n;"otsu"===t&&(l=function $k(n,t){let o,i,a,u,l,c,e=Yt([-1]),r=Yt([0]),s=Yt([0]);for(let d=0;d<n.size-1;d++){o=Ue(n,0,d+1),i=Ue(n,d+1),l=je(kt(o),t),c=je(kt(i),t);const h=kt(ne(o,Wa(0,o.size)));a=je(h,kt(o));const p=Ra(i.shape,o.size),m=Ce(Wa(0,i.size),p),y=ne(i,m);u=je(kt(y),kt(i));const g=Pe(a,u),x=Pe(a,u),w=ne(l,c);s=ne(ne(w,g),x);const S=qu(s,r);r=ys(S,s,r),e=ys(S,Yt([d]),e)}return e}(Zf(mt(Cm(p),"int32"),pr([]),256),u));const m=e?vd(p,l):qu(p,l);return mt(ne(m,255),"int32")}}),Ek=O({transform_:function Tk(n,t,e="nearest",r="constant",s=0,o){const i=$(n,"image","transform","float32"),a=$(t,"transforms","transform","float32");return N(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),N(2===a.rank&&(a.shape[0]===i.shape[0]||1===a.shape[0])&&8===a.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),N(null==o||2===o.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`),F.runKernel(Sc,{image:i,transforms:a},{interpolation:e,fillMode:r,fillValue:s,outputShape:o})}}),Ak=O({bandPart_:function Rk(n,t,e){const r=$(n,"a","bandPart");N(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[o,i]=r.shape.slice(-2);let a,u;"number"==typeof t?(N(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),N(t<=o,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`),a=$(t<0?o:t,"numLower","bandPart")):(N("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),a=ys(wd(t,0),o,Va(t,o))),"number"==typeof e?(N(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),N(e<=i,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`),u=$(e<0?i:e,"numUpper","bandPart")):(N("int32"===e.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),u=ys(wd(e,0),i,Va(e,i)));const l=K(Wa(0,o,1,"int32"),[-1,1]),c=Wa(0,i,1,"int32"),d=Pe(l,c),h=Qu(vd(d,a),um(d,gr(u))),p=Ur([o,i],r.dtype);return K(Gr(fo(K(r,[-1,o,i])).map(m=>ys(h,m,p))),s)}}),Pk=O({gramSchmidt_:function Dk(n){let t;if(Array.isArray(n)){t=!1,N(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const s=n[0].shape[0];for(let o=1;o<n.length;++o)N(n[o].shape[0]===s,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${s})`)}else t=!0,n=Ga(n,n.shape[0],0).map(s=>yt(s,[0]));N(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],r=n;for(let s=0;s<n.length;++s)e.push(F.tidy(()=>{let o=r[s];if(s>0)for(let i=0;i<s;++i){const a=ne(kt(ne(e[i],o)),e[i]);o=Pe(o,a)}return je(o,Xu(o,"euclidean"))}));return t?Gr(e,0):e}});function Pm(n,t=!1){return F.tidy(()=>{N(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],r=n.shape[1];let s=om(e),o=fs(n);const i=Kn([[1]],[1,1]);let a=fs(i);const u=e>=r?r:e;for(let l=0;l<u;++l){const c=o,d=a,h=s;[a,o,s]=F.tidy(()=>{const p=Ue(o,[l,l],[e-l,1]),m=Xu(p),y=Ue(o,[l,l],[1,1]),g=ys(qu(y,0),Kn([[-1]]),Kn([[1]])),x=Pe(y,ne(g,m)),w=je(p,x);a=1===w.shape[0]?fs(i):zt([i,Ue(w,[1,0],[w.shape[0]-1,w.shape[1]])],0);const S=gr(je(gt(g,x),m)),k=Ue(o,[l,0],[e-l,r]),_=ne(S,a),A=Dd(a);if(0===l)o=Pe(k,gt(_,gt(A,k)));else{const M=Pe(k,gt(_,gt(A,k)));o=zt([Ue(o,[0,0],[l,r]),M],0)}const P=Dd(_),L=Ue(s,[0,l],[e,s.shape[1]-l]);if(0===l)s=Pe(L,gt(gt(L,a),P));else{const M=Pe(L,gt(gt(L,a),P));s=zt([Ue(s,[0,0],[e,l]),M],1)}return[a,o,s]}),ct([c,d,h])}return!t&&e>r&&(s=Ue(s,[0,0],[e,r]),o=Ue(o,[0,0],[r,r])),[s,o]})}const Fk=O({qr_:function Ok(n,t=!1){if(N(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return Pm(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((u,l)=>u*l),r=fo(K(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),s=[],o=[];return r.forEach(u=>{const[l,c]=Pm(u,t);s.push(l),o.push(c)}),[K(Gr(s,0),n.shape),K(Gr(o,0),n.shape)]}}});var kn=function(n){return n[n.NONE=0]="NONE",n[n.MEAN=1]="MEAN",n[n.SUM=2]="SUM",n[n.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS",n}(kn||{});const Hr=O({computeWeightedLoss_:function Lk(n,t,e=kn.SUM_BY_NONZERO_WEIGHTS){const r=$(n,"losses","computeWeightedLoss");let s=null;null!=t&&(s=$(t,"weights","computeWeightedLoss"));const o=null==s?r:ne(r,s);if(e===kn.NONE)return o;if(e===kn.SUM)return kt(o);if(e===kn.MEAN){if(null==s)return Ju(o);{const i=r.size/s.size,a=je(kt(o),kt(s));return i>1?je(a,We(i)):a}}if(e===kn.SUM_BY_NONZERO_WEIGHTS){if(null==s)return je(kt(o),We(r.size));{const i=ne(s,co(r.shape)),a=mt(kt(ym(i,We(0))),"float32");return je(kt(o),a)}}throw Error(`Unknown reduction: ${e}`)}}),Mk=O({absoluteDifference_:function Bk(n,t,e,r=kn.SUM_BY_NONZERO_WEIGHTS){const s=$(n,"labels","absoluteDifference"),o=$(t,"predictions","absoluteDifference");let i=null;null!=e&&(i=$(e,"weights","absoluteDifference")),ut(s.shape,o.shape,"Error in absoluteDifference: ");const a=Dn(Pe(s,o));return Hr(a,i,r)}}),Vk=O({cosineDistance_:function zk(n,t,e,r,s=kn.SUM_BY_NONZERO_WEIGHTS){const o=$(n,"labels","cosineDistance"),i=$(t,"predictions","cosineDistance");let a=null;null!=r&&(a=$(r,"weights","cosineDistance")),ut(o.shape,i.shape,"Error in cosineDistance: ");const u=We(1),l=Pe(u,kt(ne(o,i),e,!0));return Hr(l,a,s)}}),Uk=O({hingeLoss_:function Wk(n,t,e,r=kn.SUM_BY_NONZERO_WEIGHTS){let s=$(n,"labels","hingeLoss");const o=$(t,"predictions","hingeLoss");let i=null;null!=e&&(i=$(e,"weights","hingeLoss")),ut(s.shape,o.shape,"Error in hingeLoss: ");const a=We(1);s=Pe(ne(We(2),s),a);const u=el(Pe(a,ne(s,o)));return Hr(u,i,r)}}),Hk=O({huberLoss_:function Gk(n,t,e,r=1,s=kn.SUM_BY_NONZERO_WEIGHTS){const o=$(n,"labels","huberLoss"),i=$(t,"predictions","huberLoss");let a=null;null!=e&&(a=$(e,"weights","huberLoss")),ut(o.shape,i.shape,"Error in huberLoss: ");const u=We(r),l=Dn(Pe(i,o)),c=Va(l,u),d=Pe(l,c),h=Ce(ne(We(.5),Gn(c)),ne(u,d));return Hr(h,a,s)}}),Kk=O({logLoss_:function jk(n,t,e,r=1e-7,s=kn.SUM_BY_NONZERO_WEIGHTS){const o=$(n,"labels","logLoss"),i=$(t,"predictions","logLoss");let a=null;null!=e&&(a=$(e,"weights","logLoss")),ut(o.shape,i.shape,"Error in logLoss: ");const u=We(1),l=We(r),c=gr(ne(o,za(Ce(i,l)))),d=ne(Pe(u,o),za(Ce(Pe(u,i),l))),h=Pe(c,d);return Hr(h,a,s)}}),qk=O({meanSquaredError_:function Xk(n,t,e,r=kn.SUM_BY_NONZERO_WEIGHTS){const s=$(n,"labels","meanSquaredError"),o=$(t,"predictions","meanSquaredError");let i=null;null!=e&&(i=$(e,"weights","meanSquaredError")),ut(s.shape,o.shape,"Error in meanSquaredError: ");const a=Im(s,o);return Hr(a,i,r)}}),Zk=O({sigmoidCrossEntropy_:function Qk(n,t,e,r=0,s=kn.SUM_BY_NONZERO_WEIGHTS){let o=$(n,"multiClassLabels","sigmoidCrossEntropy");const i=$(t,"logits","sigmoidCrossEntropy");let a=null;if(null!=e&&(a=$(e,"weights","sigmoidCrossEntropy")),ut(o.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const l=We(r),c=We(1),d=We(.5);o=Ce(ne(o,Pe(c,l)),ne(d,l))}const u=function Yk(n,t){const e=$(n,"labels","sigmoidCrossEntropyWithLogits"),r=$(t,"logits","sigmoidCrossEntropyWithLogits");ut(e.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=el(r),o=ne(r,e),i=cm(Wr(gr(Dn(r))));return Ce(Pe(s,o),i)}(o,i);return Hr(u,a,s)}}),tN=O({softmaxCrossEntropy_:function eN(n,t,e,r=0,s=kn.SUM_BY_NONZERO_WEIGHTS){let o=$(n,"onehotLabels","softmaxCrossEntropy");const i=$(t,"logits","softmaxCrossEntropy");let a=null;if(null!=e&&(a=$(e,"weights","softmaxCrossEntropy")),ut(o.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const l=We(r),c=We(1),d=We(o.shape[1]);o=Ce(ne(o,Pe(c,l)),je(l,d))}const u=function Jk(n,t,e=-1){if(-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return Mr((s,o,i)=>{const u=hm(o,[e],!0),l=Pe(mt(o,"float32"),u);i([s,l]);const c=gr(ne(l,s));return{value:kt(c,[e]),gradFunc:(p,m)=>{const[y,g]=m,x=mn(p.shape,[e]);return[ne(K(p,x),Pe(mt(y,"float32"),Wr(g))),ne(K(p,x),Pe(Wr(g),mt(y,"float32")))]}}})(n,t)}(o,i);return Hr(u,a,s)}}),rN=O({sparseFillEmptyRows_:function nN(n,t,e,r){const s=$(n,"indices","sparseFillEmptyRows","int32"),o=$(t,"values","sparseFillEmptyRows"),i=$(e,"denseShape","sparseFillEmptyRows","int32"),a=$(r,"defaultValue","sparseFillEmptyRows",o.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==o.rank)throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==a.rank)throw new Error(`Default value should be a scalar but received shape ${a.shape}`);const l=F.runKernel($p,{indices:s,values:o,denseShape:i,defaultValue:a});return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),oN=O({sparseReshape_:function sN(n,t,e){const r=$(n,"inputIndices","sparseReshape","int32"),s=$(t,"inputShape","sparseReshape","int32"),o=$(e,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==o.rank)throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);const a=F.runKernel(_p,{inputIndices:r,inputShape:s,newShape:o});return{outputIndices:a[0],outputShape:a[1]}}}),aN=O({sparseSegmentMean_:function iN(n,t,e){const r=$(n,"data","sparseSegmentMean"),s=$(t,"indices","sparseSegmentMean","int32"),o=$(e,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);return F.runKernel(fc,{data:r,indices:s,segmentIds:o})}}),lN=O({sparseSegmentSum_:function uN(n,t,e){const r=$(n,"data","sparseSegmentSum"),s=$(t,"indices","sparseSegmentSum","int32"),o=$(e,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);return F.runKernel(mc,{data:r,indices:s,segmentIds:o})}}),dN=O({stringNGrams_:function cN(n,t,e,r,s,o,i,a){const u=$(n,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=$(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const h=F.runKernel(bc,{data:u,dataSplits:l},{separator:e,nGramWidths:r,leftPad:s,rightPad:o,padWidth:i,preserveShortSequences:a});return{nGrams:h[0],nGramsSplits:h[1]}}}),pN=O({stringSplit_:function hN(n,t,e=!0){const r=$(n,"input","stringSplit","string"),s=$(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a=F.runKernel(Ep,{input:r,delimiter:s},{skipEmpty:e});return{indices:a[0],values:a[1],shape:a[2]}}}),mN=O({stringToHashBucketFast_:function fN(n,t){const e=$(n,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return F.runKernel(Rp,{input:e},r)}}),yN=O({staticRegexReplace_:function gN(n,t,e,r=!0){const s=$(n,"input","staticRegexReplace","string");return F.runKernel($u,{x:s},{pattern:t,rewrite:e,replaceGlobal:r})}}),xN={fft:_d,ifft:tl,rfft:Td,irfft:Sm},bN={hammingWindow:UI,hannWindow:Em,frame:Rm,stft:KI},bs={flipLeftRight:QI,grayscaleToRGB:JI,resizeNearestNeighbor:kk,resizeBilinear:Sk,rgbToGrayscale:tk,rotateWithOffset:rk,cropAndResize:qI,nonMaxSuppression:ok,nonMaxSuppressionAsync:function hk(n,t,e){return Md.apply(this,arguments)},nonMaxSuppressionWithScore:mk,nonMaxSuppressionWithScoreAsync:function gk(n,t,e){return zd.apply(this,arguments)},nonMaxSuppressionPadded:bk,nonMaxSuppressionPaddedAsync:function wk(n,t,e){return Vd.apply(this,arguments)},threshold:_k,transform:Ek},wN={bandPart:Ak,gramSchmidt:Pk,qr:Fk},vN={absoluteDifference:Mk,computeWeightedLoss:Hr,cosineDistance:Vk,hingeLoss:Uk,huberLoss:Hk,logLoss:Kk,meanSquaredError:qk,sigmoidCrossEntropy:Zk,softmaxCrossEntropy:tN},CN={sparseFillEmptyRows:rN,sparseReshape:oN,sparseSegmentMean:aN,sparseSegmentSum:lN},SN={stringNGrams:dN,stringSplit:pN,stringToHashBucketFast:mN,staticRegexReplace:yN},IN=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function Wd(n,t){const e=n[0].length;n.forEach((s,o)=>{N(s.length===e,()=>`Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`)}),N(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const r=n[0];n.forEach((s,o)=>{for(let i=0;i<e;i++)N(i===t||s[i]===r[i],()=>`Error in concat${e}D: Shape of tensors[${o}] (${s}) does not match the shape of the rest (${r}) along the non-concatenated axis ${o}.`)})}function Xn(n,t){const e=n[0].slice();for(let r=1;r<n.length;r++)e[t]+=n[r][t];return e}var yr=function(n){return n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS",n}(yr||{});function Om(n,t,e){let r=new Array;if(null==e&&null==t)return r;if(null==t)for(;r.length<n+e.length;)r.push(-1);else r=t.slice();if(null==e)return r;if(n+e.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n+e.length}, but shape.rank = ${r.length}`);for(let s=1;s<e.length;++s){const o=e[s],i=r[r.length-e.length+s],a=r[i];if(o>=0)if(a>=0){if(a!==o)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+n}] = ${o} but shape[${s+n}] = ${a}`)}else r[i]=o}return r}function Fm(n){const t={FIRST_DIM_SIZE:yr.FIRST_DIM_SIZE,VALUE_ROWIDS:yr.VALUE_ROWIDS,ROW_LENGTHS:yr.ROW_LENGTHS,ROW_SPLITS:yr.ROW_SPLITS,ROW_LIMITS:yr.ROW_LIMITS,ROW_STARTS:yr.ROW_STARTS},e=[];for(const r of n){if(!(r in t))break;e.push(t[r])}return e}function Lm(n){return 0===n.length?0:n[0]===yr.FIRST_DIM_SIZE?n.length-1:n.length}function Bm(n,t){if(null==n||null==t)return;const e=n.length,r=t.length;if(e>=r)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(e,r-1);++s){const o=n[s],i=t[s+1];if(o>=0&&i>=0&&1!==o&&o!==i)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-n.length}] = ${o} but ragged tensor input.flatValues.shape[${s-n.length}] = ${i}`)}}const Ud=30;function il(n){return n<=Ud?n:Lo(n,Math.floor(Math.sqrt(n)))}function Gd(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function Ha(n,t,e,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(n[0]/e),s=s.concat(n.slice(1));else{s=s.concat(n[0]);const o=t.length;for(let i=0;i<o;++i)s=s.concat([n[i+1]/t[i],t[i]]);s=s.concat(n.slice(o+1))}return s}function ja(n,t,e=!0){const r=[];if(e){r.push(t);for(let s=t+1;s<n;++s)s<=2*t?(r.push(s),r.push(s-(t+1))):r.push(s)}else{const s=[],o=[];for(let i=1;i<n;++i)i>=2*t+1||i%2==1?o.push(i):s.push(i);r.push(...s),r.push(0),r.push(...o)}return r}function Ka(n,t,e,r=!0){const s=[];s.push(r?n[0]/e:n[0]*e);for(let o=1;o<n.length;++o)s.push(o<=t.length?r?t[o-1]*n[o]:n[o]/t[o-1]:n[o]);return s}function Hd(n,t){const e=[0];for(let r=0;r<t;++r)e.push(n[r][0]);return e}function jd(n,t,e){const r=n.slice(0,1);for(let s=0;s<e;++s)r.push(n[s+1]-t[s][0]-t[s][1]);return r}function Kd(n,t){const e=n.shape.length,r=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${e}`);if(0===j(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const s=t.shape,o=s[s.length-1];let i=1;for(let d=0;d<s.length-1;++d)i*=s[d];const a=n.shape,u=s.slice();u.pop();let l=1;for(let d=o;d<e;++d)l*=a[d],u.push(a[d]);const c=[...pt(n.shape).map(d=>d/l),1].slice(0,o);return[u,i,l,c]}const Xd=1.7580993408473768,qd=1.0507009873554805,Yd=.3275911,Qd=.254829592,Zd=-.284496736,Jd=1.421413741,eh=-1.453152027,th=1.061405429;function mo(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let r=0;r<e.length;r+=2)e[r]=n[r/2],e[r+1]=t[r/2];return e}function NN(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let r=0;r<n.length;r+=2)t[r/2]=n[r],e[r/2]=n[r+1];return{real:t,imag:e}}function $N(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),r=new Float32Array(t);for(let s=0;s<n.length;s+=4)e[Math.floor(s/4)]=n[s],r[Math.floor(s/4)]=n[s+1];return{real:e,imag:r}}function _N(n){const t=Math.floor(n.length/4),e=new Float32Array(t),r=new Float32Array(t);for(let s=2;s<n.length;s+=4)e[Math.floor(s/4)]=n[s],r[Math.floor(s/4)]=n[s+1];return{real:e,imag:r}}function TN(n,t){return{real:n[2*t],imag:n[2*t+1]}}function EN(n,t,e,r){n[2*r]=t,n[2*r+1]=e}function RN(n,t){const e=new Float32Array(n/2),r=new Float32Array(n/2);for(let s=0;s<Math.ceil(n/2);s++){const o=(t?2:-2)*Math.PI*(s/n);e[s]=Math.cos(o),r[s]=Math.sin(o)}return{real:e,imag:r}}function AN(n,t,e){const r=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(r),imag:Math.sin(r)}}const nh="->",DN=/->/g,Mm=",",zm="...";function rh(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(DN,"").length)/nh.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${nh}").`);const[r,s]=n.split(nh);N(-1===r.indexOf(zm),()=>`The ellipsis notation ("${zm}") is not supported yet.`);const o=r.split(Mm),i=o.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const a=[];for(let h=0;h<s.length;++h){const p=s[h];if(!o.some(m=>-1!==m.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===a.indexOf(p)&&a.push(p)}for(let h=0;h<r.length;++h){const p=r[h];-1===a.indexOf(p)&&p!==Mm&&a.push(p)}const u=new Array(o.length);for(let h=0;h<i;++h){if(new Set(o[h].split("")).size!==o[h].length)throw new Error(`Found duplicate axes in input component ${o[h]}. Support for duplicate axes in input is not implemented yet.`);u[h]=[];for(let p=0;p<o[h].length;++p)u[h].push(a.indexOf(o[h][p]))}const l=a.length,d=[];for(let h=s.length;h<l;++h)d.push(h);return{allDims:a,summedDims:d,idDims:u}}function sh(n,t){let e=new Array(n);e.fill(-1);for(let s=0;s<t.length;++s)e[t[s]]=s;const r=[];for(let s=0;s<n;++s)-1===e[s]&&r.push(s);return e=e.filter(s=>-1!==s),{permutationIndices:e,expandDims:r}}function oh(n,t,e){const r=new Array(n);for(let s=0;s<e.length;++s){const o=e[s].shape;for(let i=0;i<t[s].length;++i)void 0===r[t[s][i]]?r[t[s][i]]=o[i]:N(r[t[s][i]]===o[i],()=>`Expected dimension ${r[t[s][i]]} at axis ${i} of input shaped ${JSON.stringify(o)}, but got dimension ${o[i]}`)}}function ih(n,t){const e=n,r=[];let s=0;0===n.length&&e.push(-1),s=n.length+1;for(let i=0;i<s;++i)r.push([]);const o=[];for(let i=0;i<e.length;++i){const u=PN(t,e[i]);for(const l of u)-1===o.indexOf(l)&&(r[i].push(l),o.push(l))}return{path:e,steps:r}}function ah(n){return n.every((t,e)=>t===e)}function PN(n,t){const e=[];for(let r=0;r<n.length;++r)(0===n[r].length||-1!==n[r].indexOf(t)||-1===t)&&e.push(r);return e}function uh(n,t,e=0){let r=[];if("number"==typeof t)N(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(n.shape[e]/t);else{N(t.reduce((i,a)=>(-1===a&&(i+=1),i),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const i=t.reduce((a,u)=>u>0?a+u:a);t[o]=n.shape[e]-i}N(n.shape[e]===t.reduce((i,a)=>i+a),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}function Vm(n){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${n}`}function Wm(n,t){return`indices(${n}, 0) is invalid: ${t} < 0`}function Um(n,t,e){return`indices(${n}, 0) is invalid: ${t} >= ${e}`}function Gm(n,t){return`only one output dimension may be -1, not both ${n} and ${t}`}function Hm(n,t){return`size ${n} must be non-negative, not ${t}`}function jm(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Km(n,t){return`Input to reshape is a SparseTensor with ${j(n)}\n  dense values, but the requested shape requires a multiple of ${j(t)}. inputShape=${n} outputShape= ${t}`}function Xm(n,t){return`Input to reshape is a tensor with ${j(n)} dense values, but the requested shape has ${j(t)}. inputShape=${n} outputShape=${t}`}function lh(){return"segment ids must be >= 0"}function qm(){return"segment ids are not increasing"}function Ym(n,t){return`Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Qm(n,t,e){return`Bad: indices[${n}] == ${t} out of range [0, ${e})`}function Zm(n,t){let r,e=!1;for(n<=Ud?(r=n,e=!0):r=Lo(n,Math.floor(Math.sqrt(n)));!e;)r>t||r===n?e=!0:r=Lo(n,r+1);return r}function ch(n,t,e){const r=[],s=n.length;for(let o=0;o<s;o++)r.push(o!==t?n[o]:e);return r}function dh(n,t,e,r){const s=t.shape.length,o=n.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>o)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${o}).`);if(e<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${e}).`);for(let d=0;d<r;++d)if(n.shape[d]!==t.shape[d])throw new Error(`x.shape[${d}]: ${n.shape[d]} should be equal to indices.shape[${d}]: ${t.shape[d]}.`);const i=n.shape[e],a=[];let u=1,l=1,c=1;for(let d=0;d<r;++d)a.push(n.shape[d]),u*=n.shape[d];for(let d=r;d<e;d++)a.push(n.shape[d]),l*=n.shape[d];for(let d=r;d<s;d++)a.push(t.shape[d]);for(let d=e+1;d<o;d++)a.push(n.shape[d]),c*=n.shape[d];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:a}}function lr(n){try{return n.map(t=>Fr(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function Jm(n){return n.map(t=>us(t))}!function Tw(){for(const n of _w)yw(n)}(),z().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var eg,Fn=function(n){return n[n.DT_INVALID=0]="DT_INVALID",n[n.DT_FLOAT=1]="DT_FLOAT",n[n.DT_DOUBLE=2]="DT_DOUBLE",n[n.DT_INT32=3]="DT_INT32",n[n.DT_UINT8=4]="DT_UINT8",n[n.DT_INT16=5]="DT_INT16",n[n.DT_INT8=6]="DT_INT8",n[n.DT_STRING=7]="DT_STRING",n[n.DT_COMPLEX64=8]="DT_COMPLEX64",n[n.DT_INT64=9]="DT_INT64",n[n.DT_BOOL=10]="DT_BOOL",n[n.DT_QINT8=11]="DT_QINT8",n[n.DT_QUINT8=12]="DT_QUINT8",n[n.DT_QINT32=13]="DT_QINT32",n[n.DT_BFLOAT16=14]="DT_BFLOAT16",n[n.DT_QINT16=15]="DT_QINT16",n[n.DT_QUINT16=16]="DT_QUINT16",n[n.DT_UINT16=17]="DT_UINT16",n[n.DT_COMPLEX128=18]="DT_COMPLEX128",n[n.DT_HALF=19]="DT_HALF",n[n.DT_RESOURCE=20]="DT_RESOURCE",n[n.DT_VARIANT=21]="DT_VARIANT",n[n.DT_UINT32=22]="DT_UINT32",n[n.DT_UINT64=23]="DT_UINT64",n[n.DT_FLOAT_REF=101]="DT_FLOAT_REF",n[n.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",n[n.DT_INT32_REF=103]="DT_INT32_REF",n[n.DT_UINT8_REF=104]="DT_UINT8_REF",n[n.DT_INT16_REF=105]="DT_INT16_REF",n[n.DT_INT8_REF=106]="DT_INT8_REF",n[n.DT_STRING_REF=107]="DT_STRING_REF",n[n.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",n[n.DT_INT64_REF=109]="DT_INT64_REF",n[n.DT_BOOL_REF=110]="DT_BOOL_REF",n[n.DT_QINT8_REF=111]="DT_QINT8_REF",n[n.DT_QUINT8_REF=112]="DT_QUINT8_REF",n[n.DT_QINT32_REF=113]="DT_QINT32_REF",n[n.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",n[n.DT_QINT16_REF=115]="DT_QINT16_REF",n[n.DT_QUINT16_REF=116]="DT_QUINT16_REF",n[n.DT_UINT16_REF=117]="DT_UINT16_REF",n[n.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",n[n.DT_HALF_REF=119]="DT_HALF_REF",n[n.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",n[n.DT_VARIANT_REF=121]="DT_VARIANT_REF",n[n.DT_UINT32_REF=122]="DT_UINT32_REF",n[n.DT_UINT64_REF=123]="DT_UINT64_REF",n}(Fn||{});!function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(eg||(eg={}));const hh={};function tg(n){return hh[n]}function v(n,t,e,r,s){const o=t.inputParams[n];if(o&&void 0!==o.inputIndexStart){const a=o.inputIndexStart,u=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?a+1:o.inputIndexEnd,l=a<0?t.inputNames.length+a:a;if("tensor"===o.type)return Xt(t.inputNames[l],e,r,s);if("tensors"===o.type){const h=t.inputs.slice(a,u);return t.inputNames.slice(a,u).filter((m,y)=>{var g;return"NoOp"!==(null===(g=h[y])||void 0===g?void 0:g.op)}).map(m=>Xt(m,e,r,s))}const c=Xt(t.inputNames[l],e,r,s),d=c.dataSync();return"number"===o.type?d[0]:$r(c.shape,d)}const i=t.attrParams[n];return i&&i.value}function Xt(n,t,e,r){const[s,o]=Nn(n,e);if(null!=r){const a=r.getHashTableHandleByName(s);if(null!=a)return a}const i=e.currentContextIds.find(a=>!!t[al(s,a)]);return void 0!==i?t[al(s,i)][o]:void 0}function ng(n,t,e){return t[al(n,e.currentContextId)]}function jr(n,t){const[e,r,s]=Nn(n,t);return[al(e,t&&t.currentContextId),r,s]}function al(n,t){return t?`${n}-${t}`:n}function Nn(n,t){if(""===n)return["",0,void 0];const e=null!=t&&null!=t.parseNodeNameCache;if(e){const o=t.parseNodeNameCache.get(n);if(null!=o)return o}const r=n.split(":");let s;if(1===r.length)s=[n,0,void 0];else{const i=3===r.length?r[1]:void 0;s=[r[0],Number(r[r.length-1]),i]}return e&&t.parseNodeNameCache.set(n,s),s}function ul(n,t,e){let r=v("pad",n,t,e);if("explicit"===r){r=v("explicitPaddings",n,t,e);const s=[[0,0],[0,0],[0,0],[0,0]];for(let o=0;o<4;o++)s[o][0]=r[2*o],s[o][1]=r[2*o+1];return s}return r}function Kr(n){return n.kept?n:fs(n)}const ON=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],FN=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],LN=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],BN=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],MN=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],zN=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],VN=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],WN=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],UN=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],GN=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],HN=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],jN=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],KN=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],XN=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],qN=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],YN=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],QN=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],ZN=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],JN=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class rg{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[Ne,Oe,fe,V,ee,ce,Y,J,me,xe,rt,Nt,Me,yn,cn,He,Ke,et,Q].map(r=>r.json));this.opMappers=e.reduce((r,s)=>(r[s.tfOpName]=s,r),{})}transformGraph(t,e={}){const s=[],o=[],i=[],a=t.node.reduce((y,g)=>(y[g.name]=this.mapNode(g),g.op.startsWith("Placeholder")?s.push(y[g.name]):"Const"===g.op?o.push(y[g.name]):(null==g.input||0===g.input.length)&&i.push(y[g.name]),y),{});let u=[];const l=[];let c={},d={};null!=e&&(c=this.mapSignatureEntries(e.inputs),d=this.mapSignatureEntries(e.outputs));const h=Object.keys(a);h.forEach(y=>{const g=a[y];g.inputNames.forEach((x,w)=>{const[S,,k]=jr(x),_=a[S];if(null!=_.outputs){const A=_.outputs.indexOf(k);-1!==A&&(g.inputNames[w]=`${S}:${A}`)}g.inputs.push(_),_.children.push(g)})}),0===Object.keys(d).length?h.forEach(y=>{const g=a[y];0===g.children.length&&l.push(g)}):Object.keys(d).forEach(y=>{const[g]=jr(y),x=a[g];null!=x&&(x.signatureKey=d[y],l.push(x))}),Object.keys(c).length>0?Object.keys(c).forEach(y=>{const[g]=jr(y),x=a[g];x&&(x.signatureKey=c[y],u.push(x))}):u=s;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce((y,g)=>(y[g.signature.name]=this.mapFunction(g),y),{}));const m={nodes:a,inputs:u,outputs:l,weights:o,placeholders:s,signature:e,functions:p};return i.length>0&&(m.initNodes=i),m}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,r)=>(e[t[r].name]=r,e),{})}mapNode(t){const e=tg(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const r={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(s=>s.startsWith("^")?s.slice(1):s),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(r.inputParams=e.inputs.reduce((s,o)=>(s[o.name]={type:o.type,inputIndexStart:o.start,inputIndexEnd:o.end},s),{})),null!=e.attrs&&(r.attrParams=e.attrs.reduce((s,o)=>{const i=o.type;let a;switch(o.type){case"string":a=ph(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=ph(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"string[]":a=vh(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=vh(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number":a=mh(t.attr,o.tfName,o.defaultValue||0),void 0===a&&o.tfDeprecatedName&&(a=mh(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number[]":a=wh(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=wh(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool":a=fh(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=fh(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool[]":a=Sh(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=Sh(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape":a=bh(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=bh(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape[]":a=Ch(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=Ch(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype":a=yh(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=yh(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype[]":a=xh(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=xh(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"func":a=og(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=og(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`)}return s[o.name]={value:a,type:i},s},{})),r}mapFunction(t){const e=t.nodeDef,s=[];let o={};null!=e&&(o=e.reduce((d,h)=>(d[h.name]=this.mapNode(h),"Const"===h.op&&s.push(d[h.name]),d),{}));const i=[],a=[];t.signature.inputArg.forEach(d=>{const[h]=jr(d.name),p={name:h,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:gh(d.type),type:"dtype"}},children:[]};p.signatureKey=d.name,i.push(p),o[h]=p}),Object.keys(o).forEach(d=>{const h=o[d];h.inputNames.forEach((p,m)=>{const[y,,g]=jr(p),x=o[y];if(null!=x.outputs){const w=x.outputs.indexOf(g);-1!==w&&(h.inputNames[m]=`${y}:${w}`)}h.inputs.push(x),x.children.push(h)})});const l=t.ret;t.signature.outputArg.forEach(d=>{const[h,p]=jr(l[d.name]),m=o[h];null!=m&&(m.defaultOutput=p,a.push(m))});const c=this.mapArgsToSignature(t);return{nodes:o,inputs:i,outputs:a,weights:s,placeholders:[],signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,r)=>(e[r.name]=this.mapArgToTensorInfo(r),e),{}),outputs:t.signature.outputArg.reduce((e,r)=>(e[r.name]=this.mapArgToTensorInfo(r,t.ret),e),{})}}mapArgToTensorInfo(t,e){let r=t.name;return null!=e&&(r=e[r]),{name:r,dtype:t.type}}}function sg(n,t){const e=Array.isArray(n)?String.fromCharCode.apply(null,n):function e$(n){const t=z().global;if(typeof t.atob<"u")return t.atob(n);if(typeof Buffer<"u")return new Buffer(n,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(n);return t?e:e.toLowerCase()}function ph(n,t,e,r=!1){const s=n[t];return null!=s?sg(s.s,r):e}function fh(n,t,e){const r=n[t];return r?r.b:e}function mh(n,t,e){const r=n[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:e;return"number"==typeof s?s:parseInt(s,10)}function gh(n){switch("string"==typeof n&&(n=Fn[n]),n){case Fn.DT_FLOAT:case Fn.DT_HALF:return"float32";case Fn.DT_INT32:case Fn.DT_INT64:case Fn.DT_INT8:case Fn.DT_UINT8:return"int32";case Fn.DT_BOOL:return"bool";case Fn.DT_DOUBLE:return"float32";case Fn.DT_STRING:return"string";case Fn.DT_COMPLEX64:case Fn.DT_COMPLEX128:return"complex64";default:return null}}function og(n,t,e){const r=n[t];return r&&r.func?r.func.name:e}function yh(n,t,e){const r=n[t];return r&&r.type?gh(r.type):e}function xh(n,t,e){const r=n[t];return r&&r.list&&r.list.type?r.list.type.map(s=>gh(s)):e}function ig(n){if(!n.unknownRank)return null!=n.dim?n.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function bh(n,t,e){const r=n[t];return r&&r.shape?ig(r.shape):e}function wh(n,t,e){const r=n[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(s=>"number"==typeof s?s:parseInt(s,10)):e}function vh(n,t,e,r=!1){const s=n[t];return s&&s.list&&s.list.s?s.list.s.map(o=>sg(o,r)):e}function Ch(n,t,e){const r=n[t];return r&&r.list&&r.list.shape?r.list.shape.map(s=>ig(s)):e}function Sh(n,t,e){const r=n[t];return r&&r.list&&r.list.b?r.list.b:e}class t${constructor(t,e,r){this.node=t,this.tensorMap=e,this.context=r,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(s=>this.getInput(s)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((s,o)=>(s[o]=this.getAttr(o),s),{}))}getInput(t){return Xt(t,this.tensorMap,this.context)}getAttr(t,e){const r=this.node.rawAttrs[t];if(null!=r.tensor)return Xt(t,this.tensorMap,this.context);if(null!=r.i||null!=r.f)return mh(this.node.rawAttrs,t,e);if(null!=r.s)return ph(this.node.rawAttrs,t,e);if(null!=r.b)return fh(this.node.rawAttrs,t,e);if(null!=r.shape)return bh(this.node.rawAttrs,t,e);if(null!=r.type)return yh(this.node.rawAttrs,t,e);if(null!=r.list){if(null!=r.list.i||null!=r.list.f)return wh(this.node.rawAttrs,t,e);if(null!=r.list.s)return vh(this.node.rawAttrs,t,e);if(null!=r.list.shape)return Ch(this.node.rawAttrs,t,e);if(null!=r.list.b)return Sh(this.node.rawAttrs,t,e);if(null!=r.list.type)return xh(this.node.rawAttrs,t,e)}return e}}function qn(n,t,e=""){if("number"!=typeof n&&"number"!=typeof t){N(n.length===t.length,()=>e+` Shapes ${n} and ${t} must match`);for(let r=0;r<n.length;r++){const s=n[r],o=t[r];N(s<0||o<0||s===o,()=>e+` Shapes ${n} and ${t} must match`)}}}function ag(n){return!("number"==typeof n||n.some(t=>t<0))}function Xa(n,t,e){let r=Ih(n,e);const s=!ag(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach(o=>{r=Ih(o.shape,r)}),!ag(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function Ih(n,t){if("number"==typeof n)return t;if("number"==typeof t)return n;if(n.length!==t.length)throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);const e=[];for(let r=0;r<n.length;++r){const s=n[r],o=t[r];if(s>=0&&o>=0&&s!==o)throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);e[r]=s>=0?s:o}return e}class s${constructor(t,e,r,s,o,i,a){this.name=t,this.dtype=e,this.maxSize=r,this.elementShape=s,this.identicalElementShapes=o,this.dynamicSize=i,this.clearAfterRead=a,this.tensors=[],this.closed_=!1,this.idTensor=We(0),fr(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const r=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=e.shape),qn(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),r.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(r.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);r.tensor=e,fr(e),r.written=!0,this.tensors[t]=r}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((r,s)=>this.write(r,e[s]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let s=0;s<this.size();s++)t.push(s)}if(0===t.length)return pr([],[0].concat(this.elementShape));const r=this.readMany(t);return qn(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),Gr(r,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return pr([],[0].concat(this.elementShape));const e=[];for(let s=0;s<this.size();s++)e.push(s);const r=this.readMany(e);return qn(this.elementShape,r[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${r[0].shape})`),zt(r,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(!this.dynamicSize&&r>=this.maxSize)throw new Error(`Max index must be < array size (${r}  vs. ${this.maxSize})`);this.writeMany(t,fo(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let r=0;const s=t.map(u=>(r+=u,r));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const o=0===r?0:e.size/r,i=[];Ae(()=>{e=K(e,[1,r,o]);for(let u=0;u<t.length;++u)i[u]=K(Ue(e,[0,0===u?0:s[u-1],0],[1,t[u],o]),this.elementShape);return i});const a=[];for(let u=0;u<t.length;u++)a[u]=u;this.writeMany(a,i)}}class go{get id(){return this.idTensor.id}constructor(t,e,r,s=-1){this.tensors=t,this.elementShape=e,this.elementDtype=r,null!=t&&t.forEach(o=>{if(r!==o.dtype)throw new Error(`Invalid data types; op elements ${r}, but list elements ${o.dtype}`);qn(e,o.shape,"TensorList shape mismatch: "),fr(o)}),this.idTensor=We(0),this.maxNumElements=s,fr(this.idTensor)}copy(){return new go([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,r=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==r&&this.tensors.length!==r)throw new Error(`Operation expected a list with ${r} elements but got a list with ${this.tensors.length} elements.`);qn(t,this.elementShape,"TensorList shape mismatch: ");const s=Xa(this.elementShape,this.tensors,t);return Ae(()=>{const o=this.tensors.map(i=>K(i,s));return Gr(o,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const r=Xa(this.elementShape,this.tensors,t),s=this.tensors.pop();return s.kept=!1,qn(s.shape,t,"TensorList shape mismatch: "),K(s,r)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(qn(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");fr(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new go([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let r=0;r<Math.min(this.tensors.length,t);++r)e.tensors[r]=this.tensors[r];return e}getItem(t,e,r){if(r!==this.elementDtype)throw new Error(`Invalid data types; op elements ${r}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);qn(this.tensors[t].shape,e,"TensorList shape mismatch: ");const s=Xa(this.elementShape,this.tensors,e);return K(this.tensors[t],s)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);qn(this.elementShape,e.shape,"TensorList shape mismatch: "),fr(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,r){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);qn(this.elementShape,r,"TensorList shape mismatch: "),t=t.slice(0,this.size());const s=Xa(this.elementShape,this.tensors,r);return 0===t.length?pr([],[0].concat(s)):Ae(()=>{const o=t.map(i=>K(this.tensors[i],s));return Gr(o,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);qn(this.elementShape,e,"TensorList shape mismatch: ");const r=Xa(this.elementShape,this.tensors,e);return 0===this.size()?pr([],[0].concat(r)):Ae(()=>{const s=this.tensors.map(o=>K(o,r));return zt(s,0)})}}const l$=function(){var n=(0,X.c)(function*(t,e,r){switch(t.op){case"If":case"StatelessIf":{const s=v("thenBranch",t,e,r),o=v("elseBranch",t,e,r),i=v("cond",t,e,r),a=v("args",t,e,r);return(yield i.data())[0]?r.functionMap[s].executeFunctionAsync(a,r.tensorArrayMap,r.tensorListMap):r.functionMap[o].executeFunctionAsync(a,r.tensorArrayMap,r.tensorListMap)}case"While":case"StatelessWhile":{const s=v("body",t,e,r),o=v("cond",t,e,r),i=v("args",t,e,r),a=yield r.functionMap[o].executeFunctionAsync(i,r.tensorArrayMap,r.tensorListMap),u=i.map(d=>d.id);let l=yield a[0].data();a.forEach(d=>{!d.kept&&-1===u.indexOf(d.id)&&d.dispose()});let c=i;for(;l[0];){const d=c;c=yield r.functionMap[s].executeFunctionAsync(c,r.tensorArrayMap,r.tensorListMap);const h=c.map(m=>m.id);d.forEach(m=>{!m.kept&&-1===u.indexOf(m.id)&&-1===h.indexOf(m.id)&&m.dispose()});const p=yield r.functionMap[o].executeFunctionAsync(c,r.tensorArrayMap,r.tensorListMap);l=yield p[0].data(),p.forEach(m=>{!m.kept&&-1===u.indexOf(m.id)&&-1===h.indexOf(m.id)&&m.dispose()})}return c}case"LoopCond":return[Kr(v("pred",t,e,r))];case"Switch":{const s=v("pred",t,e,r);let o=v("data",t,e,r);return o.kept||(o=Kr(o)),(yield s.data())[0]?[void 0,o]:[o,void 0]}case"Merge":{const s=t.inputNames.find(o=>void 0!==Xt(o,e,r));return s?[Kr(Xt(s,e,r))]:void 0}case"Enter":{const s=v("frameName",t,e,r),o=v("tensor",t,e,r);return r.enterFrame(s),[Kr(o)]}case"Exit":{const s=v("tensor",t,e,r);return r.exitFrame(),[Kr(s)]}case"NextIteration":{const s=v("tensor",t,e,r);return r.nextIteration(),[Kr(s)]}case"TensorArrayV3":{const s=v("size",t,e,r),o=v("dtype",t,e,r),i=v("elementShape",t,e,r),a=v("dynamicSize",t,e,r),u=v("clearAfterRead",t,e,r),l=v("identicalElementShapes",t,e,r),c=v("name",t,e,r),d=new s$(c,o,s,i,l,a,u);return r.addTensorArray(d),[d.idTensor,We(1)]}case"TensorArrayWriteV3":{const s=v("tensorArrayId",t,e,r),o=v("index",t,e,r),i=v("tensor",t,e,r),a=r.getTensorArray(s.id);return a.write(o,i),[a.idTensor]}case"TensorArrayReadV3":{const s=v("tensorArrayId",t,e,r),o=v("index",t,e,r);return[r.getTensorArray(s.id).read(o)]}case"TensorArrayGatherV3":{const s=v("tensorArrayId",t,e,r),o=v("indices",t,e,r),i=v("dtype",t,e,r);return[r.getTensorArray(s.id).gather(o,i)]}case"TensorArrayScatterV3":{const s=v("tensorArrayId",t,e,r),o=v("indices",t,e,r),i=v("tensor",t,e,r),a=r.getTensorArray(s.id);return a.scatter(o,i),[a.idTensor]}case"TensorArrayConcatV3":{const s=v("tensorArrayId",t,e,r),o=r.getTensorArray(s.id),i=v("dtype",t,e,r);return[o.concat(i)]}case"TensorArraySplitV3":{const s=v("tensorArrayId",t,e,r),o=v("tensor",t,e,r),i=v("lengths",t,e,r),a=r.getTensorArray(s.id);return a.split(i,o),[a.idTensor]}case"TensorArraySizeV3":{const s=v("tensorArrayId",t,e,r);return[We(r.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=v("tensorArrayId",t,e,r),o=r.getTensorArray(s.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const s=v("tensorListId",t,e,r),o=v("index",t,e,r),i=v("tensor",t,e,r),a=r.getTensorList(s.id);return a.setItem(o,i),[a.idTensor]}case"TensorListGetItem":{const s=v("tensorListId",t,e,r),o=v("index",t,e,r),i=v("elementShape",t,e,r),a=v("elementDType",t,e,r);return[r.getTensorList(s.id).getItem(o,i,a)]}case"TensorListScatterV2":case"TensorListScatter":{const s=v("indices",t,e,r),u=function a$(n,t,e,r){if(t.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const o=new go([],e,n.dtype,r),i=fo(n,0);return t.forEach((a,u)=>{o.setItem(a,i[u])}),o}(v("tensor",t,e,r),s,v("elementShape",t,e,r),v("numElements",t,e,r));return r.addTensorList(u),[u.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=v("elementShape",t,e,r),o=v("elementDType",t,e,r);let i;i="TensorListReserve"===t.op?"numElements":"maxNumElements";const a=v(i,t,e,r),l=function i$(n,t,e,r){return new go([],n,t,r)}(s,o,0,"TensorListReserve"===t.op?-1:a);return r.addTensorList(l),[l.idTensor]}case"TensorListGather":{const s=v("tensorListId",t,e,r),o=v("indices",t,e,r),i=v("elementShape",t,e,r),a=v("elementDType",t,e,r);return[r.getTensorList(s.id).gather(o,a,i)]}case"TensorListStack":{const s=v("tensorListId",t,e,r),o=v("elementShape",t,e,r),i=v("elementDType",t,e,r),a=v("numElements",t,e,r);return[r.getTensorList(s.id).stack(o,i,a)]}case"TensorListFromTensor":{const a=function o$(n,t,e){const r=n.dtype;if(n.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);if(n.dtype!==e)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);qn(n.shape.slice(1),t,"TensorList shape mismatch: ");const o=fo(n);return new go(o,t,r)}(v("tensor",t,e,r),v("elementShape",t,e,r),v("elementDType",t,e,r));return r.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=v("tensorListId",t,e,r),o=r.getTensorList(s.id),i=v("dtype",t,e,r),a=v("elementShape",t,e,r);return[o.concat(i,a)]}case"TensorListPushBack":{const s=v("tensorListId",t,e,r),o=v("tensor",t,e,r),i=r.getTensorList(s.id);return i.pushBack(o),[i.idTensor]}case"TensorListPopBack":{const s=v("tensorListId",t,e,r),o=v("elementShape",t,e,r),i=v("elementDType",t,e,r);return[r.getTensorList(s.id).popBack(o,i)]}case"TensorListSplit":{const s=v("tensor",t,e,r),o=v("elementShape",t,e,r),a=function u$(n,t,e){let r=0;const s=t.map(c=>(r+=c,r));if(r!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${n.shape}`);const i=Ih(n.shape.slice(1),e),a=0===r?0:n.size/r,u=Ae(()=>{const c=[];n=K(n,[1,r,a]);for(let d=0;d<t.length;++d)c[d]=K(Ue(n,[0,0===d?0:s[d-1],0],[1,t[d],a]),i);return n.dispose(),c}),l=new go([],e,n.dtype,t.length);for(let c=0;c<u.length;c++)l.setItem(c,u[c]);return l}(s,v("lengths",t,e,r),o);return r.addTensorList(a),[a.idTensor]}case"TensorListLength":{const s=v("tensorListId",t,e,r);return[We(r.getTensorList(s.id).size(),"int32")]}case"TensorListResize":{const s=v("tensorListId",t,e,r),o=v("size",t,e,r),a=r.getTensorList(s.id).resize(o);return r.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,r,s){return n.apply(this,arguments)}}();function ug(n,t,e){const[r,s]=v("fusedOps",n,t,e),o="biasadd"===r,i=!o,a="prelu"===s,u="fusedbatchnorm"===r,l=v("numArgs",n,t,e);if(o){if(a&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&o&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=v("strides",n,t,e),d=ul(n,t,e),h=v("dataFormat",n,t,e).toUpperCase(),p=v("dilations",n,t,e);let[m,y]=v("args",n,t,e);return i&&(y=m,m=void 0),{stride:c,pad:d,dataFormat:h,dilations:p,biasArg:m,preluArg:y,activationFunc:s,leakyreluAlpha:v("leakyreluAlpha",n,t,e)}}function kh(n,t,e){return{boxes:v("boxes",n,t,e),scores:v("scores",n,t,e),maxOutputSize:v("maxOutputSize",n,t,e),iouThreshold:v("iouThreshold",n,t,e),scoreThreshold:v("scoreThreshold",n,t,e),softNmsSigma:v("softNmsSigma",n,t,e)}}const h$=function(){var n=(0,X.c)(function*(t,e,r,s,o=U){switch(t.op){case"NonMaxSuppressionV5":{const{boxes:i,scores:a,maxOutputSize:u,iouThreshold:l,scoreThreshold:c,softNmsSigma:d}=kh(t,e,r),h=yield o.image.nonMaxSuppressionWithScoreAsync(i,a,u,l,c,d);return[h.selectedIndices,h.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:i,scores:a,maxOutputSize:u,iouThreshold:l,scoreThreshold:c}=kh(t,e,r),d=v("padToMaxOutputSize",t,e,r),h=yield o.image.nonMaxSuppressionPaddedAsync(i,a,u,l,c,d);return[h.selectedIndices,h.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:i,scores:a,maxOutputSize:u,iouThreshold:l,scoreThreshold:c}=kh(t,e,r);return[yield o.image.nonMaxSuppressionAsync(i,a,u,l,c)]}case"Where":{const i=o.cast(v("condition",t,e,r),"bool"),a=[yield o.whereAsync(i)];return i.dispose(),a}case"ListDiff":return o.setdiff1dAsync(v("x",t,e,r),v("y",t,e,r));default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,r,s,o){return n.apply(this,arguments)}}();class m${get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=We(0),this.tensorMap=new Map,fr(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return We(this.size(),"int32")}import(t,e){var r=this;return(0,X.c)(function*(){r.checkKeyAndValueTensor(t,e);const s=yield t.data();return r.tensorMap.forEach(o=>o.dispose()),r.tensorMap.clear(),Ae(()=>{const o=fo(e),i=s.length,a=o.length;N(i===a,()=>`The number of elements doesn't match, keys has ${i} elements, the values has ${a} elements.`);for(let u=0;u<i;u++){const l=s[u],c=o[u];fr(c),r.tensorMap.set(l,c)}return r.handle})})()}find(t,e){var r=this;return(0,X.c)(function*(){r.checkKeyAndValueTensor(t,e);const s=yield t.data();return Ae(()=>{const o=[];for(let i=0;i<s.length;i++){const u=r.findWithDefault(s[i],e);o.push(u)}return Gr(o)})})()}findWithDefault(t,e){const r=this.tensorMap.get(t);return null!=r?r:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}const g$=function(){var n=(0,X.c)(function*(t,e,r,s){switch(t.op){case"HashTable":case"HashTableV2":{const o=s.getHashTableHandleByName(t.name);if(null!=o)return[o];{const i=v("keyDType",t,e,r),a=v("valueDType",t,e,r),u=new m$(i,a);return s.addHashTable(t.name,u),[u.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const o=v("tableHandle",t,e,r,s),i=v("keys",t,e,r),a=v("values",t,e,r);return[yield s.getHashTableById(o.id).import(i,a)]}case"LookupTableFind":case"LookupTableFindV2":{const o=v("tableHandle",t,e,r,s),i=v("keys",t,e,r),a=v("defaultValue",t,e,r);return[yield s.getHashTableById(o.id).find(i,a)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=v("tableHandle",t,e,r,s);return[s.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,r,s,o){return n.apply(this,arguments)}}();function lg(n,t,e,r,s=Ae){const o=((i,a,u)=>{switch(i.category){case"arithmetic":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(v("a",n,t,e),v("b",n,t,e))];case"AddN":return[r.addN(v("tensors",n,t,e))];case"FloorMod":case"Mod":return[r.mod(v("a",n,t,e),v("b",n,t,e))];case"Mul":return[r.mul(v("a",n,t,e),v("b",n,t,e))];case"RealDiv":case"Div":return[r.div(v("a",n,t,e),v("b",n,t,e))];case"DivNoNan":return[r.divNoNan(v("a",n,t,e),v("b",n,t,e))];case"FloorDiv":return[r.floorDiv(v("a",n,t,e),v("b",n,t,e))];case"Sub":return[r.sub(v("a",n,t,e),v("b",n,t,e))];case"Minimum":return[r.minimum(v("a",n,t,e),v("b",n,t,e))];case"Maximum":return[r.maximum(v("a",n,t,e),v("b",n,t,e))];case"Pow":return[r.pow(v("a",n,t,e),v("b",n,t,e))];case"SquaredDifference":return[r.squaredDifference(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"basic_math":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"Abs":case"ComplexAbs":return[r.abs(v("x",n,t,e))];case"Acos":return[r.acos(v("x",n,t,e))];case"Acosh":return[r.acosh(v("x",n,t,e))];case"Asin":return[r.asin(v("x",n,t,e))];case"Asinh":return[r.asinh(v("x",n,t,e))];case"Atan":return[r.atan(v("x",n,t,e))];case"Atan2":return[r.atan2(v("x",n,t,e),v("y",n,t,e))];case"Atanh":return[r.atanh(v("x",n,t,e))];case"Ceil":return[r.ceil(v("x",n,t,e))];case"Complex":return[r.complex(v("real",n,t,e),v("imag",n,t,e))];case"Cos":return[r.cos(v("x",n,t,e))];case"Cosh":return[r.cosh(v("x",n,t,e))];case"Elu":return[r.elu(v("x",n,t,e))];case"Erf":return[r.erf(v("x",n,t,e))];case"Exp":return[r.exp(v("x",n,t,e))];case"Expm1":return[r.expm1(v("x",n,t,e))];case"Floor":return[r.floor(v("x",n,t,e))];case"Log":return[r.log(v("x",n,t,e))];case"Log1p":return[r.log1p(v("x",n,t,e))];case"Imag":return[r.imag(v("x",n,t,e))];case"Neg":return[r.neg(v("x",n,t,e))];case"Reciprocal":return[r.reciprocal(v("x",n,t,e))];case"Real":return[r.real(v("x",n,t,e))];case"Relu":return[r.relu(v("x",n,t,e))];case"Round":return[r.round(v("x",n,t,e))];case"Selu":return[r.selu(v("x",n,t,e))];case"Sigmoid":return[r.sigmoid(v("x",n,t,e))];case"Sin":return[r.sin(v("x",n,t,e))];case"Sign":return[r.sign(v("x",n,t,e))];case"Sinh":return[r.sinh(v("x",n,t,e))];case"Softplus":return[r.softplus(v("x",n,t,e))];case"Sqrt":return[r.sqrt(v("x",n,t,e))];case"Square":return[r.square(v("x",n,t,e))];case"Tanh":return[r.tanh(v("x",n,t,e))];case"Tan":return[r.tan(v("x",n,t,e))];case"ClipByValue":return[r.clipByValue(v("x",n,t,e),v("clipValueMin",n,t,e),v("clipValueMax",n,t,e))];case"Relu6":return[r.relu6(v("x",n,t,e))];case"Rsqrt":return[r.rsqrt(Xt(n.inputNames[0],t,e))];case"LeakyRelu":return[r.leakyRelu(v("x",n,t,e),v("alpha",n,t,e))];case"Prelu":return[r.prelu(v("x",n,t,e),v("alpha",n,t,e))];case"IsNan":return[r.isNaN(Xt(n.inputNames[0],t,e))];case"IsInf":return[r.isInf(Xt(n.inputNames[0],t,e))];case"IsFinite":return[r.isFinite(Xt(n.inputNames[0],t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"control":return l$(i,a,u);case"convolution":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"Conv1D":{const s=v("stride",n,t,e),o=v("pad",n,t,e),i=v("dataFormat",n,t,e).toUpperCase(),a=v("dilation",n,t,e);return[r.conv1d(v("x",n,t,e),v("filter",n,t,e),s,o,i,a)]}case"Conv2D":{const s=v("strides",n,t,e),o=ul(n,t,e),i=v("dataFormat",n,t,e).toUpperCase(),a=v("dilations",n,t,e);return[r.conv2d(v("x",n,t,e),v("filter",n,t,e),[s[1],s[2]],o,i,[a[1],a[2]])]}case"_FusedConv2D":{const{stride:s,pad:o,dataFormat:i,dilations:a,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:d}=ug(n,t,e);return[r.fused.conv2d({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[s[1],s[2]],pad:o,dataFormat:i,dilations:[a[1],a[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:d})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:o,dataFormat:i,dilations:a,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:d}=ug(n,t,e);return[r.fused.depthwiseConv2d({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[s[1],s[2]],pad:o,dataFormat:i,dilations:[a[1],a[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:d})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=v("outputShape",n,t,e),o=v("strides",n,t,e),i=ul(n,t,e);return[r.conv2dTranspose(v("x",n,t,e),v("filter",n,t,e),s,[o[1],o[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=v("strides",n,t,e),o=ul(n,t,e),i=v("dilations",n,t,e),a=v("dataFormat",n,t,e).toUpperCase();return[r.depthwiseConv2d(v("input",n,t,e),v("filter",n,t,e),[s[1],s[2]],o,a,[i[1],i[2]])]}case"Conv3D":{const s=v("strides",n,t,e),o=v("pad",n,t,e),i=v("dataFormat",n,t,e).toUpperCase(),a=v("dilations",n,t,e);return[r.conv3d(v("x",n,t,e),v("filter",n,t,e),[s[1],s[2],s[3]],o,i,[a[1],a[2],a[3]])]}case"AvgPool":{const s=v("strides",n,t,e),o=v("pad",n,t,e),i=v("kernelSize",n,t,e);return[r.avgPool(v("x",n,t,e),[i[1],i[2]],[s[1],s[2]],o)]}case"MaxPool":{const s=v("strides",n,t,e),o=v("pad",n,t,e),i=v("kernelSize",n,t,e);return[r.maxPool(v("x",n,t,e),[i[1],i[2]],[s[1],s[2]],o)]}case"MaxPoolWithArgmax":{const s=v("strides",n,t,e),o=v("pad",n,t,e),i=v("kernelSize",n,t,e),a=v("includeBatchInIndex",n,t,e),{result:u,indexes:l}=r.maxPoolWithArgmax(v("x",n,t,e),[i[1],i[2]],[s[1],s[2]],o,a);return[u,l]}case"AvgPool3D":{const s=v("strides",n,t,e),o=v("pad",n,t,e),i=v("kernelSize",n,t,e);return[r.avgPool3d(v("x",n,t,e),[i[1],i[2],i[3]],[s[1],s[2],s[3]],o)]}case"MaxPool3D":{const s=v("strides",n,t,e),o=v("pad",n,t,e),i=v("kernelSize",n,t,e);return[r.maxPool3d(v("x",n,t,e),[i[1],i[2],i[3]],[s[1],s[2],s[3]],o)]}case"Dilation2D":{const s=v("strides",n,t,e),o=v("pad",n,t,e),i=v("dilations",n,t,e),a=s[1],u=s[2],l=i[1],c=i[2];return[r.dilation2d(v("x",n,t,e),v("filter",n,t,e),[a,u],o,[l,c],"NHWC")]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"creation":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"Fill":{const s=v("shape",n,t,e),o=v("dtype",n,t,e),i=v("value",n,t,e);return[r.fill(s,i,o)]}case"LinSpace":{const s=v("start",n,t,e),o=v("stop",n,t,e),i=v("num",n,t,e);return[r.linspace(s,o,i)]}case"Multinomial":{const s=v("logits",n,t,e),o=v("numSamples",n,t,e),i=v("seed",n,t,e);return[r.multinomial(s,o,i)]}case"OneHot":{const s=v("indices",n,t,e),o=v("depth",n,t,e),i=v("onValue",n,t,e),a=v("offValue",n,t,e),u=v("dtype",n,t,e);return[r.oneHot(s,o,i,a,u)]}case"Ones":return[r.ones(v("shape",n,t,e),v("dtype",n,t,e))];case"OnesLike":return[r.onesLike(v("x",n,t,e))];case"RandomStandardNormal":return[r.randomStandardNormal(v("shape",n,t,e),v("dtype",n,t,e),v("seed",n,t,e))];case"RandomUniform":return[r.randomUniform(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("dtype",n,t,e))];case"RandomUniformInt":return[r.randomUniformInt(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("seed",n,t,e))];case"Range":{const s=v("start",n,t,e),o=v("stop",n,t,e),i=v("step",n,t,e);return[r.range(s,o,i,v("dtype",n,t,e))]}case"TruncatedNormal":{const s=v("shape",n,t,e),o=v("mean",n,t,e),i=v("stdDev",n,t,e),a=v("seed",n,t,e);return[r.truncatedNormal(s,o,i,v("dtype",n,t,e),a)]}case"Zeros":return[r.zeros(v("shape",n,t,e),v("dtype",n,t,e))];case"ZerosLike":return[r.zerosLike(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"dynamic":return h$(i,a,u);case"evaluation":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"LowerBound":{const s=v("sortedSequence",n,t,e),o=v("values",n,t,e);return[r.lowerBound(s,o)]}case"TopKV2":{const s=v("x",n,t,e),o=v("k",n,t,e),i=v("sorted",n,t,e),a=r.topk(s,o,i);return[a.values,a.indices]}case"UpperBound":{const s=v("sortedSequence",n,t,e),o=v("values",n,t,e);return[r.upperBound(s,o)]}case"Unique":{const s=v("x",n,t,e),o=r.unique(s);return[o.values,o.indices]}case"UniqueV2":{const s=v("x",n,t,e),o=v("axis",n,t,e),i=r.unique(s,o);return[i.values,i.indices]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"image":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"ResizeBilinear":{const s=v("images",n,t,e),o=v("size",n,t,e),i=v("alignCorners",n,t,e),a=v("halfPixelCenters",n,t,e);return[r.image.resizeBilinear(s,[o[0],o[1]],i,a)]}case"ResizeNearestNeighbor":{const s=v("images",n,t,e),o=v("size",n,t,e),i=v("alignCorners",n,t,e),a=v("halfPixelCenters",n,t,e);return[r.image.resizeNearestNeighbor(s,[o[0],o[1]],i,a)]}case"CropAndResize":{const s=v("image",n,t,e),o=v("boxes",n,t,e),i=v("boxInd",n,t,e),a=v("cropSize",n,t,e),u=v("method",n,t,e),l=v("extrapolationValue",n,t,e);return[r.image.cropAndResize(s,o,i,a,u,l)]}case"ImageProjectiveTransformV3":{const s=v("images",n,t,e),o=v("transforms",n,t,e),i=v("outputShape",n,t,e),a=v("fillValue",n,t,e),u=v("interpolation",n,t,e),l=v("fillMode",n,t,e);return[r.image.transform(s,o,u.toLowerCase(),l.toLowerCase(),a,i)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"graph":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"Const":return t[n.name];case"PlaceholderWithDefault":const s=v("default",n,t,e);return[Xt(n.name,t,e)||s];case"Placeholder":return[Xt(n.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[Kr(v("x",n,t,e))];case"IdentityN":return v("x",n,t,e).map(c=>Kr(c));case"Shape":return[r.tensor1d(v("x",n,t,e).shape,"int32")];case"ShapeN":return v("x",n,t,e).map(c=>r.tensor1d(c.shape));case"Size":return[r.scalar(v("x",n,t,e).size,"int32")];case"Rank":return[r.scalar(v("x",n,t,e).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const i=v("x",n,t,e),a=v("data",n,t,e),u=v("message",n,t,e),l=v("summarize",n,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(u);for(let c=0;c<a.length;c++)console.log(Array.prototype.slice.call(a[c].dataSync()).slice(0,l));return[i];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"logical":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"Equal":return[r.equal(v("a",n,t,e),v("b",n,t,e))];case"NotEqual":return[r.notEqual(v("a",n,t,e),v("b",n,t,e))];case"Greater":return[r.greater(v("a",n,t,e),v("b",n,t,e))];case"GreaterEqual":return[r.greaterEqual(v("a",n,t,e),v("b",n,t,e))];case"Less":return[r.less(v("a",n,t,e),v("b",n,t,e))];case"LessEqual":return[r.lessEqual(v("a",n,t,e),v("b",n,t,e))];case"LogicalAnd":return[r.logicalAnd(v("a",n,t,e),v("b",n,t,e))];case"LogicalNot":return[r.logicalNot(v("a",n,t,e))];case"LogicalOr":return[r.logicalOr(v("a",n,t,e),v("b",n,t,e))];case"Select":case"SelectV2":return[r.where(v("condition",n,t,e),v("a",n,t,e),v("b",n,t,e))];case"BitwiseAnd":return[r.bitwiseAnd(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"matrices":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(v("a",n,t,e),v("b",n,t,e),v("transposeA",n,t,e),v("transposeB",n,t,e))];case"Einsum":return[r.einsum(v("equation",n,t,e),...v("tensors",n,t,e))];case"Transpose":return[r.transpose(v("x",n,t,e),v("perm",n,t,e))];case"_FusedMatMul":const[s,o]=v("fusedOps",n,t,e),i="biasadd"===s,a="prelu"===o,u=v("numArgs",n,t,e),l=v("leakyreluAlpha",n,t,e);if(i){if(a&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,d]=v("args",n,t,e);return[r.fused.matMul({a:v("a",n,t,e),b:v("b",n,t,e),transposeA:v("transposeA",n,t,e),transposeB:v("transposeB",n,t,e),bias:c,activation:o,preluActivationWeights:d,leakyreluAlpha:l})];case"MatrixBandPart":return[r.linalg.bandPart(v("a",n,t,e),v("numLower",n,t,e),v("numUpper",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"normalization":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"EuclideanNorm":return[r.euclideanNorm(v("x",n,t,e),v("axis",n,t,e),v("keepDims",n,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(v("x",n,t,e),v("mean",n,t,e),v("variance",n,t,e),v("offset",n,t,e),v("scale",n,t,e),v("epsilon",n,t,e))];case"LRN":return[r.localResponseNormalization(v("x",n,t,e),v("radius",n,t,e),v("bias",n,t,e),v("alpha",n,t,e),v("beta",n,t,e))];case"Softmax":return[r.softmax(v("x",n,t,e))];case"LogSoftmax":return[r.logSoftmax(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"ragged":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"RaggedGather":{const{outputNestedSplits:s,outputDenseValues:o}=r.raggedGather(v("paramsNestedSplits",n,t,e),v("paramsDenseValues",n,t,e),v("indices",n,t,e),v("outputRaggedRank",n,t,e));return s.concat(o)}case"RaggedRange":{const{rtNestedSplits:s,rtDenseValues:o}=r.raggedRange(v("starts",n,t,e),v("limits",n,t,e),v("splits",n,t,e));return[s,o]}case"RaggedTensorToTensor":return[r.raggedTensorToTensor(v("shape",n,t,e),v("values",n,t,e),v("defaultValue",n,t,e),v("rowPartitionTensors",n,t,e),v("rowPartitionTypes",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"reduction":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"Max":{const a=v("axis",n,t,e),u=v("keepDims",n,t,e);return[r.max(v("x",n,t,e),a,u)]}case"Mean":{const a=v("axis",n,t,e),u=v("keepDims",n,t,e);return[r.mean(v("x",n,t,e),a,u)]}case"Min":{const a=v("axis",n,t,e),u=v("keepDims",n,t,e);return[r.min(v("x",n,t,e),a,u)]}case"Sum":{const a=v("axis",n,t,e),u=v("keepDims",n,t,e);return[r.sum(v("x",n,t,e),a,u)]}case"All":{const a=v("axis",n,t,e),u=v("keepDims",n,t,e);return[r.all(v("x",n,t,e),a,u)]}case"Any":{const a=v("axis",n,t,e),u=v("keepDims",n,t,e);return[r.any(v("x",n,t,e),a,u)]}case"ArgMax":{const a=v("axis",n,t,e);return[r.argMax(v("x",n,t,e),a)]}case"ArgMin":{const a=v("axis",n,t,e);return[r.argMin(v("x",n,t,e),a)]}case"Prod":{const a=v("axis",n,t,e),u=v("keepDims",n,t,e);return[r.prod(v("x",n,t,e),a,u)]}case"Cumprod":{const a=v("axis",n,t,e),u=v("exclusive",n,t,e),l=v("reverse",n,t,e);return[r.cumprod(v("x",n,t,e),a,u,l)]}case"Cumsum":{const a=v("axis",n,t,e),u=v("exclusive",n,t,e),l=v("reverse",n,t,e);return[r.cumsum(v("x",n,t,e),a,u,l)]}case"Bincount":const s=v("x",n,t,e),o=v("weights",n,t,e),i=v("size",n,t,e);return[r.bincount(s,o,i)];case"DenseBincount":{const a=v("x",n,t,e),u=v("weights",n,t,e),l=v("size",n,t,e),c=v("binaryOutput",n,t,e);return[r.denseBincount(a,u,l,c)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"slice_join":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"ConcatV2":case"Concat":{const s=v("n",n,t,e),o=v("axis",n,t,e);let i=v("tensors",n,t,e);return i=i.slice(0,s),[r.concat(i,o)]}case"Gather":{const s=v("x",n,t,e),o=v("indices",n,t,e);return[r.gather(s,r.cast(o,"int32"),0)]}case"GatherV2":{const s=v("axis",n,t,e),o=v("batchDims",n,t,e),i=v("x",n,t,e),a=v("indices",n,t,e);return[r.gather(i,r.cast(a,"int32"),s,o)]}case"Reverse":{const s=v("dims",n,t,e),o=[];for(let a=0;a<s.length;a++)s[a]&&o.push(a);const i=v("x",n,t,e);return[r.reverse(i,o)]}case"ReverseV2":{const s=v("axis",n,t,e),o=v("x",n,t,e);return[r.reverse(o,s)]}case"Slice":{const s=v("begin",n,t,e),o=v("size",n,t,e);return[r.slice(v("x",n,t,e),s,o)]}case"StridedSlice":{const s=v("begin",n,t,e),o=v("end",n,t,e),i=v("strides",n,t,e),a=v("beginMask",n,t,e),u=v("endMask",n,t,e),l=v("ellipsisMask",n,t,e),c=v("newAxisMask",n,t,e),d=v("shrinkAxisMask",n,t,e),h=v("x",n,t,e);return[r.stridedSlice(h,s,o,i,a,u,l,c,d)]}case"Pack":return Ae(()=>{const s=v("axis",n,t,e),o=v("tensors",n,t,e),i=o[0].shape,a=r.squeeze(o[0]).shape,u=o.map(l=>{const c=ot(l.shape,i);if(!c&&!ot(r.squeeze(l).shape,a))throw new Error("the input tensors shape does not match");return c?l:r.reshape(l,i)});return[r.stack(u,s)]});case"Unpack":{const s=v("axis",n,t,e),o=v("tensor",n,t,e);return r.unstack(o,s)}case"Tile":{const s=v("reps",n,t,e);return[r.tile(v("x",n,t,e),s)]}case"Split":case"SplitV":{const s=v("axis",n,t,e),o=v("numOrSizeSplits",n,t,e),i=v("x",n,t,e);return r.split(i,o,s)}case"ScatterNd":{const s=v("indices",n,t,e),o=v("values",n,t,e),i=v("shape",n,t,e);return[r.scatterND(s,o,i)]}case"GatherNd":{const s=v("x",n,t,e),o=v("indices",n,t,e);return[r.gatherND(s,o)]}case"SparseToDense":{const s=v("sparseIndices",n,t,e),o=v("outputShape",n,t,e),i=v("sparseValues",n,t,e),a=v("defaultValue",n,t,e);return[r.sparseToDense(s,i,o,i.dtype===a.dtype?a:r.cast(a,i.dtype))]}case"TensorScatterUpdate":{const s=v("indices",n,t,e),o=v("values",n,t,e),i=v("tensor",n,t,e);return[r.tensorScatterUpdate(i,s,o)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"sparse":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:o,emptyRowIndicator:i,reverseIndexMap:a}=r.sparse.sparseFillEmptyRows(v("indices",n,t,e),v("values",n,t,e),v("denseShape",n,t,e),v("defaultValue",n,t,e));return[s,o,i,a]}case"SparseReshape":{const{outputIndices:s,outputShape:o}=r.sparse.sparseReshape(v("inputIndices",n,t,e),v("inputShape",n,t,e),v("newShape",n,t,e));return[s,o]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"spectral":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"FFT":return[r.fft(v("x",n,t,e))];case"IFFT":return[r.ifft(v("x",n,t,e))];case"RFFT":return[r.rfft(v("x",n,t,e))];case"IRFFT":return[r.irfft(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"string":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"StaticRegexReplace":return[r.string.staticRegexReplace(v("input",n,t,e),v("pattern",n,t,e),v("rewrite",n,t,e),v("replaceGlobal",n,t,e))];case"StringNGrams":{const{nGrams:s,nGramsSplits:o}=r.string.stringNGrams(v("data",n,t,e),v("dataSplits",n,t,e),v("separator",n,t,e),v("nGramWidths",n,t,e),v("leftPad",n,t,e),v("rightPad",n,t,e),v("padWidth",n,t,e),v("preserveShortSequences",n,t,e));return[s,o]}case"StringSplit":{const{indices:s,values:o,shape:i}=r.string.stringSplit(v("input",n,t,e),v("delimiter",n,t,e),v("skipEmpty",n,t,e));return[s,o,i]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(v("input",n,t,e),v("numBuckets",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"transformation":return s(()=>((n,t,e,r=U)=>{switch(n.op){case"Cast":return[r.cast(v("x",n,t,e),v("dtype",n,t,e))];case"ExpandDims":{const s=v("axis",n,t,e);return[r.expandDims(v("x",n,t,e),s)]}case"Squeeze":{const s=v("axis",n,t,e);return[r.squeeze(v("x",n,t,e),s)]}case"Reshape":return[r.reshape(v("x",n,t,e),v("shape",n,t,e))];case"EnsureShape":return[r.ensureShape(v("x",n,t,e),v("shape",n,t,e))];case"MirrorPad":return[r.mirrorPad(v("x",n,t,e),v("padding",n,t,e),v("mode",n,t,e))];case"PadV2":case"Pad":return[r.pad(v("x",n,t,e),v("padding",n,t,e),v("constantValue",n,t,e))];case"SpaceToBatchND":{const s=v("blockShape",n,t,e),o=v("paddings",n,t,e);return[r.spaceToBatchND(v("x",n,t,e),s,o)]}case"BatchToSpaceND":{const s=v("blockShape",n,t,e),o=v("crops",n,t,e);return[r.batchToSpaceND(v("x",n,t,e),s,o)]}case"DepthToSpace":{const s=v("blockSize",n,t,e),o=v("dataFormat",n,t,e).toUpperCase();return[r.depthToSpace(v("x",n,t,e),s,o)]}case"BroadcastTo":return[r.broadcastTo(v("x",n,t,e),v("shape",n,t,e))];case"BroadcastArgs":return[r.broadcastArgs(v("s0",n,t,e),v("s1",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,u));case"hash_table":return g$(i,a,u,r);case"custom":const l=tg(i.op);if(l&&l.customExecutor)return l.customExecutor(new t$(i,a,u));throw TypeError(`Custom op ${i.op} is not registered.`);default:throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(n,t,e);return _r(o)?o.then(i=>[].concat(i)):[].concat(o)}class cg{constructor(t={},e={},r={},s={},o){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=r,this.functionMap=s,this.parseNodeNameCache=o,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const r=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(r))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function dg(n,t,e,r){const s=new Set,o=[];let i=null,a=null;const u=new Set,l=new Set(Object.keys(n).map(h=>Nn(h)[0]));r=r||[];const c=new Set(r.map(h=>Nn(h.name)[0])),d=[...t];for(;d.length>0;){const h=d.pop();if((yo(h)||O$(h)||F$(h))&&null==i&&(i=h,a=i.children.map(p=>p.name).filter(p=>s.has(p))),s.add(h.name),null==e[h.name]&&!l.has(h.name)&&!c.has(h.name)){if(0===h.inputs.length){o.push(h.name);continue}h.inputs.forEach(p=>{u.has(p.name)||(u.add(p.name),d.push(p))})}}return{inputs:n,outputs:t,usedNodes:s,missingInputs:o,dynamicNode:i,syncInputs:a}}class ll extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}}const A$=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),D$=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),P$=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function yo(n){return A$.has(n.op)}function O$(n){return D$.has(n.op)}function F$(n){return P$.has(n.op)}class cl{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(r=>t[r].map(s=>s.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(r=>{this._functionExecutorMap[r]=new cl(t.functions[r],this)})}getCompilationKey(t,e){const r=t.map(o=>o.name).sort(),s=e.map(o=>o.name).sort();return r.join(this.SEPARATOR)+"--"+s.join(this.SEPARATOR)}compile(t,e){const r=dg(t,e,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:o,syncInputs:i}=r;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(s.length>0){const l=e.map(d=>d.name),c=Object.keys(t);throw new Error(`Cannot compute the outputs [${l}] from the provided inputs [${c}]. Missing the following inputs: [${s}]`)}const a=function _$(n,t){const{usedNodes:e,inputs:r}=t,i=g=>e.has("string"==typeof g?g:g.name);function a(g){return[...new Map(g.map(x=>[x.name,x])).values()]}const u=a([...Object.keys(r).map(g=>Nn(g)[0]).map(g=>n.nodes[g]),...n.weights,...n.initNodes||[]]).filter(i),l=a([...u,...Object.values(n.nodes)]).filter(i),c=new Map(l.map(g=>[g.name,g])),d={};for(const g of l){d[g.name]=d[g.name]||0;for(const x of g.children)i(x)||(d[x.name]=Number.POSITIVE_INFINITY),d[x.name]=(d[x.name]||0)+1}const h=Object.entries(d).filter(([,g])=>0===g).map(([g])=>g),p=[...h];for(;h.length>0;){const g=h.pop(),x=c.get(g);for(const w of x.children.filter(i))0==--d[w.name]&&(p.push(w.name),h.push(w.name))}const y=function T$(n,t){const e=new Map(n.map(i=>[i.name,i])),r=t.map(i=>i.name),s=new Set(r);for(;r.length>0;){const i=r.pop(),a=e.get(i);for(const u of a.children)!e.has(u.name)||s.has(u.name)||(s.add(u.name),r.push(u.name))}return n.filter(i=>s.has(i.name))}(p.map(g=>c.get(g)),u);return function E$(n,t){const e=new Map(n.map((a,u)=>[a.name,u])),r=new Set(t.map(a=>a.name)),s=a=>r.has("string"==typeof a?a:a.name),o=new Set(n.map(a=>a.name)),i=a=>o.has("string"==typeof a?a:a.name);for(const a of n){for(const u of a.children.filter(i)){if(!e.has(u.name))throw new ll(`Child ${u.name} of node ${a.name} is unreachable.`);if(e.get(a.name)>e.get(u.name))throw new ll(`Node ${a.name} is scheduled to run after its child ${u.name}.`)}if(!s(a))for(const u of a.inputs){if(!e.has(u.name))throw new ll(`Input ${u.name} of node ${a.name} is unreachable.`);if(e.get(u.name)>e.get(a.name))throw new ll(`Node ${a.name} is scheduled to run before its input ${u.name}.`)}}}(y,u),y}(this.graph,r),u=function R$(n){const t=new Map(n.map((a,u)=>[a.name,u])),e=Number.MAX_SAFE_INTEGER,r=n.map((a,u)=>yo(a)?e:u),s=a=>{const u=r[t.get(a.name)];return null==u?-1:u},o=n.map((a,u)=>a.children.map(s).reduce((l,c)=>Math.max(l,c),r[u])),i=new Map;for(let a=0;a<n.length;++a){const u=o[a];if(u===e)continue;const l=n[a],c=n[u];i.has(c.name)||i.set(c.name,[]),i.get(c.name).push(l)}return i}(a);return{orderedNodes:a,nodeLiveUntilMap:u}}cloneAndKeepTensor(t){if(null==t)return null;const e=t.clone();return fr(e),e}cloneTensorList(t){return t?t.map(r=>this.cloneAndKeepTensor(r)):null}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(([e,r])=>[e,this.cloneTensorList(r)]))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);const r=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const s=r.map(h=>this.graph.nodes[Nn(h)[0]]),o=e.map(h=>Nn(h)[0]),i=new Set(o);let a=o.map(h=>this.graph.nodes[h]);0===a.length&&(a=this._outputs);const u=this.getCompilationKey(s,a);let l=this.compiledMap.get(u);null==l&&(l=this.compile(t,a),this.compiledMap.set(u,l));try{this.keepIntermediateTensors=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(h){this.keepIntermediateTensors=!1,console.warn(h.message)}const c={},d={};return Ae(()=>{const h=new cg(this.weightMap,c,d,this.functionExecutorMap,this.parseNodeNameCache),p=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(x=>{const[w,S]=Nn(x,h),k=[];k[S]=t[x],p[w]=k,this.keepIntermediateTensors&&(this.clonedTensorsMap[w]=this.cloneTensorList(k))});const m=this.getFrozenTensorIds(p),{orderedNodes:y,nodeLiveUntilMap:g}=l;for(const x of y){if(p[x.name])continue;const w=lg(x,p,h,this._resourceManager);if(_r(w))throw new Error(`The execution of the op '${x.op}' returned a promise. Please use model.executeAsync() instead.`);p[x.name]=w,this.keepIntermediateTensors&&(this.clonedTensorsMap[x.name]=this.cloneTensorList(w)),this.checkTensorForDisposalWithNodeLiveUntilInfo(x,p,h,m,i,g.get(x.name))}return null==this.parent&&h.dispose(m),e.map(x=>Xt(x,p,h))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(r=>t[r]).map(r=>r.map(s=>s.id)));return new Set(e)}checkTensorForDisposal(t,e,r,s,o,i,a){if(!yo(e)&&!i.has(t)){for(const u of r[t])null!=u&&(a[u.id]=(a[u.id]||0)+e.children.length);for(const u of e.inputs){if(yo(u))continue;const l=ng(u.name,r,s);if(null!=l)for(const c of l){if(!c||c.kept||o.has(c.id))continue;const d=a[c.id];1===d?(c.dispose(),delete a[c.id]):null!=d&&a[c.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,r,s,o,i){function a(u){return yo(u)||o.has(u.name)}if(!yo(t)&&null!=i)for(const u of i){if(a(u))continue;const l=ng(u.name,e,r);for(const c of l)!c||c.kept||s.has(c.id)||c.dispose()}}executeAsync(t,e){var r=this;return(0,X.c)(function*(){return r._executeAsync(t,e)})()}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(const e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}_executeAsync(t,e,r=!1,s={},o={}){var i=this;return(0,X.c)(function*(){i.disposeIntermediateTensors(),r||(t=i.mapInputs(t),i.checkInputs(t),i.checkInputShapeAndType(t),e=i.mapOutputs(e),i.checkOutputs(e));try{i.keepIntermediateTensors=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(p){i.keepIntermediateTensors=!1,console.warn(p.message)}const a=new cg(i.weightMap,s,o,i.functionExecutorMap,i.parseNodeNameCache);i.keepIntermediateTensors&&(i.clonedTensorsMap=i.cloneTensorMap(i.weightMap));const u=yield i.executeWithControlFlow(t,a,e,r),l=e.map(p=>Xt(p,u,a)),c=l.map(p=>p.id),d=Object.keys(t).map(p=>t[p].id),h=new Set([...c,...d,...i.weightIds]);return Object.values(u).forEach(p=>{p.forEach(m=>{m&&!m.isDisposed&&!h.has(m.id)&&m.dispose()})}),null==i.parent&&a.dispose(h),l})()}executeFunctionAsync(t,e,r){var s=this;return(0,X.c)(function*(){const o=t.reduce((i,a,u)=>(i[s.inputs[u].name]=a,i),{});return s._executeAsync(o,s.outputNodes,!0,e,r)})()}executeWithControlFlow(t,e,r,s){var o=this;return(0,X.c)(function*(){const i=Object.keys(t),a=i.map(_=>o.graph.nodes[Nn(_)[0]]),u=r.map(_=>Nn(_)[0]),l=new Set(u);let c=u.map(_=>o.graph.nodes[_]);0===c.length&&(c=o._outputs);const{usedNodes:d,missingInputs:h,dynamicNode:p,syncInputs:m}=dg(t,c,o.weightMap,o._initNodes),y=[...a,...o.graph.weights,...o._initNodes||[]].map(_=>({node:_,contexts:e.currentContext})),g=Object.assign({},o.weightMap);Object.keys(t).forEach(_=>{const[A,P]=Nn(_),L=[];L[P]=t[_],g[A]=L});const x={},w=o.getFrozenTensorIds(g),S={};for(;y.length>0;){const _=o.processStack(a,y,e,g,S,w,l,x,d);yield Promise.all(_)}null==p&&!s&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const k=c.filter(_=>!yo(_)&&!Xt(_.name,g,e)).map(_=>_.name);if(k.length>0){let _="";throw null!=p&&(_=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${m}]`),new Error(`Cannot compute the outputs [${k}] from the provided inputs [${i}]. Consider providing the following inputs: [${h}]. ${_}`)}return g})()}processStack(t,e,r,s,o,i,a,u,l){const c=[];for(;e.length>0;){const d=e.pop();r.currentContext=d.contexts;let h="";if("Enter"===d.node.op&&v("isConstant",d.node,s,r)&&([h]=jr(d.node.name,r)),null==s[d.node.name]){const p=lg(d.node,s,r,this._resourceManager);h||([h]=jr(d.node.name,r));const m=r.currentContext;_r(p)?c.push(p.then(y=>(s[h]=y,this.keepIntermediateTensors&&(this.clonedTensorsMap[h]=this.cloneTensorList(y)),r.currentContext=m,this.checkTensorForDisposal(h,d.node,s,r,i,a,u),this.processChildNodes(d.node,e,r,s,o,l),y))):(s[h]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[h]=this.cloneTensorList(p)),this.checkTensorForDisposal(h,d.node,s,r,i,a,u),this.processChildNodes(d.node,e,r,s,o,l))}else this.processChildNodes(d.node,e,r,s,o,l)}return c}processChildNodes(t,e,r,s,o,i){t.children.forEach(a=>{const[u]=jr(a.name,r);o[u]||!i.has(a.name)||("Merge"===a.op?a.inputNames.some(l=>!!Xt(l,s,r))&&(o[u]=!0,e.push({contexts:r.currentContext,node:a})):a.inputNames.every(l=>!!Xt(l,s,r))&&(o[u]=!0,e.push({contexts:r.currentContext,node:a})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const r=t[e],[s]=Nn(e),o=this.graph.nodes[s];if(o.attrParams.shape&&o.attrParams.shape.value){const i=o.attrParams.shape.value;N(i.length===r.shape.length&&r.shape.every((u,l)=>-1===i[l]||i[l]===u),()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${i}], but was [${r.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&N(r.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${r.dtype}`)})}mapInputs(t){var e,r;const s={};for(const o in t){const i=null===(r=null===(e=this._signature)||void 0===e?void 0:e.inputs)||void 0===r?void 0:r[o];null!=i?s[i.name]=t[o]:s[o]=t[o]}return s}checkInputs(t){const e=Object.keys(t).filter(r=>{const[s]=Nn(r);return null==this.graph.nodes[s]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>{var r,s;const o=null===(s=null===(r=this._signature)||void 0===r?void 0:r.outputs)||void 0===s?void 0:s[e];return null!=o?o.name:e},{})}checkOutputs(t){t.forEach(e=>{const[r]=Nn(e);if(!this.graph.nodes[r])throw new Error(`The output '${e}' is not found in the graph`)})}}class L${constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}const B$="?tfjs-format=file",M$="model.json";class hg{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},r=Ee){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=r,null==e&&(this.loadOptions={}),this.resourceManager=new L$}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{const e=this.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return _r(t)?t.then(e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e)):this.loadSync(t)}loadSync(t){const e=this.io.decodeWeights(t.weightData,t.weightSpecs);return this.loadWithWeightMap(t,e)}loadStreaming(t){var e=this;return(0,X.c)(function*(){if(null==t.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const r=yield cf(t.getWeightStream(),t.weightSpecs);return e.loadWithWeightMap(t,r)})()}loadWithWeightMap(t,e){this.artifacts=t;const r=this.artifacts.modelTopology;let s=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const o=this.artifacts.userDefinedMetadata;null!=o.signature&&(s=o.signature),null!=o.structuredOutputKeys&&(this.structuredOutputKeys=o.structuredOutputKeys)}if(this.signature=s,this.version=`${r.versions.producer}.${r.versions.minConsumer}`,this.executor=new cl(rg.Instance.transformGraph(r,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(e),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const o=rg.Instance.transformGraph(t.modelInitializer);this.initializer=new cl(o),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}save(t,e){var r=this;return(0,X.c)(function*(){if("string"==typeof t){const s=r.io.getSaveHandlers(t);if(0===s.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(s.length>1)throw new Error(`Found more than one (${s.length}) save handlers for URL '${t}'`);t=s[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(r.artifacts)})()}addStructuredOutputNames(t){if(this.structuredOutputKeys){const r={};return(t instanceof _t?[t]:t).forEach((s,o)=>r[this.structuredOutputKeys[o]]=s),r}return t}predict(t,e){const r=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(r)}predictAsync(t,e){var r=this;return(0,X.c)(function*(){const s=yield r.executeAsync(t,r.outputNodes);return r.addStructuredOutputNames(s)})()}normalizeInputs(t){var e;if(!(t instanceof _t||Array.isArray(t))){const o=null===(e=this.signature)||void 0===e?void 0:e.inputs;if(null!=o)for(const i in o){const a=o[i];null!=a.resourceId&&(t[i]=this.resourceIdToCapturedInput[a.resourceId])}return t}t=Array.isArray(t)?t:[t];const r=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+r!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-r} non-resource placeholders, while there are ${t.length} input tensors provided.`);let s=0;return this.inputNodes.reduce((o,i)=>{var a,u,l;const c=null===(l=null===(u=null===(a=this.signature)||void 0===a?void 0:a.inputs)||void 0===u?void 0:u[i])||void 0===l?void 0:l.resourceId;return o[i]=null!=c?this.resourceIdToCapturedInput[c]:t[s++],o},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return null==this.initializer?[]:this.initializer.execute({},null==this.initializerSignature?[]:Object.keys(this.initializerSignature.outputs))}executeInitializerGraphAsync(){var t=this;return(0,X.c)(function*(){return null==t.initializer?[]:t.initializer.executeAsync({},null==t.initializerSignature?[]:Object.keys(t.initializerSignature.outputs))})()}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){const e=this.initializerSignature.outputs,r=Object.keys(e);for(let s=0;s<r.length;s++)this.resourceIdToCapturedInput[e[r[s]].resourceId]=t[s]}}execute(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const r=this.executor.execute(t,e);return r.length>1?r:r[0]}executeAsync(t,e){var r=this;return(0,X.c)(function*(){null==r.resourceIdToCapturedInput&&r.setResourceIdToCapturedInput(yield r.executeInitializerGraphAsync()),t=r.normalizeInputs(t),e=r.normalizeOutputs(e);const s=yield r.executor.executeAsync(t,e);return s.length>1?s:s[0]})()}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,r)=>(e[r]=[t[r]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&ct(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}function ki(n){return Nh.apply(this,arguments)}function Nh(){return(Nh=(0,X.c)(function*(n,t={},e=Ee){if(null==n)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof n&&(n=function z$(n){return n.endsWith("/")||(n+="/"),`${n}${M$}${B$}`}(n));const r=new hg(n,t,e);return yield r.load(),r})).apply(this,arguments)}const Ln=z();Ln.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15),Ln.registerFlag("WEBGPU_CPU_FORWARD",()=>!0),Ln.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1),Ln.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!0),Ln.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1),Ln.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3),Ln.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1),Ln.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0),Ln.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",()=>!1),Ln.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",()=>-1),Ln.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",()=>!1),Ln.registerFlag("WEBGPU_PRINT_SHADER",()=>""),Ln.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",()=>!1);class V${constructor(t){t&&(this.vendor=t.vendor,this.architecture=t.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return"intel"===this.vendor}}class W${constructor(t){this.device=t,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(t,e,r=!1,s=!0){let o;const i=pg(t,e);return s?(this.freeBuffers.has(i)||this.freeBuffers.set(i,[]),this.freeBuffers.get(i).length>0?(o=this.freeBuffers.get(i).pop(),this.numFreeBuffers--):(o=this.device.createBuffer({size:t,usage:e,mappedAtCreation:r}),this.numBytesAllocated+=t)):(o=this.device.createBuffer({size:t,usage:e,mappedAtCreation:r}),this.numBytesAllocated+=t),this.usedBuffers.has(i)||this.usedBuffers.set(i,[]),this.usedBuffers.get(i).push(o),this.numUsedBuffers++,this.numBytesUsed+=t,o}releaseBuffer(t,e=!0){if(0===this.freeBuffers.size)return;const r=t.size,o=pg(r,t.usage),i=this.usedBuffers.get(o),a=i.indexOf(t);if(a<0)throw new Error("Cannot find the buffer in buffer manager");i[a]=i[i.length-1],i.pop(),this.numUsedBuffers--,this.numBytesUsed-=r,e?(this.freeBuffers.get(o).push(t),this.numFreeBuffers++):(t.destroy(),this.numBytesAllocated-=r)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((t,e)=>{t.forEach(r=>{r.destroy()})}),this.usedBuffers.forEach((t,e)=>{t.forEach(r=>{r.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function pg(n,t){return`${n}_${t}`}class U${constructor(t){this.device=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(t,e,r,s){const i=t*e*mg(r),a=fg(t,e,r,s);if(this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.usedTextures.has(a)||this.usedTextures.set(a,[]),this.numBytesUsed+=i,this.numUsedTextures++,this.freeTextures.get(a).length>0){this.numFreeTextures--;const l=this.freeTextures.get(a).shift();return this.usedTextures.get(a).push(l),l}this.numBytesAllocated+=i;const u=this.device.createTexture({size:[t,e],format:r,usage:s});return this.usedTextures.get(a).push(u),u}releaseTexture(t){if(0===this.freeTextures.size)return;const e=t.width,r=t.height,s=t.format,i=fg(e,r,s,t.usage);this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.freeTextures.get(i).push(t),this.numFreeTextures++,this.numUsedTextures--;const a=this.usedTextures.get(i),u=a.indexOf(t);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(u,1);const l=mg(s);this.numBytesUsed-=e*r*l}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((t,e)=>{t.forEach(r=>{r.destroy()})}),this.usedTextures.forEach((t,e)=>{t.forEach(r=>{r.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function fg(n,t,e,r){return`${n}_${t}_${e}_${r}`}function mg(n){if("rgba8unorm"===n)return 16;throw new Error(`${n} is not supported!`)}function G$(n,t){if(Math.max(...n)>5)throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");const e=n.length,s=n.map(i=>`${t}.${"xyzwuv"[i]}`),o=new Array(e-1);o[e-2]=s[e-1];for(let i=e-3;i>=0;--i)o[i]=`(${o[i+1]} * ${s[i+1]})`;return o}const ws=(n,t,e)=>"int32"===e?`atomicAdd(${n}, bitcast<i32>(${t}));`:`\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${t});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${n}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`;var qa=function(n){return n[n.FROM_PIXELS=0]="FROM_PIXELS",n[n.DRAW=1]="DRAW",n}(qa||{});const ze=(n,t="f32")=>{switch(n){case 1:return`${t}`;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${n}-component ${t} is not supported.`)}};function Pt(n){if(n<=1)return"i32";if(2===n)return"vec2<i32>";if(3===n)return"vec3<i32>";if(4===n)return"vec4<i32>";if(5===n)return"vec5";if(6===n)return"vec6";throw Error(`GPU for rank ${n} is not yet supported`)}function Xr(n){if(0===n)return"x";if(1===n)return"y";if(2===n)return"z";if(3===n)return"w";if(4===n)return"u";if(5===n)return"v";throw Error(`Index ${n} is not yet supported`)}function ie(...n){let t;switch(n.length){case 0:t="\n        fn main()\n      ";break;case 1:t=`\n        fn main(${n[0]} : i32)\n      `;break;default:throw Error("Unreachable")}return t}function gg(n,t){let e;return e=`\n     ${function j$(n){return`\n  @compute @workgroup_size(${n.workgroupSize[0]}, ${n.workgroupSize[1]}, ${n.workgroupSize[2]})\n`}(t)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${n?"main(getGlobalIndex());":"main();"};\n      }\n    `,e}const yg="\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n",q$="\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n";function dl(n,t=""){const e=n.length,r=""!==t?`get${t.charAt(0).toUpperCase()+t.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",s=""!==t?`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides`:"outShapeStrides";if(e<=1)return`fn ${r}(index : i32) -> i32 { return index; }`;const o=pt(n),i=Pt(e),a=[];for(let l=0;l<e;l++)a.push(`d${l}`);if(1===o.length)return`    fn ${r}(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.${s}; let d1 = index - d0 * uniforms.${s};\n      return vec2<i32>(d0, d1);\n    }`;let u;return u="var index2 = index;"+o.map((l,c)=>`let ${a[c]} = index2 / uniforms.${s}.${Xr(c)}; ${c===o.length-1?`let ${a[c+1]} = index2 - ${a[c]} * uniforms.${s}.${Xr(c)}`:`index2 = index2 - ${a[c]} * uniforms.${s}.${Xr(c)}`};`).join(""),`\n    fn ${r}(index : i32) -> ${i} {\n      ${u}\n      return ${i}(${a.join(",")});\n    }\n  `}function e_(n){let t="";switch(n){case 0:case 1:t+="\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        ";break;case 2:t+="\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        ";break;case 3:t+="\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        ";break;case 4:t+="\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        ";break;case 5:t+="\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        ";break;case 6:t+="\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        ";break;default:N(!1,()=>`Unsupported ${n}D shape`)}return t}function xg(n){return 1===n.dispatch[1]&&1===n.dispatch[2]}function xo(n,t=1){if("float32"===n)return ze(t,"f32");if("int32"===n||"bool"===n)return ze(t,"i32");throw new Error(`type ${n} is not supported.`)}function bg(n){return!(n.dispatchLayout.hasOwnProperty("y")&&0!==n.dispatchLayout.y.length||n.dispatchLayout.hasOwnProperty("z")&&0!==n.dispatchLayout.z.length)}const bo=n=>{let t=1;for(let e=0;e<n.length;e++)t*=n[e];return t};function ae(n,t,e=[1,1,1],r=[1,1,1]){const[s,o,i]=[Math.ceil(bo(n.x.map(a=>t[a]))/(e[0]*r[0])),n.y?Math.ceil(bo(n.y.map(a=>t[a]))/(e[1]*r[1])):1,n.z?Math.ceil(bo(n.z.map(a=>t[a]))/(e[2]*r[2])):1];return[s,o,i]}function wg(n,t,e=!1){if(e)return[8,8,1];const r=bo(n.x.map(o=>t[o])),s=bo(n.y.map(o=>t[o]));return r<=4?[4,16,1]:s<=4?[16,4,1]:[16,16,1]}function vg(n,t,e=!1){if(e)return[4,4,1];const r=bo(n.x.map(o=>t[o])),s=bo(n.y.map(o=>t[o]));return r<=4?[1,2,1]:s<=4?[2,1,1]:[2,2,1]}function he(n){return{x:n.map((t,e)=>e)}}function Cg(n){if("float32"===n||"int32"===n||"bool"===n||"string"===n)return 4;if("complex64"===n)return 8;throw new Error(`Unknown dtype ${n}`)}function Sg(){return!!(typeof globalThis<"u"&&globalThis.navigator&&globalThis.navigator.gpu)}function Ig(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&N("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGPU backend.`)})}var qr=function(n){return n[n.MatMulReduceProgram=0]="MatMulReduceProgram",n[n.MatMulSplitKProgram=1]="MatMulSplitKProgram",n[n.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",n[n.MatMulPackedProgram=3]="MatMulPackedProgram",n[n.MatMulMax=4]="MatMulMax",n}(qr||{});const s_=z().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");let $h=(()=>{class n extends It{nextDataId(){return n.nextDataId++}constructor(e,r){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!Sg())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new V$(r),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new W$(this.device),this.textureManager=new U$(this.device),this.tensorMap=new Wt(this,Sn()),z().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(e,r=!1){if(!this.tensorMap.has(e))return!0;const s=this.tensorMap.get(e);return r?s.refCount=0:s.refCount--,!(s.refCount>0||(null!=s.complexTensorInfos&&(this.disposeData(s.complexTensorInfos.real.dataId),this.disposeData(s.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e)?(this.tensorDataPendingDisposal.push(e),0):(this.releaseResource(e),this.tensorMap.delete(e),0)))}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){const r=this.tensorMap.get(e);if(r&&r.resource){if(r.external)return void(r.resource=null);r.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(r.resource):r.resource instanceof GPUTexture&&this.textureManager.releaseTexture(r.resource),r.resource=null}}refCount(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0}incRef(e){this.tensorMap.get(e).refCount++}decRef(e){this.tensorMap.has(e)&&this.tensorMap.get(e).refCount--}write(e,r,s){if("complex64"===s&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.tensorMap.set(o,{dtype:s,shape:r,values:e,refCount:1}),o}move(e,r,s,o,i){if("complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:o,shape:s,values:r,refCount:i})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(e=>{this.releaseResource(e),this.tensorMap.delete(e)}),this.uniformPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e)),this.stagingPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e,!1)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}checkCompileCompletionAsync(){var e=this;return(0,X.c)(function*(){let r;try{r=yield Promise.all(Object.values(e.pipelineCache))}catch(s){throw new Error(s.message)}Object.keys(e.pipelineCache).map((s,o)=>{e.pipelineCache[s]=r[o]})})()}getBufferData(e){var r=this;return(0,X.c)(function*(){if(z().getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;const s=e.size,o=r.bufferManager.acquireBuffer(s,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);r.ensureCommandEncoderReady(),r.endComputePassEncoder(),r.commandEncoder.copyBufferToBuffer(e,0,o,0,s),r.submitQueue(),yield o.mapAsync(GPUMapMode.READ);const i=o.getMappedRange().slice(0);return o.unmap(),null!=o&&r.bufferManager.releaseBuffer(o),z().getBool("WEBGPU_USE_PROFILE_TOOL")&&(N(void 0!==r.dummyContext,()=>"Fail to get context for profiling tool"),r.dummyContext.getCurrentTexture()),i})()}convertAndCacheOnCPU(e,r){const s=this.tensorMap.get(e);return s.values=r,s.values}readSync(e){const r=this.tensorMap.get(e),{values:s,complexTensorInfos:o}=r;if(null!=s||"string"===r.dtype)return s;if("complex64"===r.dtype){const w=er(mo(this.readSync(o.real.dataId),this.readSync(o.imag.dataId)).buffer,"float32");return this.convertAndCacheOnCPU(e,w),w}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));const i=["opaque","premultiplied"],a=r.resource,u=a.size;N(u%4==0,()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");const l=u/4,c=new ArrayBuffer(u),d=256,h=256,p=i.map(g=>new OffscreenCanvas(d,h)),m=new OffscreenCanvas(d,h);this.endComputePassEncoder(),p.map((g,x)=>{const w=g.getContext("webgpu");return w.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:i[x]}),w.getCurrentTexture()}).map((g,x)=>{const S=(M,W,q)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:a,bytesPerRow:1024,offset:q},{texture:g},{width:M,height:W}),this.submitQueue();const re=m.getContext("2d",{willReadFrequently:!0});re.clearRect(0,0,M,W),re.drawImage(p[x],0,0);const oe=re.getImageData(0,0,M,W).data,ge=i[x],Ie=new Uint8ClampedArray(c,q,M*W*4);for(let ve=0;ve<Ie.length;ve+=4)if("premultiplied"===ge)Ie[ve+3]=oe[ve+3];else{const qe=oe[ve];Ie[ve]=oe[ve+2],Ie[ve+1]=oe[ve+1],Ie[ve+2]=qe}},k=Math.floor(l/(d*h));let _=d,A=h,P=0;for(let M=0;M<k;M++)S(_,A,P),P+=d*h*4;const L=l%(d*h);A=Math.floor(L/d),A>0&&(S(_,A,P),P+=A*(4*d)),_=L%d,_>0&&S(_,1,P)});const y=er(c,r.dtype);return this.convertAndCacheOnCPU(e,y),y}read(e){var r=this;return(0,X.c)(function*(){if(!r.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);const s=r.tensorMap.get(e),{values:o}=s;if(null!=o)return o;let i;if("complex64"===s.dtype){const a=yield Promise.all([r.read(s.complexTensorInfos.real.dataId),r.read(s.complexTensorInfos.imag.dataId)]);i=mo(a[0],a[1])}else i=er(yield r.getBufferData(s.resource),s.dtype);return r.convertAndCacheOnCPU(e,i),i})()}copyBuffer(e){const r=e.size,o=this.bufferManager.acquireBuffer(r,e.usage);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,o,0,r),this.submitQueue(),o}createTensorFromGPUData(e,r,s){let o=e.buffer;if("complex64"===s)throw new Error("Cannot write to a complex64 dtype. ");const i={id:this.nextDataId()};this.tensorMap.set(i,{dtype:s,shape:r,values:null,refCount:1,external:e.zeroCopy});const a=this.tensorMap.get(i),u=Cg(a.dtype)*j(a.shape);if(e.buffer.size<u)throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${u})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(o=this.copyBuffer(o)),a.resource=o,Sn().makeTensorFromDataId(i,r,s,this)}readToGPU(e){const r=this.tensorMap.get(e),{values:s,dtype:o,shape:i,resource:a}=r;if("complex64"===o)throw new Error("Does not support reading buffer for complex64 dtype.");if(null==a)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=a.size,d=this.bufferManager.acquireBuffer(l,a.usage);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,d,0,l),this.submitQueue();const h=this.makeTensorInfo(i,o),p=Sn().makeTensorFromTensorInfo(h);return this.tensorMap.get(h.dataId).resource=d,{tensorRef:p,buffer:d}}bufferSync(e){const r=this.readSync(e.dataId);if("string"===e.dtype)try{const s=r.map(o=>Fr(o));return dt(e.shape,e.dtype,s)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return dt(e.shape,e.dtype,r)}time(e){var r=this;return(0,X.c)(function*(){!r.supportTimestampQuery&&!r.hasTimestampQueryWarned&&(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --enable-dawn-features=allow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),r.hasTimestampQueryWarned=!0);const s=r.activeTimers,o=[];let i=!1;null==r.programTimersStack?(r.programTimersStack=o,i=!0):r.activeTimers.push(o),r.activeTimers=o,e();const a=Lr(r.activeTimers.map(d=>d.query)).filter(d=>null!=d),u=Lr(r.activeTimers.map(d=>d.name)).filter(d=>null!=d);r.activeTimers=s,i&&(r.programTimersStack=null);const l={uploadWaitMs:r.uploadWaitMs,downloadWaitMs:r.downloadWaitMs,kernelMs:null,wallMs:null},c=yield Promise.all(a);return l.kernelMs=Oo(c),l.getExtraProfileInfo=()=>c.map((d,h)=>({name:u[h],ms:d})).map(d=>`${d.name}: ${d.ms}`).join(", "),r.uploadWaitMs=0,r.downloadWaitMs=0,l})()}makeTensorInfo(e,r,s){return"string"===r&&null!=s&&s.length>0&&As(s[0])&&(s=s.map(i=>us(i))),{dataId:this.write(s,e,r),shape:e,dtype:r}}tensorToBinding(e){if(!e)return null;const s=this.tensorMap.get(e.dataId).resource;return s instanceof GPUBuffer?{buffer:s}:s instanceof GPUTexture?s.createView():s}uploadToGPU(e){const r=this.tensorMap.get(e);if(null!=r.resource)return;const s=Cg(r.dtype)*j(r.shape);let o;const i=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(r.values){if(o=this.bufferManager.acquireBuffer(s,i,!0),"unmapped"===o.mapState){const a=this.bufferManager.acquireBuffer(s,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),u=a.getMappedRange();"int32"===r.dtype||"bool"===r.dtype?new Int32Array(u).set(r.values):new Float32Array(u).set(r.values),a.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,o,0,s),this.stagingPendingDisposal.push(a)}else{const a=o.getMappedRange();"int32"===r.dtype||"bool"===r.dtype?new Int32Array(a).set(r.values):new Float32Array(a).set(r.values),o.unmap()}r.values=null}else o=this.bufferManager.acquireBuffer(s,i);r.resource=o}makeUniforms(e){let r=0,s=0;const o=[];let i=1;e.forEach(l=>{let c;switch(0===l.data.length&&(l.data=[1]),l.data.length){case 1:c=4;break;case 2:c=8;break;case 3:case 4:case 5:case 6:c=16;break;default:N(!1,()=>`Unsupported ${l.data.length}D shape`)}(5===s||6===s)&&(c=16),c>i&&(i=c),r=Math.ceil(r/c)*c,s=l.data.length,o.push(r),r+=4*l.data.length}),r=Math.ceil(r/i)*i;const a=new ArrayBuffer(r);e.forEach((l,c)=>{const d=o[c];"int32"===l.type?new Int32Array(a,d,l.data.length).set(l.data):"uint32"===l.type?new Uint32Array(a,d,l.data.length).set(l.data):new Float32Array(a,d,l.data.length).set(l.data)});const u=this.bufferManager.acquireBuffer(r,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(u,0,a,0,r),this.uniformPendingDisposal.push(u),{offset:0,size:r,buffer:u}}runWebGPUProgram(e,r,s,o,i){if(i||(i=this.makeTensorInfo(e.outputShape,s)),0===j(i.shape))return this.tensorMap.get(i.dataId).values=dn(i.dtype,0),i;this.uploadToGPU(i.dataId),e.dispatch=((n,t)=>{const e=this.device.limits.maxComputeWorkgroupsPerDimension,r=t.dispatchLayout,s=t.dispatch;if(s.every(i=>i<=e))return s;N(s[0]>e&&void 0===r.y&&void 0===r.z,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let o=Math.ceil(Math.sqrt(s[0]));return o>e?(o=Math.ceil(Math.cbrt(s[0])),N(o<=e,()=>"Total dispatch size exceeds WebGPU maximum."),[o,o,o]):[o,o,1]})(0,e);const a=r.map((l,c)=>{if("complex64"===l.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(l.dataId),{dtype:this.tensorMap.get(l.dataId).dtype,shape:l.shape,name:e.variableNames[c]}});e.shaderKey=function X$(n,t,e){let r=n.shaderKey;if(null!=n.pixelsOpType)return r;const s=[],o=[];t.forEach(c=>{s.push(c.shape),o.push(c.dtype)}),s.push(e.shape),o.push(e.dtype);const i=t.map(c=>ms(c.shape,e.shape)),a=t.map(c=>ot(c.shape,e.shape)).join("_"),u=i.map(c=>c.join("_")).join(";"),l=xg(n)?"flatDispatch":"";return r+="_"+(n.workgroupSize?n.workgroupSize.join(","):"")+s.map(c=>c.length).join(",")+o.join(",")+n.variableNames.join(",")+u+a+l,r}(e,a,i);const u=z().getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=((n,t,e,r,s)=>{const i=function K$(n,t,e){const r=[],s=e.workgroupSize[0]*e.workgroupSize[1]*e.workgroupSize[2];if(e.outputComponent=e.outputComponent?e.outputComponent:1,r.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${xg(e)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${s}u +\n                localIndex);\n        `}\n      }\n    `),null!=e.pixelsOpType){const m=e.pixelsOpType===qa.FROM_PIXELS?`@group(0) @binding(0) var<storage, read_write> result: array<${xo(t.dtype,e.outputComponent)}>;`:`@group(0) @binding(1) var<storage, read> inBuf : array<${xo(n[0].dtype,e.outputComponent)}>;`;r.push(`\n        struct Uniform {\n          outShapeStrides : ${3===t.shape.length?"vec2<i32>":"i32"},\n          size            : i32,\n          numChannels     : i32,\n          alpha           : f32,\n        };\n\n        ${m}\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);const g=bg(e);return[yg,r.join("\n"),dl(t.shape),e.getUserCode(),gg(g,e)].join("\n")}let o,i,a="struct Uniforms { NAN : f32, INFINITY : f32, ";e.variableNames.forEach((m,y)=>{const g=Pt(n[y].shape.length);a+=`${m.charAt(0).toLowerCase()+m.slice(1)}Shape : ${g}, `,o=n[y].shape.length-1,i=Pt(o),a+=`${m.charAt(0).toLowerCase()+m.slice(1)}ShapeStrides: ${i}, `});const u=Pt(t.shape.length);a+=`outShape : ${u}, `,o=t.shape.length-1,i=Pt(o),a+=`\n         outShapeStrides: ${i}, `,e.size&&(a+="size : i32, "),e.uniforms&&(a+=e.uniforms),a+="};",a=function n_(n){return n=n.replace(/(\w+)\s*:\s*vec(5|6)/g,r=>"@align(16) "+r),n=n.replace(/vec(5|6)\s*,\s*(\w+)/g,(r,s,o)=>`vec${s}, @align(16) ${o}`),n}(a),r.push(a),r.push(e.atomic?"\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    ":`\n      @group(0) @binding(0) var<storage, read_write> result: array<${xo(t.dtype,e.outputComponent)}>;\n    `),e.variableNames.forEach((m,y)=>{r.push(`\n      @group(0) @binding(${1+y}) var<storage, read> ${m}: array<${xo(n[y].dtype,e.variableComponents?e.variableComponents[y]:e.outputComponent)}>;\n        `)}),""!==a&&r.push(`\n      @group(0) @binding(${1+e.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);const l=function J$(n,t){const{x:e,y:r=[],z:s=[]}=t,o=n.length,i=e.length+r.length+s.length;if(i!==o)return"";if(e.length===o)return`fn getOutputCoords() -> ${Pt(o)}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `;let a="";const u=[e,r,s];for(let h=0;h<u.length;h++){const p=u[h];if(0!==p.length)if(1===p.length)a+=`let d${p[0]} = i32(globalId[${h}]);`;else{const m=G$(p,"uniforms.outShape");a+=`var index${h} = i32(globalId[${h}]);`;for(let y=0;y<m.length;y++)a+=`let d${p[y]} = index${h} / ${m[y]};`,a+=y===m.length-1?`let d${p[y+1]} = index${h} - d${p[y]} * ${m[y]};`:`index${h} = index${h} - d${p[y]} * ${m[y]};`}}const l=[];for(let h=0;h<i;h++)l.push(`d${h}`);const c=Pt(i);let d=`fn getOutputCoords() -> ${c} {\n  ${a}\n`;return d+=0===l.length?`return ${c}(0); }`:`return ${c}(${l.join(",")}); }`,d}(t.shape,e.dispatchLayout),c=[yg,r.join("\n")+q$,dl(t.shape),l,e_(t.shape.length)];e.atomic||c.push(function t_(n,t,e){const r=n.length,s=xo(t,e);let o=`fn setOutputAtIndex(flatIndex : i32, value : ${ze(e)}) {\n      result[flatIndex] = ${s}(value);\n    }\n\n    fn setOutputAtIndexI32(flatIndex : i32, value : ${ze(e,"i32")}) {\n      result[flatIndex] = ${s}(value);\n    }\n    `;if(r>=2){const i=["d0","d1","d2","d3","d4","d5"].slice(0,r),a=Pt(r);o+=`\n      fn setOutputAtCoords(${i.map(u=>`${u} : i32`).join(", ")}, value : ${ze(e)}) {\n        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));\n        setOutputAtIndex(flatIndex${1===e?"":` / ${e}`}, value);\n      }\n      fn setOutputAtCoordsI32(${i.map(u=>`${u} : i32`).join(", ")}, value : ${ze(e,"i32")}) {\n        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));\n        setOutputAtIndexI32(flatIndex${1===e?"":` / ${e}`}, value);\n      }\n    `}return o}(t.shape,t.dtype,e.outputComponent)),e.variableNames.forEach((m,y)=>{c.push(`${dl(n[y].shape,m)}`)});const d=n.map((m,y)=>function Z$(n,t,e,r){let s=function Y$(n,t){const e=n.name,r=n.shape.length,s=Pt(r),o="get"+e.charAt(0).toUpperCase()+e.slice(1),i=["d0","d1","d2","d3","d4","d5"].slice(0,r),a=i.map(c=>`${c} : i32`).join(", ");if(r<1)return`\n      fn ${o}() -> ${ze(t)} {\n        return ${ze(t)}(${e}[0]);\n      }\n    `;const u=`uniforms.${e.charAt(0).toLowerCase()+e.slice(1)}Shape`;let l=`${r}D`;return 0===r&&(l="1D"),`\n    fn ${o}(${a}) -> ${ze(t)} {\n      return ${ze(t)}(${e}[getIndexFromCoords${l}(${s}(${i.join(",")}),\n        ${u})${1===t?"":` / ${t}`}]);\n    }\n   `}(n,e);return n.shape.length<=t.length&&(s+=function Q$(n,t,e,r){const s=n.name,o=s.charAt(0).toUpperCase()+s.slice(1),i="get"+o+"ByOutput",a=n.shape.length,u=t.length,l=Pt(u);if(ot(n.shape,t)&&r)return`\n    fn ${i}Index(globalIndex : i32) -> ${ze(e)} {\n      return ${ze(e)}(${s}[globalIndex]);\n    }\n\n    fn ${i}Coords(coords : ${l}) -> ${ze(e)} {\n      return ${ze(e)}(${s}[${u>1?"getOutputIndexFromCoords(coords)":"coords"}${1===e?"":` / ${e}`}]);\n    }\n    `;const c=ms(n.shape,t),d=u-a;let h="";if(0===a)return`\n    fn ${i}Index(globalIndex : i32) -> ${ze(e)}{\n      return get${o}();\n    }\n\n    fn ${i}Coords(coords : ${l}) -> ${ze(e)}{\n      return get${o}();\n    }\n  `;h=u<2&&c.length>=1?"coords = 0;":c.map(g=>`coords.${Xr(g+d)} = 0;`).join("\n");let p="";p=u<2&&a>0?"coords":u>1?`${Pt(a)}(${n.shape.map((w,S)=>`coords.${Xr(S+d)}`).join(", ")})`:"coords";const m=`uniforms.${s.charAt(0).toLowerCase()+s.slice(1)}Shape`,y=`${a}D`;return`\n  fn ${i}Index(globalIndex : i32) -> ${ze(e)} {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${h}\n    return ${ze(e)}(${s}[getIndexFromCoords${y}(${p}, ${m})${1===e?"":` / ${e}`}]);\n  }\n\n  fn ${i}Coords(coordsIn : ${l}) -> ${ze(e)} {\n    var coords = coordsIn;\n    ${h}\n    return ${ze(e)}(${s}[getIndexFromCoords${y}(${p}, ${m})${1===e?"":` / ${e}`}]);\n  }\n`}(n,t,e,r)),s}(m,t.shape,e.variableComponents?e.variableComponents[y]:e.outputComponent,e.dispatchLayout.x.length===t.shape.length)).join("\n");c.push(d),c.push(e.getUserCode());const h=bg(e);return c.push(gg(h,e)),c.join("\n")}(e,{dtype:r.dtype,shape:r.shape},t),a=n.createShaderModule({code:i,label:t.constructor.name});let u=z().get("WEBGPU_PRINT_SHADER");if(""!==u){u=u.toLowerCase();const l=u.split(",");("all"===u||l.some(c=>t.shaderKey.toLowerCase().includes(c)))&&(console.group(t.shaderKey),console.debug(i),console.groupEnd())}return s?n.createComputePipelineAsync({compute:{module:a,entryPoint:"_start"},label:t.constructor.name,layout:"auto"}):n.createComputePipeline({compute:{module:a,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})})(this.device,e,a,i,u)),e.pipeline=this.pipelineCache[e.shaderKey],u||this.recordAndSubmit(e,i,r,o),i}recordAndSubmit(e,r,s,o){if(e.pipeline instanceof Promise)throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let i=[],a=[];const u="int32";if(null==e.pixelsOpType){i.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),a=s.concat(r).map(m=>m.shape);const p="int32";a.map(m=>{i.push({type:p,data:m});const y=pt(m);i.push({type:p,data:y})})}else{const p=pt(r.shape);i.push({type:u,data:p})}if(e.size){const p=j(e.outputShape);i.push({type:u,data:[e.outputComponent?p/e.outputComponent:p]})}o&&(i=[...i,...o]);const l=[this.tensorToBinding(r),...s.map(p=>this.tensorToBinding(p)),this.makeUniforms(i)];s.forEach(p=>{this.commandQueueOwnedIds.add(p.dataId)}),this.commandQueueOwnedIds.add(r.dataId);const c=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:l.map((p,m)=>({binding:m,resource:p}))}),d=null!=this.activeTimers;this.ensureCommandEncoderReady();const h={};d&&this.supportTimestampQuery?(this.endComputePassEncoder(),null==this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),h.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1},this.computePassEncoder=this.commandEncoder.beginComputePass(h)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(h)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,c),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(d||z().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||e.pixelsOpType===qa.DRAW)&&(this.endComputePassEncoder(),d?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())}getQueryTime(){var e=this;return(0,X.c)(function*(){if(!e.supportTimestampQuery)return 0;null==e.queryResolveBuffer&&(e.queryResolveBuffer=e.bufferManager.acquireBuffer(8*e.querySetCount,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),e.commandEncoder.resolveQuerySet(e.querySet,0,e.querySetCount,e.queryResolveBuffer,0);const r=e.bufferManager.acquireBuffer(8*e.querySetCount,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);e.commandEncoder.copyBufferToBuffer(e.queryResolveBuffer,0,r,0,8*e.querySetCount),e.submitQueue(),yield r.mapAsync(GPUMapMode.READ);const s=new BigUint64Array(r.getMappedRange()),o=Number(s[1]-s[0])/1e6;return r.unmap(),e.bufferManager.releaseBuffer(r),o})()}shouldExecuteOnCPU(e,r=s_){return z().getBool("WEBGPU_CPU_FORWARD")&&e.every(s=>null==this.tensorMap.get(s.dataId).resource&&j(s.shape)<r)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(null!=this.querySet&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}}return n.nextDataId=0,n})();Sg()&&of("webgpu",(0,X.c)(function*(){const n={powerPreference:z().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=yield navigator.gpu.requestAdapter(n),e={},r=[];t.features.has("timestamp-query")&&r.push("timestamp-query"),t.features.has("bgra8unorm-storage")&&r.push(["bgra8unorm-storage"]),e.requiredFeatures=r;const s=t.limits;e.requiredLimits={maxComputeWorkgroupStorageSize:s.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:s.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:s.maxStorageBufferBindingSize,maxBufferSize:s.maxBufferSize,maxComputeWorkgroupSizeX:s.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:s.maxComputeInvocationsPerWorkgroup};const o=yield t.requestDevice(e),i=yield t.requestAdapterInfo();return new $h(o,i)}),3);var De=function(n){return n[n.ADD=0]="ADD",n[n.ATAN2=1]="ATAN2",n[n.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",n[n.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",n[n.DIV=4]="DIV",n[n.ELU_DER=5]="ELU_DER",n[n.EQUAL=6]="EQUAL",n[n.FLOOR_DIV=7]="FLOOR_DIV",n[n.GREATER=8]="GREATER",n[n.GREATER_EQUAL=9]="GREATER_EQUAL",n[n.LESS=10]="LESS",n[n.LESS_EQUAL=11]="LESS_EQUAL",n[n.LOGICAL_AND=12]="LOGICAL_AND",n[n.LOGICAL_OR=13]="LOGICAL_OR",n[n.MAX=14]="MAX",n[n.MIN=15]="MIN",n[n.MOD=16]="MOD",n[n.MUL=17]="MUL",n[n.NOT_EQUAL=18]="NOT_EQUAL",n[n.POW=19]="POW",n[n.PRELU=20]="PRELU",n[n.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",n[n.SUB=22]="SUB",n}(De||{});const i_="let resultTemp = a + b;",a_="let resultTemp = atan2(a, b);",u_="let resultTemp = areal * breal - aimag * bimag;",l_="let resultTemp = areal * bimag + aimag * breal;",c_="let resultTemp = a / b;",d_="let resultTemp = select(a * (b + 1.0), a, b >= b - b);",h_="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a == b);\n",p_="\n  let remainder =\n      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));\n  let quotient = (a - remainder) / b;\n  let resultTemp =\n      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));\n",f_="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a > b);\n",m_="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a >= b);\n",g_="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a < b);\n",y_="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a <= b);\n",x_="return f32(a >= 1.0 && b >= 1.0);",b_="return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));",w_="return f32(a >= 1.0 || b >= 1.0);",v_="return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));",C_="let resultTemp = max(a, b);",S_="let resultTemp = min(a, b);",I_="\n  let isNaN = b == 0.;\n  var resultTemp = a % b;\n  resultTemp = select((resultTemp + b) % b, resultTemp,\n      (a < 0. && b < 0.) || (a >= 0. && b > 0.));\n",k_="\n  let isNaN = !vec4<bool>(b);\n  var resultTemp = vec4<f32>(a % b);\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n",N_="let resultTemp = a * b;",$_="\n  var resultTemp = f32(a != b);\n  let valueForNaN = 1.0;\n",__="\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n",T_="\n  let isNaN = a < 0.0 && floor(b) < b;\n  if (b == 0.0) {\n    return 1.0;\n  }\n  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),\n      round(abs(b) % 2.0) != 1.0);\n",E_="\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n",R_="if (a < 0.0) { return b * a; }  return a;",A_="\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n",D_="let resultTemp = (a - b) * (a - b);",P_="let resultTemp = a - b;";function _h(n,t){let e;do{switch(n){case De.ATAN2:e=a_;break;case De.MAX:e=C_;break;case De.MIN:e=S_;break;case De.MOD:e=t?k_:I_;break;case De.NOT_EQUAL:e=t?__:$_;break;case De.POW:e=t?E_:T_;break;default:continue}let r,s,o;return t?(r="isnanVec4",s="vec4<f32>",o="vec4<bool>"):(r="isnan",s="f32",o="bool"),`\n      let aIsNaN = ${r}(a);\n      let aPostLegalization = select(a, ${s}(42), aIsNaN);\n      let bIsNaN = ${r}(b);\n      let bPostLegalization = select(b, ${s}(42), bIsNaN);\n      let isNaN = false;\n      let valueForNaN = uniforms.NAN;\n      {\n        let a = aPostLegalization;\n        let b = bPostLegalization;\n        ${e}\n        return select(\n            resultTemp, ${s}(valueForNaN),\n            ${o}(isNaN) | aIsNaN | bIsNaN);\n      }\n    `}while(0);switch(n){case De.ADD:e=i_;break;case De.COMPLEX_MULTIPLY_IMAG:e=l_;break;case De.COMPLEX_MULTIPLY_REAL:e=u_;break;case De.DIV:e=c_;break;case De.ELU_DER:e=d_;break;case De.EQUAL:e=h_;break;case De.FLOOR_DIV:e=p_;break;case De.GREATER:e=f_;break;case De.GREATER_EQUAL:e=m_;break;case De.LESS:e=g_;break;case De.LESS_EQUAL:e=y_;break;case De.LOGICAL_AND:return t?b_:x_;case De.LOGICAL_OR:return t?v_:w_;case De.MUL:e=N_;break;case De.PRELU:return t?A_:R_;case De.SQUARED_DIFFERENCE:e=D_;break;case De.SUB:e=P_}return`\n    ${e}\n    return resultTemp;\n  `}var se=function(n){return n[n.ABS=0]="ABS",n[n.ACOS=1]="ACOS",n[n.ACOSH=2]="ACOSH",n[n.ASIN=3]="ASIN",n[n.ASINH=4]="ASINH",n[n.ATAN=5]="ATAN",n[n.ATANH=6]="ATANH",n[n.CEIL=7]="CEIL",n[n.COS=8]="COS",n[n.COSH=9]="COSH",n[n.ELU=10]="ELU",n[n.ERF=11]="ERF",n[n.EXP=12]="EXP",n[n.EXPM1=13]="EXPM1",n[n.FLOOR=14]="FLOOR",n[n.IS_FINITE=15]="IS_FINITE",n[n.IS_INF=16]="IS_INF",n[n.IS_NAN=17]="IS_NAN",n[n.LINEAR=18]="LINEAR",n[n.LOG=19]="LOG",n[n.LOG1P=20]="LOG1P",n[n.LOGICAL_NOT=21]="LOGICAL_NOT",n[n.NEG=22]="NEG",n[n.RELU=23]="RELU",n[n.RELU6=24]="RELU6",n[n.LEAKYRELU=25]="LEAKYRELU",n[n.RECIPROCAL=26]="RECIPROCAL",n[n.ROUND=27]="ROUND",n[n.RSQRT=28]="RSQRT",n[n.SELU=29]="SELU",n[n.SIGMOID=30]="SIGMOID",n[n.SIGN=31]="SIGN",n[n.SIN=32]="SIN",n[n.SINH=33]="SINH",n[n.SOFTPLUS=34]="SOFTPLUS",n[n.SQRT=35]="SQRT",n[n.SQUARE=36]="SQUARE",n[n.STEP=37]="STEP",n[n.TAN=38]="TAN",n[n.TANH=39]="TANH",n[n.TO_INT=40]="TO_INT",n}(se||{});const O_="return abs(a);",F_="\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n",L_="\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n",B_="\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n",M_="return asinh(a);",z_="\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n",V_="\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n",W_="return ceil(a);",U_="return cos(a);",G_="\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n",H_="return exp(a) - 1.0;",j_="if (a >= 0.0) { return a; }  return (exp(a) - 1.0);",K_="\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n",X_=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  let p = ${Yd};\n  let a1 = ${Qd};\n  let a2 = ${Zd};\n  let a3 = ${Jd};\n  let a4 = ${eh};\n  let a5 = ${th};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`,q_="return exp(a);",Y_="return floor(a);",Q_="return f32(!isnan(a) && !isinf(a));",Z_="return f32(isinf(a));",J_="return f32(isnan(a));",eT="return a;",tT="if (a < 0.0) { return uniforms.NAN; }\n  return log(a);",nT="\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n",rT="return f32(!(a >= 1.0));",sT="return -a;",oT="if (a < 0.0) { return uniforms.alpha * a; } return a;",iT="\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n",aT="return 1.0 / a;",uT="return select(a, 0.0, a < 0.0);",lT="return clamp(a, 0.0, 6.0);",cT="return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));",dT="\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n",hT="return round(a);",pT="return inverseSqrt(a);",fT=`\n  if (a >= 0.0) {\n    return ${qd} * a;\n  } else {\n    return ${Xd} * (exp(a) - 1.0);\n  }\n`,mT="return 1.0 / (1.0 + exp(-1.0 * a));",gT="return sign(a);",yT="return sin(a);",xT="\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n",bT="\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n",wT="return sqrt(a);",vT="return a * a;",CT="\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n",ST="return tan(a);",IT="\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n",kT="return f32(i32((a)));";function wo(n,t){switch(n){case se.ABS:return O_;case se.ACOS:return F_;case se.ACOSH:return L_;case se.ASIN:return B_;case se.ASINH:return M_;case se.ATAN:return z_;case se.ATANH:return V_;case se.COS:return U_;case se.COSH:return G_;case se.CEIL:return W_;case se.ELU:return t?K_:j_;case se.ERF:return X_;case se.EXP:return q_;case se.EXPM1:return H_;case se.FLOOR:return Y_;case se.IS_FINITE:return Q_;case se.IS_INF:return Z_;case se.IS_NAN:return J_;case se.LINEAR:return eT;case se.LOG:return tT;case se.LOG1P:return nT;case se.LOGICAL_NOT:return rT;case se.NEG:return sT;case se.LEAKYRELU:return t?iT:oT;case se.RECIPROCAL:return aT;case se.RELU:return t?dT:uT;case se.RELU6:return t?cT:lT;case se.ROUND:return hT;case se.RSQRT:return pT;case se.SELU:return fT;case se.SIGMOID:return mT;case se.SIGN:return gT;case se.SIN:return yT;case se.SINH:return xT;case se.SOFTPLUS:return bT;case se.SQRT:return wT;case se.SQUARE:return vT;case se.STEP:return CT;case se.TAN:return ST;case se.TANH:return IT;case se.TO_INT:return kT;default:throw new Error(`BinaryType ${n} is not implemented!`)}}function Yr(n,t=!1,e=!1,r=3){if(null===n)return"";let s="";if("linear"===n)s=wo(se.LINEAR);else if("relu"===n)s=wo(se.RELU,e);else if("elu"===n)s=wo(se.ELU,e);else if("relu6"===n)s=wo(se.RELU6,e);else if("prelu"===n)s=_h(De.PRELU,e);else if("sigmoid"===n)s=wo(se.SIGMOID,e);else{if("leakyrelu"!==n)throw new Error(`Activation ${n} has not been implemented for the WebGPU backend.`);s=wo(se.LEAKYRELU,e)}const i=ze(e?4:1);let a="";return a=t?`\n      fn activation(a : ${i}, coords : vec${r}<i32>) -> ${i} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${s}\n      }`:`\n      fn activation(a : ${i}, coords : vec${r}<i32>) -> ${i} {\n        ${s}\n      }`,a}function vo(n,t){return`\n      ${n?"value = value + getBiasByOutputCoords(coords);":""}\n      ${t?"value = activation(value, coords);":""}\n      `}function kg(n,t,e=!1,r=!1,s=!1,o=1){N(n&&1===o||!n,()=>`transposeA ${n} is not compatible with component size ${o}`);const i=`\n      ${n?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}\n\n    `,a=t?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`\n  fn mm_readA(batch: i32, row: i32, col: i32) -> ${ze(o)} {\n    var value = ${ze(o)}(0.0);\n    ${e&&s?i:`\n    ${n?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}\n    {\n      ${i}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, col: i32) -> ${ze(o)} {\n    var value = ${ze(o)}(0.0);\n    ${a}\n    return value;\n  }\n  `}function Th(n,t,e,r,s=!1,o=!1,i=!1,a=1){return`\n  ${kg(e,r,s,o,i,a)}\n  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${ze(a)}) {\n    ${s&&o?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${vo(n,t)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `}function hl(n,t,e=!1,r=32,s=!1,o=32,i=!1){const a=t[1]*n[1],u=t[0]*n[0],l=e?a:r,c=e?r:a,d=l/t[0],h=r/t[1],p=n[1],m=n[0];return N((e&&4===d&&4===n[1]||!e&&(3===d||4===d))&&l%t[0]==0&&r%t[1]==0&&4===n[0],()=>`If transposeA ${e} is true, innerElementSize ${d} and workPerThread[1] ${n[1]} must be 4.\n          Otherwise, innerElementSize ${d} must be 3 or 4.\n      tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${r} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${n[0]} must be 4.`),`\n  var<workgroup> mm_Asub : array<array<vec${d}<f32>, ${l/d}>, ${c}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${u/n[0]}>, ${r}>;\n\n  ${ie()} {\n    let localRow = i32(localId.y);\n    let tileRow = localRow * ${p};\n    let tileCol = i32(localId.x);\n\n    let globalRow = i32(globalId.y) * ${p};\n    let globalCol = i32(globalId.x) * ${m};\n    let batch = ${s?"0":"i32(globalId.z)"};\n    let batchA = ${s||!i?"batch":"batch % uniforms.aShape[0]"};\n    let batchB = ${s||!i?"batch":"batch % uniforms.bShape[0]"};\n    let globalRowStart = i32(workgroupId.y) * ${a};\n\n    let numTiles = ${s?`${Math.ceil(o/r)}`:`(uniforms.dimInner - 1) / ${r} + 1`};\n    var kStart = ${s?`i32(globalId.z) * ${o}`:"0"};\n\n    var acc: array<vec4<f32>, ${p}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${h};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${p}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${((n,t)=>n?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol * ${t});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart + inputCol * ${t});\n        `)(e,d)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${h}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${r};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        ${((n,t,e,r)=>{if(n)return`\n      for (var k = 0; k < ${r}; k++) {\n        let BCached0 = mm_Bsub[k][tileCol];\n        let ACached0 = mm_Asub[k][localRow];\n        for (var i = 0; i < ${e}; i++) {\n          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);\n        }\n      }`;{let s="",o="";for(let i=0;i<t;i++)s+=`let BCached${i} = mm_Bsub[k * ${t} + ${i}][tileCol];`,o+=`acc[i] = fma(BCached${i}, vec4<f32>(ACached[${i}]), acc[i]);`;return`\n      for (var k = 0; k < ${r/t}; k++) {\n        ${s}\n        for (var i = 0; i < ${e}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          ${o}\n        }\n      }`}})(e,d,p,r)}\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${p}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`}const Ng=n=>n?"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        ":"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        ";function pl(n,t,e=!1,r=32,s=!1,o=32,i=!1,a=!1){const u=n[1]*t[1],l=n[0]*t[0],c=e?u:r,d=e?r:u;N(d%t[1]==0&&c%t[0]==0&&r%t[1]==0,()=>`tileAHight ${d} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${r} must be divisible by workgroupSize[1]${t[1]}`);const h=d/t[1],p=c/t[0],m=r/t[1],y=n[1],g=n[0],x=i?`\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${u};\n      let globalColStart = i32(workgroupId.x) * ${l};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${d}; inputRow = inputRow + ${t[1]}) {\n          for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\n            ${Ng(e)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${t[1]}) {\n              for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${r};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${g}>;\n        for (var k = 0; k < ${r}; k++) {\n          for (var inner = 0; inner < ${g}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${y}; innerRow++) {\n            let ACached = ${e?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n              acc[innerRow][innerCol] =\n                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${y}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n        for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${t[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      `:`\n  let tileRow = i32(localId.y) * ${y};\n  let tileCol = i32(localId.x) * ${g};\n\n  let globalRow = i32(globalId.y) * ${y};\n  let globalCol = i32(globalId.x) * ${g};\n  let globalRowStart = i32(workgroupId.y) * ${u};\n\n  let tileRowA = i32(localId.y) * ${h};\n  let tileColA = i32(localId.x) * ${p};\n  let tileRowB = i32(localId.y) * ${m};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${h}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${p}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${Ng(e)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${r};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${g}>;\n    for (var k = 0; k < ${r}; k++) {\n      for (var inner = 0; inner < ${g}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${y}; innerRow++) {\n        ${(n=>n?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];")(e)}\n        for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n          acc[innerRow][innerCol] =\n              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${y}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;return`\n    var<workgroup> mm_Asub : array<array<f32, ${c}>, ${d}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${l}>, ${r}>;\n\n    ${ie()} {\n      let batch = ${s?"0":"i32(globalId.z)"};\n      let batchA = ${s||!a?"batch":"batch % uniforms.aShape[0]"};\n      let batchB = ${s||!a?"batch":"batch % uniforms.bShape[0]"};\n      let numTiles = ${s?`${Math.ceil(o/r)}`:`(uniforms.dimInner - 1) / ${r} + 1`};\n      var kStart = ${s?`i32(globalId.z) * ${o}`:"0"};\n\n      var acc : array<array<f32, ${g}>, ${y}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${y}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${x}\n    }\n  `}class RT{constructor(t,e,r=!1,s=!1,o=null,i=null,a=null,u=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0]};const l=r?t[1]:t[2];if(this.isVec4=(l%4==0&&!r||e[1]%4==0&&r)&&e[2]%4==0&&!s,this.outputComponent=this.isVec4?4:1,this.isVectorA=1===e[1]&&!r,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{const h=function r_(n,t,e,r=!1){const s=[8,8,1],o=[4,4,1];return r||(n<=8&&(o[1]=1),t<=16&&e<=16&&(s[0]=4)),{workgroupSize:s,elementsPerThread:o}}(e[1],l,e[2],r);this.workgroupSize=h.workgroupSize,this.elementsPerThread=h.elementsPerThread}this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);const c=null!=o,d=null!=a;c&&this.variableNames.push("bias"),d&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=u,this.transposeA=r,this.transposeB=s,this.addBias=c,this.activation=i,this.hasPreluActivationWeights=d,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(e[1],e[2],l),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${r}_${s}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(t,e,r){const s=this.workgroupSize[1]*this.elementsPerThread[1],o=this.workgroupSize[0]*this.elementsPerThread[0];return this.tileInner=!this.isVec4&&this.isVectorA?4*this.workgroupSize[0]:o,[t%s==0,e%o==0,r%this.tileInner==0]}getUserCode(){return`\n      ${Yr(this.activation,this.hasPreluActivationWeights,this.isVec4)}\n      ${Th(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}\n      ${this.isVec4?hl(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?function ET(n,t=!1){N(1===n[1]&&1===n[2],()=>`A linear work group size is required. But got ${n}.`);const e=4*n[0];return`\n    var<workgroup> mm_Asub : array<vec4<f32>, ${n[0]}>;\n\n    ${ie()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${e} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${e} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${(n=>n?"\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ":"\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  ")(t)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${e/4}; k++) {\n          let rowB = t * ${e} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `}(this.workgroupSize,this.transposeA):pl(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}\n    `}}class DT{constructor(t,e=!1,r=!1,s=null,o=null,i=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=t,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize);const a=null!=s,u=null!=i;a&&this.variableNames.push("bias"),u&&this.variableNames.push("preluActivationWeights"),this.transposeA=e,this.transposeB=r,this.addBias=a,this.activation=o,this.hasPreluActivationWeights=u,this.shaderKey=`matMulReduce_${this.activation}_${e}_${r}`}getUserCode(){return`\n      ${Yr(this.activation,this.hasPreluActivationWeights)}\n      ${Th(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${function AT(n){return`\n    var<workgroup> sumValues : array<f32, ${n}>;\n    ${ie()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${n}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${n/2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `}(this.workgroupSize[0])}\n    `}}class OT{constructor(t,e,r,s=!1,o=!1,i=null,a=null,u=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=r,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(r[2]/this.workgroupSize[0]),Math.ceil(r[1]/this.workgroupSize[1]),r[0]];const l=null!=i;l&&this.variableNames.push("bias");const c=null!=u;c&&this.variableNames.push("preluActivationWeights"),this.transposeA=s,this.transposeB=o,this.addBias=l,this.activation=a,this.hasPreluActivationWeights=c,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${s}_${o}`}getUserCode(){return`\n      ${Yr(this.activation,this.hasPreluActivationWeights)}\n      ${Th(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${function PT(n){const t=n[1],e=n[0],r=t>e?t:e;return`\n  var<workgroup> mm_Asub : array<array<f32, ${r}>, ${t}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${e}>, ${r}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${ie()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${r} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${r};\n    globalRowB = globalRowB + ${r};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${r};\n      globalRowB = globalRowB + ${r};\n\n      for (var k = 0; k < ${r}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `}(this.workgroupSize)}\n    `}}class FT{constructor(t,e,r=!1,s=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,N(1===t[0],()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0,3]};const o=(r&&this.outputShape[1]%4==0||!r&&e%4==0)&&this.outputShape[2]%4==0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=o?4:1,o||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=ae(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],e],this.workgroupSize,this.elementsPerThread),this.transposeA=r,this.transposeB=s,this.shaderKey=`matMulSplitK_${r}_${s}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){const t=this.outputComponent;return`\n      ${kg(!1,this.transposeB,!1,!1,!1,t)}\n      fn mm_write(batch: i32, row : i32, col : i32, value : ${ze(t)}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${t}; i = i + 1) {\n            ${ws("&result[flatIndex + i]",t>1?"value[i]":"value","float32")}\n          }\n        }\n      }\n      ${4===t?hl(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):pl(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}\n    `}}class LT{constructor(t,e=null,r=null,s=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=e,this.hasPreluActivationWeights=null!=s,this.activation=r,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${r}`}getUserCode(){return`\n    ${Yr(this.activation,this.hasPreluActivationWeights)}\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${vo(this.addBias,this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `}}class BT{constructor(t){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `}}function gn(n){const{backend:t,attrs:e}=n,{shape:r,value:s}=e;let{dtype:o}=e;if(o=o||bn(s),"string"===o){const i=At(o,j(r));return i.fill(s),t.makeTensorInfo(r,o,i)}{const i=new BT(r);return t.runWebGPUProgram(i,[],o,[{type:"float32",data:[s]}])}}const MT={kernelName:Hs,backendName:"webgpu",kernelFunc:gn};function be(n){const{inputs:t,attrs:e}=n,{x:r}=t,{shape:s}=e,o=j(r.shape),i=Rs(s,o),a=j(i);return N(o===a,()=>`The new shape (${i}) has ${a} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),n.backend.incRef(r.dataId),{dataId:r.dataId,shape:i,dtype:r.dtype}}const zT={kernelName:ql,backendName:"webgpu",kernelFunc:be};function fl({a:n,b:t,transposeA:e,transposeB:r,backend:s,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:u=null}){const l=n.shape.length,c=t.shape.length,d=e?n.shape[l-2]:n.shape[l-1],h=r?t.shape[c-1]:t.shape[c-2],p=e?n.shape[l-1]:n.shape[l-2],m=r?t.shape[c-2]:t.shape[c-1],y=n.shape.slice(0,-2),g=t.shape.slice(0,-2),x=j(y),w=j(g),k=Be(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,m]);N(d===h,()=>`Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${r} must match.`);const _=e?[x,d,p]:[x,p,d],A=r?[w,m,h]:[w,h,m],P=be({inputs:{x:n},backend:s,attrs:{shape:_}}),L=be({inputs:{x:t},backend:s,attrs:{shape:A}}),M=[P,L],W=Math.max(x,w),q=[P,L],re=[{type:"int32",data:[p]},{type:"int32",data:[m]},{type:"int32",data:[d]}];let oe,ge;const Ie=[W,p,m];let ve=z().get("WEBGPU_MATMUL_PROGRAM_TYPE");if(ve<0){const Ye=z().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),bt=Ye>0?Ye:s.thresholdToIncreaseWorkgroups,Jt=W*Math.ceil(p/32)*Math.ceil(m/32);ve=Jt<=bt||p<=8&&Jt<=2*bt?W*p*m<=128?qr.MatMulReduceProgram:1===W&&h>=2e3?qr.MatMulSplitKProgram:qr.MatMulSmallOutputSizeProgram:qr.MatMulPackedProgram}switch(ve){case qr.MatMulReduceProgram:oe=new DT(Ie,e,r,o,u,i);break;case qr.MatMulSplitKProgram:if(ge=gn({backend:s,attrs:{shape:Ie,value:0,dtype:n.dtype}}),oe=new FT(Ie,h,e,r),o||u){ge=s.runWebGPUProgram(oe,q,n.dtype,re,ge);const bt=new LT(ge.shape,o,u,i);let Jt=null;const ln=[ge];o&&ln.push(o),i&&ln.push(i),"leakyrelu"===u&&(Jt=[{type:"float32",data:[a]}],bt.uniforms+=" alpha : f32,");const Ao=s.runWebGPUProgram(bt,ln,ge.dtype,Jt);M.push(ge);const hu=be({inputs:{x:Ao},backend:s,attrs:{shape:k}});M.push(Ao);for(const bp of M)s.disposeData(bp.dataId);return hu}break;case qr.MatMulSmallOutputSizeProgram:oe=new OT(_,A,Ie,e,r,o,u,i);break;case qr.MatMulPackedProgram:const Ye=s.adapterInfo.isIntel();oe=new RT(_,Ie,e,r,o,u,i,Ye);break;default:throw new Error(`Unsupported MatMulProgramType ${ve}.`)}o&&q.push(o),i&&q.push(i),"leakyrelu"===u&&(re.push({type:"float32",data:[a]}),oe.uniforms+=" alpha : f32,"),ge=s.runWebGPUProgram(oe,q,n.dtype,re,ge);const qe=be({inputs:{x:ge},backend:s,attrs:{shape:k}});M.push(ge);for(const Ye of M)s.disposeData(Ye.dataId);return qe}const WT={kernelName:Eu,backendName:"webgpu",kernelFunc:function VT(n){const{inputs:t,backend:e,attrs:r}=n,{a:s,b:o,bias:i,preluActivationWeights:a}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=r;return fl({a:s,b:o,transposeA:u,transposeB:l,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:d,activation:c})}};class $g{constructor(t,e,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=Be(e,r),this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${t}`,this.op=t}getUserCode(){return`\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${_h(this.op,!1)}\n      }\n\n      ${ie("index")} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `}}class ml{constructor(t,e,r){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=Be(e,r),this.dispatchLayout=he(this.outputShape),this.op=t,this.useSharedMemoryWithA=e.length<=1&&r.length>1&&e[0]<128,this.useSharedMemoryWithB=r.length<=1&&e.length>1&&r[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?r[0]:e[0],this.shaderKey=`binary_${t}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{const s=e.length>0&&e[e.length-1]%4==0,o=r.length>0&&r[r.length-1]%4==0;s&&o?(this.outputComponent=4,this.variableComponents=[4,4]):s&&(Ui(r)||1===r[r.length-1])||o&&(Ui(e)||1===e[e.length-1])?(this.outputComponent=4,this.variableComponents=s?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${t}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let t;const e=4===this.outputComponent?"vec4<f32>":"f32",r=`\n    fn binaryOperation(a : ${e}, b : ${e}) -> ${e} {\n      ${_h(this.op,4===this.outputComponent)}\n    };\n    `;if("shared"===this.type){const s=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",o=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);\n          let b = sharedBuf[${s}];`:`let a = sharedBuf[${s}];\n          let b = getBByOutputIndex(index);`;t=`\n        ${r}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${ie("index")} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${o}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `}else t=`\n       ${r}\n       ${ie("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${e}(getAByOutputCoords(coords));\n           let b = ${e}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;return t}}function $n(n){const{inputs:t}=n,{x:e}=t;return n.backend.incRef(e.dataId),{dataId:e.dataId,shape:e.shape,dtype:e.dtype}}const UT={kernelName:ss,backendName:"webgpu",kernelFunc:$n};function Co(n){const{inputs:t,backend:e}=n,{real:r,imag:s}=t,o=e.makeTensorInfo(r.shape,"complex64"),i=e.tensorMap.get(o.dataId),a=$n({inputs:{x:r},backend:e}),u=$n({inputs:{x:s},backend:e});return i.complexTensorInfos={real:a,imag:u},o}const GT={kernelName:Rr,backendName:"webgpu",kernelFunc:Co};class Ni{constructor(t,e,r=""){this.variableNames=["A"],this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=e,""!==r&&(this.uniforms=r),this.shaderKey=`unary_${e}`}getUserCode(){return`\n      fn unaryOperation(a : f32) -> f32 {\n        ${wo(this.op,!1)}\n      }\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `}}function tt({opType:n,cpuKernelImpl:t,dtype:e}){return({inputs:r,backend:s})=>{const{x:o}=r,i=s,a=e||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=t){const l=i.tensorMap.get(o.dataId),c=t(l.values,a);return i.makeTensorInfo(o.shape,a,c)}const u=new Ni(o.shape,n);return i.runWebGPUProgram(u,[o],a)}}function Vt({opType:n,cpuKernelImpl:t,supportsComplex:e=!1,dtype:r}){return({inputs:s,backend:o})=>{const{a:i,b:a}=s,u=o;if(e&&"complex64"===i.dtype){const d=u.tensorMap.get(i.dataId),h=u.tensorMap.get(a.dataId);let p,m;if(n!==De.MUL)[p,m]=[[d.complexTensorInfos.real,h.complexTensorInfos.real],[d.complexTensorInfos.imag,h.complexTensorInfos.imag]].map(g=>{const[x,w]=g,S={dataId:x.dataId,dtype:x.dtype,shape:i.shape},k={dataId:w.dataId,dtype:w.dtype,shape:a.shape},_=new ml(n,i.shape,a.shape);return u.runWebGPUProgram(_,[S,k],pn(x.dtype,w.dtype))});else{const g=new $g(De.COMPLEX_MULTIPLY_REAL,i.shape,a.shape),x=new $g(De.COMPLEX_MULTIPLY_IMAG,i.shape,a.shape),w=[{dataId:d.complexTensorInfos.real.dataId,dtype:d.complexTensorInfos.real.dtype,shape:i.shape},{dataId:d.complexTensorInfos.imag.dataId,dtype:d.complexTensorInfos.imag.dtype,shape:i.shape},{dataId:h.complexTensorInfos.real.dataId,dtype:h.complexTensorInfos.real.dtype,shape:a.shape},{dataId:h.complexTensorInfos.imag.dataId,dtype:h.complexTensorInfos.imag.dtype,shape:a.shape}];p=u.runWebGPUProgram(g,w,"float32"),m=u.runWebGPUProgram(x,w,"float32")}const y=Co({inputs:{real:p,imag:m},backend:u});return u.disposeData(p.dataId),u.disposeData(m.dataId),y}const l=r||pn(i.dtype,a.dtype);if(("string"===i.dtype||"string"===a.dtype||u.shouldExecuteOnCPU([i,a]))&&null!=t){const d=u.tensorMap.get(i.dataId).values,h=u.tensorMap.get(a.dataId).values,p="string"===i.dtype?lr(d):d,m="string"===i.dtype?lr(h):h,[y,g]=t(i.shape,a.shape,p,m,l);return u.makeTensorInfo(g,l,y)}const c=new ml(n,i.shape,a.shape);return u.runWebGPUProgram(c,[i,a],l)}}function So(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&N("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}function _g(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}function _n(n){return(t,e,r,s,o)=>{const i=Be(t,e),a=i.length,u=pt(i),c=dn(o,j(i)),d=t.length,h=e.length,p=pt(t),m=pt(e),y=ms(t,i),g=ms(e,i);if(y.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=n(r[x%r.length],s[x%s.length]);else for(let x=0;x<c.length;++x){const w=tr(x,a,u),S=w.slice(-d);y.forEach(P=>S[P]=0);const k=Ds(S,d,p),_=w.slice(-h);g.forEach(P=>_[P]=0);const A=Ds(_,h,m);c[x]=n(r[k],s[A])}return[c,i]}}function gl(n){const{inputs:t,backend:e}=n,{real:r,imag:s}=t,o=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values,a=e.makeTensorInfo(r.shape,"complex64");return e.data.get(a.dataId).complexTensorInfos={real:e.makeTensorInfo(r.shape,"float32",o),imag:e.makeTensorInfo(s.shape,"float32",i)},a}function Eh(n,t,e="float32"){if("complex64"===e)return gl({inputs:{real:Eh(n,t,"float32"),imag:Eh(n,t,"float32")},backend:n});const r=En(j(t),e);return n.makeTensorInfo(t,e,r)}function Rh(n){const{inputs:t,backend:e}=n,{x:r}=t;return e.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function Eg(n,t,e,r){if("int32"===r)return[t,"int32",Int32Array.from(n)];if("bool"===r){const s=Fu([0],e),[o,i]=_n((a,u)=>a!==u?1:0)(t,[],n,s,"bool");return[i,"bool",o]}throw new Error(`Error in Cast: failed to cast ${e} to ${r}`)}function Ya(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{dtype:o}=r;if("complex64"===o){if("complex64"===s.dtype)return Rh({inputs:{x:s},backend:e});const c=Eh(e,s.shape,s.dtype),d=Ya({inputs:{x:s},backend:e,attrs:{dtype:"float32"}}),h=gl({inputs:{real:d,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(d),h}if("complex64"===s.dtype){const c=function Tg(n){const{inputs:t,backend:e}=n,{input:r}=t,s=e.data.get(r.dataId).complexTensorInfos.real,o=e.data.get(s.dataId).values;return e.makeTensorInfo(s.shape,s.dtype,o)}({inputs:{input:s},backend:e}),d=Ya({inputs:{x:c},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(c),d}if(!kr(s.dtype,o)){const c=Rh({inputs:{x:s},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:o}}const i=e.data.get(s.dataId).values,[a,u,l]=Eg(i,s.shape,s.dtype,o);return e.makeTensorInfo(a,u,l)}function Bn(n,t,e,r){return null==e?({inputs:s,backend:o})=>{const{a:i,b:a}=s,u=o;So([i,a],n);const l=u.data.get(i.dataId).values,c=u.data.get(a.dataId).values,d="string"===i.dtype?lr(l):l,h="string"===i.dtype?lr(c):c,p=r||i.dtype,[m,y]=t(i.shape,a.shape,d,h,p);return u.makeTensorInfo(y,p,m)}:({inputs:s,backend:o})=>{const{a:i,b:a}=s,u=o;if("complex64"===i.dtype||"complex64"===a.dtype){const l=Ya({inputs:{x:i},backend:u,attrs:{dtype:"complex64"}}),c=u.data.get(l.dataId),h=c.complexTensorInfos.imag,p=u.data.get(c.complexTensorInfos.real.dataId).values,m=u.data.get(h.dataId).values,y=Ya({inputs:{x:a},backend:u,attrs:{dtype:"complex64"}}),g=u.data.get(y.dataId),w=g.complexTensorInfos.imag,S=u.data.get(g.complexTensorInfos.real.dataId).values,k=u.data.get(w.dataId).values,[_,A,P]=e(i.shape,a.shape,p,m,S,k),L=u.makeTensorInfo(P,"float32",_),M=u.makeTensorInfo(P,"float32",A),W=gl({inputs:{real:L,imag:M},backend:u});return u.disposeIntermediateTensorInfo(l),u.disposeIntermediateTensorInfo(y),u.disposeIntermediateTensorInfo(L),u.disposeIntermediateTensorInfo(M),W}{const l=u.data.get(i.dataId).values,c=u.data.get(a.dataId).values,d=r||i.dtype,[h,p]=t(i.shape,a.shape,l,c,d);return u.makeTensorInfo(p,d,h)}}}function Ah(n){return(t,e,r,s,o,i)=>{const a=Be(t,e),u=j(a),l=a.length,c=pt(a),d=dn("float32",u),h=dn("float32",u),p=ms(t,a),m=ms(e,a),y=mo(r,s),g=mo(o,i),x=t.length,w=pt(t),S=e.length,k=pt(e);if(p.length+m.length===0)for(let _=0;_<d.length;_++){const A=_%y.length,P=_%g.length,L=n(y[2*A],y[2*A+1],g[2*P],g[2*P+1]);d[_]=L.real,h[_]=L.imag}else for(let _=0;_<d.length;_++){const A=tr(_,l,c),P=A.slice(-x);p.forEach(re=>P[re]=0);const L=Ds(P,x,w),M=A.slice(-S);m.forEach(re=>M[re]=0);const W=Ds(M,S,k),q=n(y[2*L],y[2*L+1],g[2*W],g[2*W+1]);d[_]=q.real,h[_]=q.imag}return[d,h,a]}}const Rg=_n((n,t)=>n+t),HT=Ah((n,t,e,r)=>({real:n+e,imag:t+r}));function KT(n,t,e,r,s){const o=j(r),i=En(s,e);for(let a=0;a<n.length;a++){const u=n[a];if(u<0)throw new Error("Input x must be non-negative!");u>=s||(i[u]+=o>0?t[a]:1)}return i}function XT(n,t,e,r=!1){const s=n.shape[0],o=n.shape[1],i=dt([s,e],t.dtype);for(let a=0;a<s;a++)for(let u=0;u<o;u++){const l=n.get(a,u);if(l<0)throw new Error("Input x must be non-negative!");l>=e||i.set(r?1:t.size>0?i.get(a,l)+t.get(a,u):i.get(a,l)+1,a,l)}return i}Bn(Gt,Rg,HT);const Ag=_n((n,t)=>n&t);function xr(n){return(t,e,r)=>{const s=At(e,t.length);for(let o=0;o<t.length;++o)s[o]=n(t[o],r);return s}}function Dg(n,t,e){return vs(n,xr(t),e)}function vs(n,t,e){return({inputs:r,attrs:s,backend:o})=>{const{x:i}=r;So(i,n);const a=o,u=a.data.get(i.dataId).values;let l;if("string"===i.dtype){if(!Array.isArray(u))throw new Error("String tensor's value was not an instance of Array");l=lr(u)}else l=u;const c=e||i.dtype,d=t(l,c,s);return a.makeTensorInfo(i.shape,c,d)}}Bn(Vs,Ag);const Pg=xr(n=>Math.ceil(n));function QT(n,t,e,r){const s=At(e,j(t));if(r&&"string"!==e){let o=0;n.forEach(i=>{const a=j(i.shape);s.set(i.vals,o),o+=a})}else{let o=0;n.forEach(i=>{const a="string"===e?lr(i.vals):i.vals;let u=0;for(let l=0;l<i.shape[0];++l){const c=l*t[1]+o;for(let d=0;d<i.shape[1];++d)s[c+d]=a[u++]}o+=i.shape[1]})}return s}vs(ns,Pg);const Og=_n((n,t)=>n===t?1:0),Fg=(Bn(rs,Og,null,"bool"),xr(n=>Math.exp(n))),Lg=(vs(Or,Fg,"float32"),xr(n=>Math.expm1(n))),Bg=(vs(Wn,Lg),xr(n=>Math.floor(n))),Mg=(vs(js,Bg),_n((n,t)=>Math.floor(n/t)));function rE(n,t,e,r,s,o,i,a,u){const l=dt([r,o],e);for(let c=0;c<r;c++){const d=[];let h=0;for(let p=0;p<s;p++){const m=n[c*s+p];h+=m*i[p],d.push(m)}if(h<0||h>=u/o)throw new Error(`Invalid indices: ${d} does not index into ${a}`);for(let p=0;p<o;p++)l.values[c*o+p]=t.get(...t.indexToLoc(h*o+p))}return l}function sE(n,t,e){const r=dt(e,n.dtype);for(let s=0;s<r.size;++s){const i=r.indexToLoc(s).slice(),l=t.locToIndex([i[0],i[2]]);i[2]=t.values[l];const c=n.locToIndex(i);0<=c&&c<n.values.length&&(r.values[s]=n.values[c])}return r}Bn(nr,Mg,null,"int32");const zg=_n((n,t)=>n>t?1:0),Vg=(Bn(Ks,zg,null,"bool"),_n((n,t)=>n>=t?1:0)),Wg=(Bn(hr,Vg,null,"bool"),_n((n,t)=>n<t?1:0)),Ug=(Bn(os,Wg,null,"bool"),_n((n,t)=>n<=t?1:0));function lE(n,t,e){const r=(t-n)/(e-1),s=En(e,"float32");s[0]=n;for(let o=1;o<s.length;o++)s[o]=s[o-1]+r;return s}Bn(Ys,Ug,null,"bool");const Gg=xr(n=>Math.log(n));function dE(n,t,e,r){const s=dn(r,j(e));for(let o=0;o<s.length;++o){const i=o*t;let a=n[i];for(let u=0;u<t;++u){const l=n[i+u];(Number.isNaN(l)||l>a)&&(a=l)}s[o]=a}return s}vs(Qs,Gg);const Hg=_n((n,t)=>Math.max(n,t)),jg=(Bn(Js,Hg),_n((n,t)=>Math.min(n,t))),Dh=(Bn(R,jg),_n((n,t)=>n*t)),fE=Ah((n,t,e,r)=>({real:n*e-t*r,imag:n*r+t*e}));function Kg(n,t,e){const r=pi(-1,e);return Dh([],t,r,n,e)}Bn(Z,Dh,fE);const Xg=_n((n,t)=>n!==t?1:0);function qg(n,t,e,r,s){const o=t.length,i=j(t),a=pt(t),u=pt(s),l=dn(e,j(s));for(let c=0;c<i;++c){const d=tr(c,o,a),h=new Array(d.length);for(let m=0;m<h.length;m++)h[m]=d[r[m]];l[Ds(h,o,u)]=n[c]}return l}function Qg(n,t,e,r){const[s,o]=Pn(n,r),i=pn(t,"int32"),a=En(j(s),i),u=j(o);for(let l=0;l<a.length;++l){const c=l*u;let d=1;for(let h=0;h<u;++h)d*=e[c+h];a[l]=d}return{outVals:a,outShape:s,outDtype:i}}function Zg(n,t){const e=n.slice(0,t);for(;e.length<t;)e.push(1);for(let r=t;r<n.length;r++)e[t-1]*=n[r];return e}function kE(n,t,e,r,s,o,i,a){if(0===n.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function bE(n,t,e){n.forEach((r,s)=>{if(r<0||r>=e){const o=tr(s,t.length,pt(t)).join(",");throw new Error(`indices[${o}] = ${r} is not in [0, ${e})`)}})}(o,i,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const l=r[0],{outSplits:c,valueSlices:d,numValues:h}=function vE(n,t,e,r){const s=[];let o=0;const a=new Array(t.length-1+e.length).fill(null).map(()=>[0]);!function wE(n,t){for(let e=0;e<n.length;++e){const r=n[e],s=e===n.length-1?t:n[e+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let o=1;o<r.length;++o)if(r[o-1]>r[o])throw new Error("Ragged splits must be sorted in ascending order")}}(e,r);let u=1;for(let l=0;l<t.length-1;++l){u*=t[l];const c=t[l+1];for(let d=1;d<u+1;++d)a[l].push(d*c)}for(let l=0;l<n.length;++l){let c=n[l],d=n[l]+1;for(let h=0;h<e.length;++h){const p=e[h],m=h+t.length-1;if(m>=0){const y=a[m],g=y[y.length-1]-p[c];for(let x=c;x<d;++x)a[m].push(p[x+1]+g)}c=p[c],d=p[d]}d!==c&&(s.push([c,d]),o+=d-c)}return{outSplits:a,valueSlices:s,numValues:o}}(o,i,n,l),p=function CE(n){const t=[];for(let e=0;e<n.length;++e){const s=At("int32",n[e].length);t.push(s),n[e].forEach((o,i)=>s[i]=o)}return t}(c),m=function IE(n,t,e,r,s){const o=t.slice();o[0]=s;const i=At(e,j(o)),a=n.length;return function SE(n,t,e,r,s,o){const i=Zg(t,2)[1],a=Zg(o,2)[1];let u=0;for(const l of e)for(let c=l[0];c<l[1];++c){for(let d=0;d<r;++d)s[u*a+d]=n[c*i+d];++u}}(n,t,r,0===a?0:a/t[0],i,o),[i,o]}(e,r,s,d,h);return[p,m[0],m[1]]}Bn($e,Xg,null,"bool");const Jg=2147483647;function NE(n,t,e,r,s,o,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const a=0===t.length,u=0===s.length,l=0===i.length,c=[];a||c.push(t[0]),u||c.push(s[0]),l||c.push(i[0]);for(let g=1;g<c.length;++g)if(c[g]!==c[g-1])throw new Error("starts, limits, and deltas must have the same shape");const d=0===c.length?1:c[0],h=At("int32",d+1);h[0]=0;for(let g=0;g<d;++g){const x=a?n[0]:n[g],w=u?r[0]:r[g],S=l?o[0]:o[g];if(0===S)throw new Error("Requires delta != 0");let k;if(S>0&&w<x||S<0&&w>x)k=0;else if(k=Math.ceil(Math.abs((w-x)/S)),k>Jg)throw new Error(`Requires ((limit - start) / delta) <= ${Jg}`);h[g+1]=h[g]+k}const m=At(e,h[d]);let y=0;for(let g=0;g<d;++g){const x=h[g+1]-h[g];let w=a?n[0]:n[g];const S=l?o[0]:o[g];for(let k=0;k<x;++k)m[y++]=w,w+=S}return[h,m]}var Yn=yr;class yl{constructor(t,e,r,s,o,i,a,u,l,c){this.shape=t,this.shapeShape=e,this.values=r,this.valuesShape=s,this.valuesDType=o,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=u,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=Fm(c),this.raggedRank=Lm(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===Yn.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===Yn.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case Yn.VALUE_ROWIDS:return yl.getMaxWidthValueRowID(e);case Yn.ROW_SPLITS:return yl.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${Yn[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let r=0;for(let s=0;s<e-1;++s){const o=t[s+1]-t[s];o>r&&(r=o)}return r}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let r=0,s=t[0],o=0;for(let i=1;i<e;++i){const a=t[i];a!==s&&(s=a,o=Math.max(i-r,o),r=i)}return Math.max(e-r,o)}tensorShapeFromTensor(t,e,r=!0){if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return ty(t,r)}calculateOutputSize(t){const e=this.valuesShape;Bm(this.defaultValueShape,e);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=Om(this.raggedRank,s,e);i[0]<0&&(i[0]=t);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(t,e,r){const s=Math.min(t,r),o=[];let i=0;for(let a=0;a<s;++a,i+=e)o.push(i);for(let a=s;a<t;++a)o.push(-1);return N(o.length===t,()=>"Final length of result must be equal to firstDimension."),o}calculateOutputIndexRowSplit(t,e,r,s){const o=t.length,i=[];for(let a=0;a<o-1;++a){const u=t[a+1]-t[a];let l=Math.min(s,u),c=e[a];-1===c&&(l=0);for(let d=0;d<l;++d)i.push(c),c+=r;for(let d=0;d<u-l;++d)i.push(-1)}if(o>0&&i.length!==t[o-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(t,e,r,s){const o=t.length,i=[];if(0===o)return[];let a=0,u=t[0];if(u>=e.length)throw new Error(`Got currentValueRowId=${u}, which is not less than ${e.length}`);let l=e[u];i.push(l);for(let c=1;c<o;++c){const d=t[c];if(d===u)l>=0&&(++a,a<s?l+=r:l=-1);else{if(a=0,u=d,d>=e.length)throw new Error(`Got nextValueRowId=${d} which is not less than ${e.length}`);l=e[d]}i.push(l)}if(i.length!==t.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(t,e,r,s){const o=this.getRowPartitionTensor(t),i=this.getRowPartitionTypeByDimension(t);switch(i){case Yn.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,e,r,s);case Yn.ROW_SPLITS:if(o.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${o.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(o,e,r,s);default:throw new Error(`Unsupported partition type: ${Yn[i]}`)}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case Yn.FIRST_DIM_SIZE:return t[0];case Yn.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Yn.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Yn[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),r=this.calculateOutputSize(e),s=new Array(this.raggedRank+1);s[s.length-1]=1;for(let u=s.length-2;u>=0;--u)s[u]=s[u+1]*r[u+1];const o=ty(r,!1),i=At(this.valuesDType,j(o));if(s[0]*r[0]>0){let u=this.calculateFirstParentOutputIndex(e,s[0],r[0]);for(let l=1;l<=this.raggedRank;++l)u=this.calculateOutputIndex(l-1,u,s[l],r[l]);this.setOutput(this.raggedRank,u,i,o)}return[o,i]}setOutput(t,e,r,s){if(0===r.length)return;const o=this.values,i=r;let a=s.slice();a=a.slice(t+1);const u=j(a),l=e.length;let c=this.defaultValue;if(c.length!==u&&1!==c.length){const m=this.defaultValueShape;Ae(()=>{const y=K(c,m);c=La(y,a).dataSync()})}let d=0,h=0,p=0;for(let m=0;m<=l;++m){let y=m<l?e[m]:-1;if(y!==p){if(h<p){const g=o.subarray(d*u);ey(i.subarray(h*u),g,(p-h)*u)}if(m>=l&&(y=Math.floor(r.length/u)),y>p)if(1===this.defaultValue.length)i.subarray(p*u,y*u).fill(this.defaultValue[0]),p=y;else for(;y>p;)ey(i.slice(p*u),c,u),++p;y<0?(d=m+1,h=p):(d=m,h=p,p=h+1)}else++p}}}function ey(n,t,e){for(let r=0;r<e;r++)n[r]=t[r]}function ty(n,t){const e=[];for(let r of n){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}e.push(r)}return e}function $E(n,t,e,r,s,o,i,a,u,l){return new yl(n,t,e,r,s,o,i,a,u,l).compute()}function _E(n,t,e,r){if(n===t||n<t&&e<0||t<n&&e>1)return En(0,r);const u=En(Math.abs(Math.ceil((t-n)/e)),r);t<n&&1===e&&(e=-1),u[0]=n;for(let l=1;l<u.length;l++)u[l]=u[l-1]+e;return u}const ny=xr(n=>1/Math.sqrt(n));function EE(n,t,e,r,s,o,i,a,u,l){const c=[r/s,s],d=n.values,h=t.values;if(0===r)return dt(e,t.dtype);const p=u instanceof fi?u:dt(c,t.dtype);"string"==typeof u||"number"==typeof u?p.values.fill(u):"boolean"==typeof u&&p.values.fill(+u);for(let m=0;m<o;m++){const y=[];let g=0;for(let x=0;x<i;x++){const w=d[m*i+x];y.push(w),g+=w*a[x]}if(g<0||g>=r/s)throw new Error(`Invalid indices: ${y} does not index into ${e}`);for(let x=0;x<s;x++)l?p.values[g*s+x]+=h[m*s+x]:p.values[g*s+x]=0===t.rank?h[0]:h[m*s+x]}return p}vs(va,ny);const RE=xr(n=>1/(1+Math.exp(-n)));function ry(n,t,e,r,s){const o=dd(r,t,e),i=j(e),a=pt(r);if(o){const d=hd(t,a);return"string"===s?n.slice(d,d+i):n.subarray(d,d+i)}const l=dt(r,s,"string"===s?lr(n):n),c=dt(e,s);for(let d=0;d<c.size;++d){const h=c.indexToLoc(d),p=h.map((m,y)=>m+t[y]);c.set(l.get(...p),...h)}return"string"===s?Jm(c.values):c.values}function PE(n,t,e,r,s,o,i){const a=t[0],u=o[0],l=new Array(u),c=new Array(a),d=t[1];if(0===u){if(0!==a)throw new Error(Vm(a));return[At(e,0),[0,d],At(s,0),l,c]}let h=!0,p=0;const m=new Array(u).fill(0);for(let g=0;g<a;++g){const x=n[g*d];if(x<0)throw new Error(Wm(g,x));if(x>=u)throw new Error(Um(g,x,u));++m[x],h=h&&x>=p,p=x}let y=!0;for(let g=0;g<u;++g){const x=0===m[g];l[g]=x,y=y&&!x,m[g]=Math.max(m[g],1),g>0&&(m[g]+=m[g-1])}if(y&&h){const g=n,x=r;for(let w=0;w<a;++w)c[w]=w;return[g,[a,d],x,l,c]}{const g=m[u-1],x=At(e,g*d),w=At(s,g),S=new Array(u).fill(0);for(let k=0;k<a;++k){const _=n[k*d],P=(0===_?0:m[_-1])+S[_];S[_]++;for(let L=0;L<d;++L)x[P*d+L]=n[k*d+L];w[P]=r[k],c[k]=P}for(let k=0;k<u;++k)if(0===S[k]){const A=0===k?0:m[k-1];x[A*d+0]=k;for(let P=1;P<d;++P)x[A*d+P]=0;w[A]=i}return[x,[g,d],w,l,c]}}function OE(n,t,e,r,s){const o=j(r),i=t[0],a=s.length,u=[];let l=1,c=-1;for(let g=0;g<a;++g){const x=s[g];if(-1===x){if(-1!==c)throw new Error(Gm(c,g));c=g,u.push(1)}else{if(x<0)throw new Error(Hm(g,x));l*=x,u.push(x)}}if(-1!==c){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const g=Math.trunc(o/l);if(l*g!==o)throw new Error(Km(r,u));u[c]=g}if(j(u)!==o)throw new Error(Xm(r,u));const h=r.length,p=[];if(h>0){p[h-1]=1;for(let g=h-2;g>=0;--g)p[g]=p[g+1]*r[g+1]}const m=[];if(a>0){m[a-1]=1;for(let g=a-2;g>=0;--g)m[g]=m[g+1]*u[g+1]}const y=At(e,i*a);for(let g=0;g<i;++g){let x=0;for(let w=0;w<h;++w)x+=n[g*h+w]*p[w];for(let w=0;w<a;++w)y[g*a+w]=Math.trunc(x/m[w]),x%=m[w]}return[y,[i,a],u]}function FE(n,t,e,r,s,o=!1,i=0){const a=r.length,u=[t[0],n.length/t[0]],l=u[1],d=a>0?s[a-1]+1:0;if(d<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=d;const m=At(e,h.reduce((S,k)=>S*k,1));if(0===a)return d>0&&m.fill(i),[m,h];if(d<=0)throw new Error("segment ids must be >= 0");let y=0,g=1,x=0,w=s[y];for(;;){let S=0;if(g<a){if(S=s[g],w===S){++g;continue}if(w>=S)throw new Error("segment ids are not increasing")}if(w<0||w>=d)throw new Error(Ym(w,d));w>x&&m.fill(i,x*l,w*l);for(let k=y;k<g;++k){const _=r[k];if(_<0||_>=u[0])throw new Error(Qm(k,r[k],u[0]));for(let A=0;A<l;A++)m[w*l+A]+=n[_*l+A]}if(o)for(let k=0;k<l;k++)m[w*l+k]/=g-y;if(y=g,++g,x=w+1,w=S,g>a)break}return x<d&&m.fill(i,x*l,d*l),[m,h]}Dg(Ca,n=>1/(1+Math.exp(-n)));const LE=xr(n=>Math.sqrt(n)),sy=(Dg(Sa,n=>Math.sqrt(n)),xr((n,t)=>{const{pattern:e,replaceGlobal:r,rewrite:s}=t;return n.replace(new RegExp(e,r?"g":""),s)}));function zE(n,t,e,r){const s=dt(n,t.dtype);for(let o=0;o<s.size;o++){const i=s.indexToLoc(o),a=new Array(i.length);for(let u=0;u<a.length;u++)a[u]=i[u]*e[u]+r[u];s.set(t.get(...a),...i)}return s}vs($u,sy);class VE{constructor(t,e,r,s,o,i){this.separator=us(t),this.nGramWidths=e,this.leftPad=us(r),this.rightPad=us(s),this.padWidth=o,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const r=this.getPadWidth(e);return Math.max(0,t+2*r-e+1)}createNGrams(t,e,r,s,o,i){for(let a=0;a<o;++a){const u=this.getPadWidth(i),l=Math.max(0,u-a),c=Math.max(0,u-(o-(a+1))),d=i-(l+c),h=e+(l>0?0:a-u);let p=0;p+=l*this.leftPad.length;for(let w=0;w<d;++w)p+=t[h+w].length;p+=c*this.rightPad.length,p+=(l+c+d-1)*this.separator.length,r[s+a]=new Uint8Array(p);const y=r[s+a];let g=0;const x=w=>w.forEach(S=>y[g++]=S);for(let w=0;w<l;++w)x(this.leftPad),x(this.separator);for(let w=0;w<d-1;++w)x(t[h+w]),x(this.separator);if(d>0){x(t[h+d-1]);for(let w=0;w<c;++w)x(this.separator),x(this.rightPad)}else{for(let w=0;w<c-1;++w)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(t,e){const r=t.length,s=e.length;if(s>0){let u=e[0];if(0!==u)throw new Error(`First split value must be 0, got ${u}`);for(let l=1;l<s;++l){let c=e[l]>=u;if(c=c&&e[l]<=r,!c)throw new Error(`Invalid split value ${e[l]}, must be in [${u}, ${r}]`);u=e[l]}if(u!==r)throw new Error(`Last split value must be data size. Expected ${r}, got ${u}`)}const o=s-1,i=At("int32",s);if(0===r||0===s){const u=new Array(r);for(let l=0;l<=o;++l)i[l]=0;return[u,i]}i[0]=0;for(let u=1;u<=o;++u){const l=e[u]-e[u-1];let c=0;this.nGramWidths.forEach(d=>{c+=this.getNumNGrams(l,d)}),this.preserveShort&&l>0&&0===c&&(c=1),i[u]=i[u-1]+c}const a=new Array(i[o]);for(let u=0;u<o;++u){const l=e[u];let c=i[u];if(this.nGramWidths.forEach(d=>{const p=this.getNumNGrams(e[u+1]-e[u],d);this.createNGrams(t,l,a,c,p,d),c+=p}),this.preserveShort&&c===i[u]){const d=e[u+1]-e[u];if(0===d)continue;this.createNGrams(t,l,a,c,1,d+2*this.padWidth)}}return[a,i]}}function WE(n,t,e,r,s,o,i,a){return new VE(e,r,s,o,i,a).compute(n,t)}function UE(n,t,e,r){if(!n.length)return;if(0===t.length){for(let o=0;o<n.length;++o)r.push(n.subarray(o,o+1));return}if(1===t.length){const o=t[0];let i=n.indexOf(o);for(;-1!==i;){const a=n.subarray(0,i);(!e||0!==a.length)&&r.push(a),i=(n=n.subarray(i+1)).indexOf(o)}return void((!e||0!==n.length)&&r.push(n))}let s=0;for(let o=0;o<n.length+1;o++)if(o===n.length||-1!==t.indexOf(n[o])){const i=n.subarray(s,o);(!e||0!==i.length)&&r.push(i),s=o+1}}function GE(n,t,e){const r=n.length,s=[];let o=0,i=0;const a=new Array(r);for(let h=0;h<r;++h){const p=s.length;UE(n[h],t,e,s);const m=s.length-p;a[h]=m,o+=m,i=Math.max(i,m)}const u=At("int32",2*o),l=new Array(o),c=[r,i];let d=0;for(let h=0;h<r;++h)for(let p=0;p<a[h];++p)u[2*d]=h,u[2*d+1]=p,l[d]=s[d],++d;return[u,l,c]}function HE(n,t){const e=At("int32",n.length);for(let r=0;r<n.length;++r)e[r]=sb(n[r]).modulo(t).getLowBitsUnsigned();return e}const oy=_n((n,t)=>n-t),jE=Ah((n,t,e,r)=>({real:n-e,imag:t-r}));function XE(n,t){const e=new Array(n.rank);for(let s=0;s<e.length;s++)e[s]=n.shape[s]*t[s];const r=dt(e,n.dtype);for(let s=0;s<r.values.length;++s){const o=r.indexToLoc(s),i=new Array(n.rank);for(let u=0;u<i.length;u++)i[u]=o[u]%n.shape[u];const a=n.locToIndex(i);r.values[s]=n.values[a]}return r}Bn(Ia,oy,jE);const Qa=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function iy(n,t,e=0,r=n.length-1){for(;r>e;){if(r-e>600){const a=r-e+1,u=t-e+1,l=Math.log(a),c=.5*Math.exp(2*l/3),d=.5*Math.sqrt(l*c*(a-c)/a)*Math.sign(u-a/2);iy(n,t,Math.max(e,Math.floor(t-u*c/a+d)),Math.min(r,Math.floor(t+(a-u)*c/a+d)))}const s=n[t];let o=e,i=r;for(Jn(n,e,t),Qa(n[r],s)>0&&Jn(n,e,r);o<i;){for(Jn(n,o,i),o++,i--;Qa(n[o],s)<0;)o+=1;for(;Qa(n[i],s)>0;)i-=1}0===Qa(n[e],s)?Jn(n,e,i):(i+=1,Jn(n,i,r)),i<=t&&(e=i+1),t<=i&&(r=i-1)}}function qE(n,t,e,r,s){const o=t[t.length-1],[i,a]=[n.length/o,o],u=dn(e,i*r),l=dn("int32",i*r);for(let d=0;d<i;d++){const h=d*a,p=n.subarray(h,h+a);let m=new Array(p.length);p.forEach((w,S)=>m[S]={value:w,index:S}),r<m.length&&(iy(m,r),m=m.slice(0,r)),s&&m.sort(Qa);const y=d*r,g=u.subarray(y,y+r),x=l.subarray(y,y+r);for(let w=0;w<r;w++)g[w]=m[w].value,x[w]=m[w].index}const c=t.slice();return c[c.length-1]=r,[dt(c,e,u),dt(c,"int32",l)]}function YE(n,t,e,r){const s=at(t,e)[0],o=[1,e[0],1];for(let m=0;m<s;m++)o[0]*=e[m];o[1]=e[s];for(let m=s+1;m<e.length;m++)o[2]*=e[m];const i=new Map,a=new Int32Array(e[s]),u=new fi(o,r,n),l=[],c=1===o[0]&&1===o[2];for(let m=0;m<e[s];m++){let y;if(c)y=n[m].toString();else{const x=[];for(let w=0;w<o[0];w++)for(let S=0;S<o[2];S++)x.push(u.get(w,m,S));y=x.join(",")}const g=i.get(y);if(null!=g)a[m]=g;else{const x=i.size;i.set(y,x),a[m]=x,l.push(m)}}const d=o.slice();d[1]=i.size;const h=new fi(d,r);l.forEach((m,y)=>{for(let g=0;g<o[0];g++)for(let x=0;x<o[2];x++)h.set(u.get(g,m,x),g,y,x)});const p=e.slice();return p[s]=d[1],{outputValues:h.values,outputShape:p,indices:a}}const{addImpl:QE,castImpl:ZE,ceilImpl:JE,concatImpl:eR,equalImpl:tR,expImpl:nR,expm1Impl:rR,floorImpl:sR,floorDivImpl:oR,gatherNdImpl:iR,gatherV2Impl:aR,greaterEqualImpl:uR,greaterImpl:lR,lessEqualImpl:cR,lessImpl:dR,logImpl:hR,maxImpl:pR,maximumImpl:fR,minimumImpl:mR,multiplyImpl:gR,negImpl:yR,notEqualImpl:xR,prodImpl:bR,rangeImpl:wR,rsqrtImpl:vR,scatterImpl:CR,simpleAbsImpl:SR,sliceImpl:IR,stridedSliceImpl:kR,stringNGramsImpl:NR,subImpl:$R,tileImpl:_R,topKImpl:TR,transposeImpl:ER}=D,AR={kernelName:"Abs",backendName:"webgpu",kernelFunc:tt({opType:se.ABS,cpuKernelImpl:SR})},DR=tt({opType:se.ACOS}),PR={kernelName:Ls,backendName:"webgpu",kernelFunc:DR},OR=tt({opType:se.ACOSH}),FR={kernelName:Wo,backendName:"webgpu",kernelFunc:OR},LR=Vt({opType:De.ADD,cpuKernelImpl:QE,supportsComplex:!0}),BR={kernelName:Gt,backendName:"webgpu",kernelFunc:LR};class MR{constructor(t){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t[0],this.variableNames=t.map((e,r)=>`T${r}`),this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){const t=[];this.variableNames.forEach(s=>{t.push(`let v${s} = get${s}ByOutputCoords(coords);`)});const e=this.variableNames.map(s=>`v${s}`).join(" + ");return`\n      ${ie("index")} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${t.join("\n        ")}\n            setOutputAtIndex(flatIndex, ${e});\n          }\n        }\n      }\n    `}}const VR={kernelName:wn,backendName:"webgpu",kernelFunc:function zR(n){const{inputs:t,backend:e}=n,r=t;if(1===r.length)return $n({inputs:{x:r[0]},backend:e});const s=r.map(a=>a.dtype).reduce((a,u)=>pn(a,u)),o=r.map(a=>a.shape),i=new MR(o);return e.runWebGPUProgram(i,r,s)}};class WR{constructor(t,e){this.variableNames=["A"],this.workgroupSize=[16,16,1];const r=new Array(t.length);for(let s=0;s<r.length;s++)r[s]=t[e[s]];this.outputShape=r,this.dispatchLayout={x:[0],y:[1]},this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){N(this.workgroupSize[0]===this.workgroupSize[1],()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);const t=this.workgroupSize[0];return`\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;\n      ${ie()} {\n        var x = i32(workgroupId.x) * ${t} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${t} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${t} + i32(localId.x);\n        y = i32(workgroupId.x) * ${t} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `}}class UR{constructor(t,e){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;const r=new Array(t.length);for(let s=0;s<r.length;s++)r[s]=t[e[s]];this.outputShape=r,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=e,this.shaderKey=`transpose_${e}`}getUserCode(){const t=Pt(this.outputShape.length),e=ay(this.newDim);return`\n      ${ie("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(\n              ${t}(${e}), uniforms.aShape)]);\n          }\n        }\n      }\n    `}}function ay(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=new Array(t);for(let r=0;r<n.length;r++)e[n[r]]=`coords.${Xr(r)}`;return e.join()}function br(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{perm:o}=r,i=e,u=new Array(s.shape.length);for(let c=0;c<u.length;c++)u[c]=s.shape[o[c]];if(e.shouldExecuteOnCPU([s])){const d=i.tensorMap.get(s.dataId).values,h=ER(d,s.shape,s.dtype,o,u);return e.makeTensorInfo(u,s.dtype,h)}if(2===s.shape.length&&ot(o,[1,0])){const c=new WR(s.shape,o);return i.runWebGPUProgram(c,[s],s.dtype)}const l=new UR(s.shape,o);return i.runWebGPUProgram(l,[s],s.dtype)}const GR={kernelName:di,backendName:"webgpu",kernelFunc:br};class HR{constructor(t,e,r){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[t.batchSize,t.inSize];const[s]=Pn(this.inputShape,[1]);this.outputShape=0===s.length?[1]:s,this.workgroupSize=t.inSize>=32768&&r>=512?[512,1,1]:t.inSize>=4096?[256,1,1]:[64,1,1],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=e,this.shaderKey=`reduce_${e}`}getUserCode(){let t="",e="0.0";const r=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(t=`\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${"min"===this.reduceType?"<":">"} bestValue)\n           {  bestValue = candidate; }`,e="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?t=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(t=" bestValue = bestValue * candidate; ",e="1.0"):"all"===this.reduceType?(t=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",e="1.0"):"any"===this.reduceType&&(t=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",e="0.0");const s="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       \n         var<workgroup> xBestValues : array<f32, ${r}>;\n       \n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${1===this.outputShape.length?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;\n          return offset;\n       }\n       ${ie("index")} {\n         let outputIndex = index / ${r};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${e};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${r}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${r}) {\n           let candidate = f32(x[offset + k]);\n           ${t}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${r}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${t}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${s}\n        }\n       }\n     `}}const jR={mean:"float32",all:"bool",any:"bool"};function Io(n,t,e,r,s){const o=n.shape.length,i=[],a=at(t,n.shape);let u=a;const l=jt(u,o);let c=n;null!=l&&(c=br({inputs:{x:n},attrs:{perm:l},backend:s}),u=Kt(u.length,o),i.push(c)),In(r,u,o);const[d,h]=Pn(c.shape,u);let m,p=d;if(e&&(p=mn(d,a)),"max"!==r&&"prod"!==r||!s.shouldExecuteOnCPU([c])){const y=j(h),w={windowSize:y,inSize:y,batchSize:j(c.shape)/y,outSize:1},S=jR[r]||Mu(n.dtype),k=[{type:"int32",data:[y]}],_=new HR(w,r,s.device.limits.maxComputeWorkgroupSizeX),A=s.runWebGPUProgram(_,[c],S,k);i.push(A),m=be({inputs:{x:A},attrs:{shape:p},backend:s})}else{const y=s.tensorMap.get(c.dataId).values;switch(r){case"max":const g=pR(y,j(h),p,n.dtype);m=s.makeTensorInfo(p,n.dtype,g);break;case"prod":const{outVals:x,outShape:w,outDtype:S}=bR(c.shape,c.dtype,y,u);m=s.makeTensorInfo(w,S,x);break;default:throw new Error(`${r} CPU implementation is not yet supported.`)}}return i.forEach(y=>s.disposeData(y.dataId)),m}const XR={kernelName:"All",backendName:"webgpu",kernelFunc:function KR(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{keepDims:o,axis:i}=r;return Io(s,i,o,"all",e)}},YR={kernelName:"Any",backendName:"webgpu",kernelFunc:function qR(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{keepDims:o,axis:i}=r;return Io(s,i,o,"any",e)}};class uy{constructor(t,e,r){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;const s=[e];this.op="min"===r?"<":">";const[o,i]=Pn(t,s);this.outputShape=0===o.length?[1]:o,this.dispatchLayout=he(this.outputShape),j(i)<32?(this.type="plain",this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=ae(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=t,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){const t=this.workgroupSize[0],e=()=>1===this.inputShape.length?"uniforms.xShape":`uniforms.xShape.${Xr(this.inputShape.length-1)}`,r=()=>{let s="";if(1===this.outputShape.length)1!==this.inputShape.length&&(s+="outputCoords,");else for(let o=0;o<this.outputShape.length;o++)s+=`outputCoords.${Xr(o)},`;return s};return"shared"===this.type?`\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      \n      var<workgroup> xBestIndices : array<i32, ${t}>;\n      var<workgroup> xBestValues : array<f32, ${t}>;\n    \n\n      ${ie("index")} {\n        let outputIndex = index / ${t};\n        let reduceLength = ${e()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${t}) {\n          let candidate = getX(${r()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${t}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `:`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${r()} 0);\n          let reduceLength = ${e()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${r()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `}}const ZR={kernelName:Ms,backendName:"webgpu",kernelFunc:function QR(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o}=r;let i=at(o,s.shape);const a=jt(i,s.shape.length);let u=s;const l=[];null!=a&&(u=br({inputs:{x:s},backend:e,attrs:{perm:a}}),l.push(u),i=Kt(i.length,u.shape.length)),In("argMax",[i[0]],u.shape.length);const c=new uy(u.shape,i[0],"max"),h=e.runWebGPUProgram(c,[u],"int32",[{type:"float32",data:[Number.NEGATIVE_INFINITY]}]);return l.forEach(p=>e.disposeData(p.dataId)),h}},eA={kernelName:Uo,backendName:"webgpu",kernelFunc:function JR(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o}=r;let i=at(o,s.shape);const a=jt(i,s.shape.length);let u=s;const l=[];null!=a&&(u=br({inputs:{x:s},backend:e,attrs:{perm:a}}),l.push(u),i=Kt(i.length,u.shape.length)),In("argMin",[i[0]],u.shape.length);const c=new uy(u.shape,i[0],"min"),h=e.runWebGPUProgram(c,[u],"int32",[{type:"float32",data:[Number.POSITIVE_INFINITY]}]);return l.forEach(p=>e.disposeData(p.dataId)),h}},tA=tt({opType:se.ASIN}),nA={kernelName:zs,backendName:"webgpu",kernelFunc:tA},rA=tt({opType:se.ASINH}),sA={kernelName:vn,backendName:"webgpu",kernelFunc:rA},oA=tt({opType:se.ATAN}),iA={kernelName:Go,backendName:"webgpu",kernelFunc:oA},aA=Vt({opType:De.ATAN2}),uA={kernelName:Cn,backendName:"webgpu",kernelFunc:aA},lA=tt({opType:se.ATANH}),cA={kernelName:es,backendName:"webgpu",kernelFunc:lA};class dA{constructor(t){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.strides;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}class Za{constructor(t,e,r=!1,s=!1,o=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===e&&r)throw new Error("Cannot compute positions for average pool.");this.outputShape=t.outShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=e,this.computePositions=r,this.flattenPositions=s,this.includeBatchIndex=o,this.shaderKey=`pool2D_${e}_${r}_${s}_${o}`}getUserCode(){let t;t="avg"===this.poolType?"resultValue = resultValue + value; count = count + 1.0;":this.computePositions?`let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC"};\n      }`:"resultValue = max(value, resultValue);";let e="resultValue";return"avg"===this.poolType&&(e="resultValue / max(count, 1.0)"),`\n      ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          ${this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}\n\n          var count = 0.0;\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, d);\n              ${t}\n            }\n          }\n\n          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${e});`}\n        }\n      }\n    `}}class Ph{constructor(t,e,r=!1,s=!1,o=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===e&&r)throw new Error("Cannot compute positions for average pool.");this.outputShape=t.outShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=e,this.computePositions=r,this.flattenPositions=s,this.includeBatchIndex=o,this.shaderKey=`pool3D_${e}_${r}_${s}_${o}`}getUserCode(){let t;t="avg"===this.poolType?"resultValue += value; count += 1.0;":this.computePositions?`let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};\n      }`:"resultValue = max(value, resultValue);";let e="resultValue";return"avg"===this.poolType&&(e="resultValue / max(count, 1.0)"),`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords.x;\n          let ch = coords.u;\n\n          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n          let xDCorner = xCorner.x;\n          let xRCorner = xCorner.y;\n          let xCCorner = xCorner.z;\n\n          ${this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}\n\n          var count = 0.0;\n          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {\n            let xD = xDCorner + wD;\n            if (xD < 0 || xD >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {\n              let xR = xRCorner + wR;\n              if (xR < 0 || xR >= uniforms.convDims.y) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {\n                let xC = xCCorner + wC;\n                if (xC < 0 || xC >= uniforms.convDims.z) {\n                  continue;\n                }\n\n                let value = getX(batch, xD, xR, xC, ch);\n                ${t}\n              }\n            }\n          }\n\n          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${e});`}\n        }\n      }\n    `}}function ly(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{reductionIndices:o,keepDims:i}=r;return Io(s,o,i,"max",e)}const hA={kernelName:"Max",backendName:"webgpu",kernelFunc:ly};function cy(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{keepDims:o,axis:i}=r;return Io(s,i,o,"mean",e)}const pA={kernelName:I,backendName:"webgpu",kernelFunc:cy};function dy(n,t,e,r){if(1===t.filterWidth&&1===t.filterHeight&&ot(t.inShape,t.outShape))return $n({inputs:{x:n},backend:r});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&1===t.batchSize&&"VALID"===t.padInfo.type){const i=n.shape.length,a=be({inputs:{x:n},backend:r,attrs:{shape:[n.shape[i-3]*n.shape[i-2],n.shape[i-1]]}});let u;"avg"===e?u=cy({inputs:{x:a},backend:r,attrs:{axis:0,keepDims:!1}}):(N("max"===e,()=>`Invalid pool type ${e}`),u=ly({inputs:{x:a},backend:r,attrs:{reductionIndices:0,keepDims:!1}}));const l=be({inputs:{x:u},backend:r,attrs:{shape:t.outShape}});return r.disposeData(a.dataId),r.disposeData(u.dataId),l}let s;const o=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return 1===t.filterHeight&&1===t.filterWidth?s=new dA(t):("avg"===e?s=new Za(t,"avg"):(N("max"===e,()=>`Invalid pool type ${e}`),s=new Za(t,"max")),o.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),r.runWebGPUProgram(s,[n],n.dtype,o)}const mA={kernelName:ts,backendName:"webgpu",kernelFunc:function fA(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{filterSize:o,strides:i,pad:a,dimRoundingMode:u}=r;return dy(s,Hn(s.shape,o,i,1,a,u),"avg",e)}},yA={kernelName:Ho,backendName:"webgpu",kernelFunc:function gA(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{filterSize:o,strides:i,pad:a,dataFormat:u,dimRoundingMode:l}=r,d=zr(s.shape,o,i,[1,1,1],a,l,u),h=new Ph(d,"avg");return e.runWebGPUProgram(h,[s],s.dtype,[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.front,d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inDepth,d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]}])}};class xA{constructor(t){this.variableNames=["dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`\n      ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class bA{constructor(t){this.variableNames=["dy"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`\n      ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              dotProd += dyValue * uniforms.avgMultiplier;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const vA={kernelName:jo,backendName:"webgpu",kernelFunc:function wA(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,input:o}=t,i=o,{filterSize:a,strides:u,pad:l,dimRoundingMode:c}=r,d=zr(i.shape,a,u,1,l,c),h=new bA(d);return e.runWebGPUProgram(h,[s],i.dtype,[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.effectiveFilterDepth-1-d.padInfo.front,d.effectiveFilterHeight-1-d.padInfo.top,d.effectiveFilterWidth-1-d.padInfo.left]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]},{type:"int32",data:[d.outDepth]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]},{type:"float32",data:[1/(d.filterDepth*d.filterHeight*d.filterWidth)]}])}},SA={kernelName:wu,backendName:"webgpu",kernelFunc:function CA(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,input:o}=t,i=o;Ig([s,o],"avgPoolGrad");const{filterSize:a,strides:u,pad:l}=r,c=Hn(i.shape,a,u,1,l),d=new xA(c);return e.runWebGPUProgram(d,[s],i.dtype,[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.effectiveFilterHeight-1-c.padInfo.top,c.effectiveFilterWidth-1-c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"float32",data:[1/(c.filterHeight*c.filterWidth)]}])}},kA={kernelName:Ki,backendName:"webgpu",kernelFunc:function IA(n){const{inputs:t,backend:e,attrs:r}=n,{a:s,b:o}=t,{transposeA:i,transposeB:a}=r;return fl({a:s,b:o,transposeA:i,transposeB:a,backend:e})}};class NA{constructor(t,e){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.rank=e.length,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=t,this.uniforms=`start : ${Pt(t.length)}, `,this.shaderKey="slice"}getUserCode(){const t=Pt(this.rank),e=function $A(n){if(1===n)return"sourceLoc";if(n<=6)return Oh.slice(0,n).map(t=>`sourceLoc.${t}`).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;return r=this.outputShape.map(1===this.start.length?(o,i)=>"sourceLoc = uniforms.start + coords;":(o,i)=>`sourceLoc.${Oh[i]} = uniforms.start.${Xr(i)} + coords.${Oh[i]};`),`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${t};\n          let coords = getCoordsFromIndex(index);\n          ${r.join("\n")}\n          setOutputAtIndex(index, getSource(${e}));\n        }\n      }\n    `}}const Oh=["x","y","z","w","u","v"];function $i(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{begin:o,size:i}=r,[a,u]=Hu(s,o,i);if(Gu(s,a,u),e.shouldExecuteOnCPU([s])||"string"===s.dtype){const d=e.tensorMap.get(s.dataId),h=IR(d.values,a,u,s.shape,s.dtype);return e.makeTensorInfo(u,s.dtype,h)}if(0===j(u))return e.makeTensorInfo(u,s.dtype,[]);const l=new NA(a,u);return e.runWebGPUProgram(l,[s],s.dtype,[{type:"int32",data:a}])}const _A={kernelName:Nu,backendName:"webgpu",kernelFunc:$i},TA={kernelName:Xi,backendName:"webgpu",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{blockShape:o,crops:i}=r;N(s.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");const a=o.reduce((w,S)=>w*S),u=Ha(s.shape,o,a),l=ja(u.length,o.length),c=Ka(s.shape,o,a),d=Hd(i,o.length),h=jd(c,i,o.length),p=[],m=be({inputs:{x:s},backend:e,attrs:{shape:u}}),y=br({inputs:{x:m},backend:e,attrs:{perm:l}}),g=be({inputs:{x:y},backend:e,attrs:{shape:c}}),x=$i({inputs:{x:g},backend:e,attrs:{begin:d,size:h}});return p.push(m),p.push(y),p.push(g),p.forEach(w=>e.disposeData(w.dataId)),x}},EA=`\n  fn bincount_write(index: i32, value: f32) {\n    ${ws("&result[index]","value","float32")}\n  }\n`;class hy{constructor(t,e,r=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=t,this.rank=t.length,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=r,r&&(this.atomic=!1),this.hasWeights=e,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`\n    ${this.binaryOutput?"\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n":EA}\n  ${ie("index")} {\n    ${1===this.rank?`if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};\n        bincount_write(indexVal, value);\n      }\n    }`:`let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `}}const DA={kernelName:Ko,backendName:"webgpu",kernelFunc:function AA(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,weights:o}=t,{size:i}=r,a=j(s.shape),l=j(o.shape)>0,d=o.dtype,h=gn({backend:e,attrs:{shape:[i],value:0,dtype:d}}),p=new hy([a],l);return e.runWebGPUProgram(p,l?[s,o]:[s],d,[{type:"int32",data:[i]}],h)}};class PA{constructor(t){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`\n  ${ie("index")} {\n    if (index < uniforms.size) {\n      var s0 = 1.0;\n      var s1 = 1.0;\n      let indexS0 = index - uniforms.size + uniforms.s0Size;\n      let indexS1 = index - uniforms.size + uniforms.s1Size;\n      if (indexS0 >= 0) {\n        s0 = getS0(indexS0);\n      }\n      if (indexS1 >= 0) {\n        s1 = getS1(indexS1);\n      }\n\n      if (s0 == 1.0) {\n        setOutputAtIndex(index, s1);\n      } else if (s1 == 1.0) {\n        setOutputAtIndex(index, s0);\n      } else if (s0 != s1) {\n        setOutputAtIndex(index, uniforms.NAN);\n      } else {\n        setOutputAtIndex(index, s0);\n      }\n    }\n  }\n  `}}const FA={kernelName:Xo,backendName:"webgpu",kernelFunc:function OA(n){const{inputs:t,backend:e}=n,{s0:r,s1:s}=t;if(e.shouldExecuteOnCPU([r,s])){const c=e.tensorMap.get(r.dataId),p=e.tensorMap.get(s.dataId).values,m=Be(Array.from(c.values),Array.from(p));return e.makeTensorInfo([m.length],"int32",Int32Array.from(m))}const o=j(r.shape),i=j(s.shape),a=Math.max(o,i),u=new PA(a);return e.runWebGPUProgram(u,[r,s],"int32",[{type:"int32",data:[o]},{type:"int32",data:[i]}])}},py=Vt({opType:De.NOT_EQUAL,dtype:"bool",cpuKernelImpl:xR}),LA={kernelName:$e,backendName:"webgpu",kernelFunc:py};function Ja(n){const{inputs:t,backend:e}=n,{input:r}=t;return $n({inputs:{x:e.tensorMap.get(r.dataId).complexTensorInfos.real},backend:e})}const BA={kernelName:ci,backendName:"webgpu",kernelFunc:Ja},zA={kernelName:Bt,backendName:"webgpu",kernelFunc:function Fh(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{dtype:o}=r;if("complex64"===o){if("complex64"===s.dtype)return $n({inputs:{x:s},backend:e});const i=Ur(s.shape),a=Fh({inputs:{x:s},backend:e,attrs:{dtype:"float32"}}),u=Co({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeData(a.dataId),u}if("complex64"===s.dtype){const i=Ja({inputs:{input:s},backend:e}),a=Fh({inputs:{x:i},backend:e,attrs:{dtype:o}});return e.disposeData(i.dataId),a}if(!kr(s.dtype,o)){const i=$n({inputs:{x:s},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:o}}if(e.shouldExecuteOnCPU([s])){const i=e.tensorMap.get(s.dataId).values,[a,u,l]=ZE(i,s.shape,s.dtype,o);return e.makeTensorInfo(a,u,l)}if("int32"===o)return function MA(n,t){const e=new Ni(n.shape,se.TO_INT),r=t.runWebGPUProgram(e,[n],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(s,e);if("bool"===o){const i=e.makeTensorInfo([],"bool",dn("bool",1)),u=py({inputs:{a:s,b:i},backend:e});return e.disposeData(i.dataId),u}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${o}`)}},VA=tt({opType:se.CEIL,cpuKernelImpl:JE}),WA={kernelName:ns,backendName:"webgpu",kernelFunc:VA};class UA{constructor(t){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`\n      ${ie("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `}}class GA{constructor(t){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`\n      ${ie("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `}}const jA={kernelName:qo,backendName:"webgpu",kernelFunc:function HA(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{clipValueMin:o,clipValueMax:i}=r;let a;const u=[{type:"float32",data:[o]},{type:"float32",data:[i]}];return a=j(s.shape)%4==0?new UA(s.shape):new GA(s.shape),e.runWebGPUProgram(a,[s],s.dtype,u)}};class KA{constructor(t){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let re = abs(getRealByOutputIndex(index));\n        let im = abs(getImagByOutputIndex(index));\n        let mx = max(re, im);\n\n        // The length function in wgsl may be not underflow-safe on some GPUs.\n        // So the safe solution is to ensure underflow-safety in all cases.\n        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));\n      }\n    }\n  `}}function fy(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const qA={kernelName:Yo,backendName:"webgpu",kernelFunc:function XA(n){const{inputs:t,backend:e}=n,{x:r}=t,s=e.tensorMap.get(r.dataId),o=new KA(r.shape),i=[fy(r,s.complexTensorInfos.real),fy(r,s.complexTensorInfos.imag)];return e.runWebGPUProgram(o,i,i[0].dtype)}};class YA{constructor(t){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=Xn(t,1),this.variableNames=t.map((e,r)=>`T${r}`),this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=t.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){const t=[];if(this.offsetLength>0){t.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let o=1;o<this.offsetLength;o++)t.push(`else if (yC < uniforms.offset${[o]}){ setOutputAtCoords(coords.x, coords.y, getT${o}(yR, yC - uniforms.offset${o-1})); }`);t.push(`else { setOutputAtCoords(coords.x, coords.y, getT${this.offsetLength}(yR, yC - uniforms.offset${this.offsetLength-1})); }`)}else t.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`\n      ${ie("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${t.join("\n        ")}\n          }\n        }\n      }\n    `}}function xl(n){const{inputs:t,backend:e}=n,{input:r}=t;return $n({inputs:{x:e.tensorMap.get(r.dataId).complexTensorInfos.imag},backend:e})}const QA={kernelName:ai,backendName:"webgpu",kernelFunc:xl};function eu(n,t,e){const r=n[0].dtype;if("complex64"===r){const m=n.map(S=>Ja({inputs:{input:S},backend:e})),y=n.map(S=>xl({inputs:{input:S},backend:e})),g=eu(m,t,e),x=eu(y,t,e),w=Co({inputs:{real:g,imag:x},backend:e});return m.forEach(S=>e.disposeData(S.dataId)),y.forEach(S=>e.disposeData(S.dataId)),e.disposeData(g.dataId),e.disposeData(x.dataId),w}let s=e.shouldExecuteOnCPU(n);if("string"===r&&(s=!0),s){const m=n.map(_=>{const P=[-1,j(_.shape.slice(t))];return be({inputs:{x:_},backend:e,attrs:{shape:P}})}),y=m.map(_=>({vals:e.readSync(_.dataId),shape:_.shape})),g=Xn(m.map(_=>_.shape),1),w=eR(y,g,r,1===m[0].shape[0]),S=Xn(n.map(_=>_.shape),t),k=e.makeTensorInfo(S,r,w);return m.forEach(_=>e.disposeData(_.dataId)),k}const o=e.device.limits.maxStorageBuffersPerShaderStage-1;if(n.length>o){const m=[];for(let g=0;g<n.length;g+=o){const x=n.slice(g,g+o);m.push(eu(x,t,e))}const y=eu(m,t,e);for(const g of m)e.disposeData(g.dataId);return y}const{tensors2D:i,outShape:a}=function ZA(n,t,e){const r=Xn(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>be({inputs:{x:o},backend:e,attrs:{shape:[j(o.shape.slice(0,t)),j(o.shape.slice(t))]}})),outShape:r}}(n,t,e),u=i.map(m=>m.shape),l=new YA(u),c=[],d=new Array(u.length-1);if(d.length>0){d[0]=u[0][1],c.push({type:"int32",data:[d[0]]});for(let m=1;m<d.length;m++)d[m]=d[m-1]+u[m][1],c.push({type:"int32",data:[d[m]]})}const h=e.runWebGPUProgram(l,i,i[0].dtype,c);i.forEach(m=>e.disposeData(m.dataId));const p=be({inputs:{x:h},backend:e,attrs:{shape:a}});return e.disposeData(h.dataId),p}function my(n){const{inputs:t,backend:e,attrs:r}=n,{axis:s}=r,o=at(s,t[0].shape)[0];Wd(t.map(l=>l.shape),o);const a=Xn(t.map(l=>l.shape),o);if(0===j(a))return e.makeTensorInfo(a,t[0].dtype,[]);const u=t.filter(l=>j(l.shape)>0);return 1===u.length?$n({inputs:{x:u[0]},backend:e}):eu(u,o,e)}const JA={kernelName:Qo,backendName:"webgpu",kernelFunc:my};class t3{constructor(t,e,r,s,o=!1,i=null,a=!1,u=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t.outShape,this.isChannelsLast="channelsLast"===t.dataFormat,this.isVec4=((t.inChannels%4==0||t.inChannels%3==0)&&this.isChannelsLast||t.outWidth%4==0&&!this.isChannelsLast)&&t.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=wg(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=vg(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&t.inChannels%4!=0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),o&&(this.variableNames.push("bias"),this.variableComponents.push(4)),a&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=u,this.addBias=o,this.activation=i,this.hasPreluActivationWeights=a,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=e%this.tileAOuter==0,this.fitBOuter=r%this.tileBOuter==0,this.fitInner=s%this.tileInner==0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){const t=this.isVec4?hl(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):pl(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),e=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`\n    ${function e3(n,t,e,r,s=!1,o=null,i=!1,a=4,u=4,l=4){const h=n?"\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      ",p=n?"\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ":"\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      ",m=n?"uniforms.xShape[1]":"uniforms.xShape[2]",y=n?"uniforms.xShape[2]":"uniforms.xShape[3]",g=n?"row":"col",x=n?"col":"row",w=`\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${n?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n      let outRow = ${g} / outWidth;\n      let outCol = ${g} % outWidth;\n\n      let WRow = ${x} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${x} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];\n      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];\n      let xCh = ${x} % inChannels;\n      var resData = ${ze(a)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${m} && xCol >= 0 && xCol < ${y}) {\n        ${h}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${(M=>{switch(M){case 1:return"resData = f32(x[xIndex]);";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = vec4<f32>(x[xIndex / 4]);";default:throw new Error(`innerElementSize ${M} is not supported.`)}})(a)}\n      }\n      return resData;`,S=n?t&&r?`\n      ${w}`:`\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${w}\n      }\n      return ${ze(a)}(0.0);`:r&&e?`\n      ${w}`:`\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${w}\n      }\n      return ${ze(a)}(0.0);`,k=`${(M=>{switch(M){case 1:return"return f32(W[row * uniforms.wShape[3] + col]);";case 4:return"return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";default:throw new Error(`innerElementSize ${M} is not supported.`)}})(u)}`,_=ze(l),A=ze(n?a:u),P=ze(n?u:a);return`\n      ${Yr(o,i,4===l,4)}\n      fn mm_readA(batch: i32, row : i32, col : i32) -> ${A} {\n        ${n?S:k}\n      }\n\n      fn mm_readB(batch: i32, row : i32, col : i32) -> ${P} {\n        ${n?k:S}\n      }\n\n      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${_}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${n?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n        ${p}\n        ${vo(s,o)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,e[0],e[1],e[2])}\n    ${t}\n  `}}class n3{constructor(t,e=!1,r=null,s=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=t.outShape,this.isChannelsLast="channelsLast"===t.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=e,this.activation=r,this.hasPreluActivationWeights=s,e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`\n       ${Yr(this.activation,this.hasPreluActivationWeights,!1,4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${vo(this.addBias,this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${ie("index")} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}\n         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}\n         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];\n             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];\n             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {\n               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `}}class r3{constructor(t,e){this.variableNames=["x"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=e,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){const t=this.isChannelsLast?1:2,e=this.isChannelsLast?2:3,r=this.isChannelsLast?"coords[1]":"coords[2]",s=this.isChannelsLast?"coords[2]":"coords[1]",o=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`\n    ${ie("index")} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${r};\n        let col = ${s};\n        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];\n        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${t}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -\n              uniforms.pads[1];\n          let xCol = offsetX + uniforms.dilations[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${e}] && xCol >= 0) {\n            value = ${o};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `}}function bl(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function gy({x:n,filter:t,convInfo:e,backend:r,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:a=null}){const u=null!=s,l=null!=o,c="channelsLast"===e.dataFormat,d=c&&e.filterHeight===e.inHeight&&e.filterWidth===e.inWidth&&"VALID"===e.padInfo.type,h=z().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!h&&(d||1===e.filterHeight&&1===e.filterWidth&&1===e.dilationHeight&&1===e.dilationWidth&&1===e.strideHeight&&1===e.strideWidth&&("SAME"===e.padInfo.type||"VALID"===e.padInfo.type)))return function s3({x:n,filter:t,convInfo:e,backend:r,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:a=null}){const u="channelsLast"===e.dataFormat,l=!u,h=[];let p,m;if(u&&e.filterHeight===e.inHeight&&e.filterWidth===e.inWidth&&"VALID"===e.padInfo.type){const x=e.inHeight*e.inWidth*e.inChannels;p=be({inputs:{x:n},backend:r,attrs:{shape:[1,e.batchSize,x]}}),m=be({inputs:{x:t},backend:r,attrs:{shape:[1,x,e.outChannels]}})}else p=be({inputs:{x:n},backend:r,attrs:{shape:u?[e.batchSize,e.inHeight*e.inWidth,e.inChannels]:[e.batchSize,e.inChannels,e.inHeight*e.inWidth]}}),m=be({inputs:{x:t},backend:r,attrs:{shape:[1,e.inChannels,e.outChannels]}});if(h.push(p),h.push(m),null!=o){const x=bl(o.shape,u);null!=x&&(o=be({inputs:{x:o},backend:r,attrs:{shape:x}}),h.push(o))}if(null!=s){const x=bl(s.shape,u);null!=x&&(s=be({inputs:{x:s},backend:r,attrs:{shape:x}}),h.push(s))}const y=fl({a:u?p:m,b:u?m:p,transposeA:l,transposeB:!1,backend:r,bias:s,activation:a,preluActivationWeights:o,leakyreluAlpha:i}),g=be({inputs:{x:y},backend:r,attrs:{shape:e.outShape}});h.push(y);for(const x of h)r.disposeData(x.dataId);return g}({x:n,filter:t,convInfo:e,backend:r,bias:s,activation:a,preluActivationWeights:o,leakyreluAlpha:i});const p=z().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),m=p>-1?p:r.thresholdToIncreaseWorkgroups,y=e.batchSize*Math.ceil(e.outHeight*e.outWidth/32)*Math.ceil(e.outChannels/32);if(z().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||y<=m)return function o3({x:n,filter:t,convInfo:e,backend:r,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:a=null}){const{filterWidth:u,filterHeight:l,inChannels:c,strideWidth:d,strideHeight:h,padInfo:p,outWidth:m,outHeight:y,dilationWidth:g,dilationHeight:x,dataFormat:w}=e,S="channelsLast"===w,k=u*l*c,_=y*m,P=new r3(S?[e.batchSize,_,k]:[e.batchSize,k,_],S),M=r.runWebGPUProgram(P,[n],n.dtype,[{type:"int32",data:[p.top,p.left]},{type:"int32",data:[h,d]},{type:"int32",data:[x,g]},{type:"int32",data:[m]},{type:"int32",data:[c*u]},{type:"int32",data:[c]}]),W=[];W.push(M);const q=be({inputs:{x:t},backend:r,attrs:{shape:[1,k,-1]}});if(W.push(q),null!=o){const ve=bl(o.shape,S);null!=ve&&(o=be({inputs:{x:o},backend:r,attrs:{shape:ve}}),W.push(o))}if(null!=s){const ve=bl(s.shape,S);null!=ve&&(s=be({inputs:{x:s},backend:r,attrs:{shape:ve}}),W.push(s))}const ge=fl({a:S?M:q,b:S?q:M,transposeA:!S,transposeB:!1,backend:r,bias:s,activation:a,preluActivationWeights:o,leakyreluAlpha:i}),Ie=be({inputs:{x:ge},backend:r,attrs:{shape:e.outShape}});W.push(ge);for(const ve of W)r.disposeData(ve.dataId);return Ie}({x:n,filter:t,convInfo:e,backend:r,bias:s,preluActivationWeights:o,leakyreluAlpha:i,activation:a});let g;const w=[{type:"int32",data:[e.filterHeight,e.filterWidth]},{type:"int32",data:[e.padInfo.top,e.padInfo.left]},{type:"int32",data:[e.strideHeight,e.strideWidth]},{type:"int32",data:[e.dilationHeight,e.dilationWidth]}];if(h)g=new n3(e,u,a,l);else{const A=c?e.outHeight*e.outWidth:e.outChannels,P=c?e.outChannels:e.outHeight*e.outWidth,L=e.filterHeight*e.filterWidth*e.inChannels;w.push({type:"int32",data:[A]},{type:"int32",data:[P]},{type:"int32",data:[L]});const M=r.adapterInfo.isIntel();g=new t3(e,A,P,L,u,a,l,M)}const S=[],k=[n,t];u&&(!c&&1===s.shape.length&&(s=be({inputs:{x:s},backend:r,attrs:{shape:[s.shape[0],1,1]}}),S.push(s)),k.push(s)),l&&(!c&&1===o.shape.length&&(o=be({inputs:{x:o},backend:r,attrs:{shape:[o.shape[0],1,1]}}),S.push(o)),k.push(o)),"leakyrelu"===a&&(w.push({type:"float32",data:[i]}),g.uniforms+=" alpha : f32,");const _=r.runWebGPUProgram(g,k,n.dtype,w);for(const A of S)r.disposeData(A.dataId);return _}const a3={kernelName:qi,backendName:"webgpu",kernelFunc:function i3(n){const{inputs:t,attrs:e,backend:r}=n,{x:s,filter:o}=t,{strides:i,pad:a,dataFormat:u,dilations:l,dimRoundingMode:c}=e,d=ur(u);return gy({x:s,filter:o,convInfo:Ft(s.shape,o.shape,i,l,a,c,!1,d),backend:r})}};class u3{constructor(t){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=t.inShape,this.isChannelsLast="channelsLast"===t.dataFormat,this.isVec4=this.isChannelsLast&&t.outChannels%4==0&&t.inChannels%4==0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){const t=this.isChannelsLast?1:2,e=this.isChannelsLast?2:3,r=this.isChannelsLast?3:1,s=`\n    ${ie()} {\n      let batch = i32(globalId.z) / uniforms.outShape[1];\n      let r = i32(globalId.z) % uniforms.outShape[1];\n      let c = i32(globalId.y) * ${this.workPerThread};\n      let d1 = i32(globalId.x) * 4;\n\n      let dyCorner = vec2<i32>(r, c) - uniforms.pads;\n\n      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n      // ? = to be determined. : = across all values in that axis.\n      var dotProd: array<vec4<f32>, ${this.workPerThread}>;\n      for (var i = 0; i < ${this.workPerThread}; i++) {\n        dotProd[i] = vec4<f32>(0.0);\n      }\n      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);\n        let wRPerm = uniforms.filterDims.x - 1 - wR;\n        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||\n            fract(dyR) > 0.0) {\n          continue;\n        }\n        let idyR = i32(dyR);\n\n        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);\n          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);\n          let wCPerm = uniforms.filterDims.y - 1 - wC;\n          var bDyCVal = true;\n          var bDyCVal2 = true;\n          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC) > 0.0) {\n            bDyCVal = false;\n          }\n          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC2) > 0.0) {\n            bDyCVal2 = false;\n          }\n\n          let idyC = i32(dyC);\n          let idyC2 = i32(dyC2);\n          if (bDyCVal && bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n              xValue = getDy(batch, idyR, idyC2, d2);\n              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                  dot(xValue, wValue1),\n                                                  dot(xValue, wValue2),\n                                                  dot(xValue, wValue3));\n            }\n          } else if (bDyCVal) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n            }\n          } else if (bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC2, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[1] = dotProd[1] + tmpval;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n        let coords = vec4<i32>(batch, r, c + i, d1);\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);\n        }\n      }\n    }\n    `;return this.isVec4?`\n    ${s}\n    `:`\n    ${ie("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${r}];\n\n        let dyCorner = vec2<i32>(coords[${t}], coords[${e}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};\n              let wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd = dotProd + xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class l3{constructor(t){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.filterShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===t.dataFormat,this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`\n    ${ie("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class c3{constructor(t){this.variableNames=["x","dy"],this.uniforms="pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,\n       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.filterShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`\n    ${ie("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wF = coords.x;\n        let wR = coords.y;\n        let wC = coords.z;\n        let d1 = coords.w;\n        let d2 = coords.u;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yF = 0; yF < uniforms.outDepth; yF++) {\n            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];\n            if (xF < 0 || xF >= uniforms.inDepth) {\n              continue;\n            }\n\n            for (var yR = 0; yR < uniforms.outHeight; yR++) {\n              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];\n              if (xR < 0 || xR >= uniforms.inHeight) {\n                continue;\n              }\n\n              for (var yC = 0; yC < uniforms.outWidth; yC++) {\n                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];\n                if (xC < 0 || xC >= uniforms.inWidth) {\n                  continue;\n                }\n\n                let dyValue = getDy(b, yF, yR, yC, d2);\n                let xValue = getX(b, xF, xR, xC, d1);\n                dotProd += xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class d3{constructor(t){this.variableNames=["dy","W"],this.uniforms="filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`\n    ${ie("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let d1 = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyFCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);\n          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {\n            continue;\n          }\n          let idyF = i32(dyF);\n\n          let wFPerm = uniforms.filterDims[0] - 1 - wF;\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            let wRPerm = uniforms.filterDims[1] - 1 - wR;\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let wCPerm = uniforms.filterDims[2] - 1 - wC;\n\n              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {\n                let xValue = getDy(batch, idyF, idyR, idyC, d2);\n                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}const p3={kernelName:Yi,backendName:"webgpu",kernelFunc:function h3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,dy:o}=t,{strides:i,pad:a,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,d=ur(u),h=Ft(s.shape,c,i,1,a,l,!1,d),p=new l3(h);return e.runWebGPUProgram(p,[s,o],s.dtype,[{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.batchSize]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"int32",data:[h.inHeight]},{type:"int32",data:[h.inWidth]}])}};class m3{constructor(t){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t.inShape,N("channelsLast"===t.dataFormat,()=>"TODO: NCHW is unimplemented"),this.isVec4=t.inChannels%4==0&&t.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=wg(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=vg(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){const t=this.isVec4?hl(this.elementsPerThread,this.workgroupSize):pl(this.elementsPerThread,this.workgroupSize);return`\n    ${function f3(n=4){const r=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        \n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${ze(n)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${ze(n)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${n}];\n      }\n      return ${ze(n)}(0.0);`;return`\n  fn mm_readA(batch: i32, row : i32, col : i32) -> ${ze(n)} {\n    ${r}\n  }\n\n  fn mm_readB(batch: i32, row : i32, col : i32) -> ${ze(n)} {\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${(o=>{switch(o){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error(`innerElementSize ${o} is not supported.`)}})(n)}\n    }\n    return ${ze(n)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${ze(n)}) {\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${n}] = value;\n    }\n  }`}(this.isVec4?4:1)}\n    ${t}\n    `}}const y3={kernelName:Zo,backendName:"webgpu",kernelFunc:function g3(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,filter:o}=t,{inputShape:i,strides:a,pad:u,dataFormat:l,dimRoundingMode:c}=r,d=ur(l),h=Ft(i,o.shape,a,1,u,c,!1,d),p=[{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.filterHeight-1-h.padInfo.top,h.filterWidth-1-h.padInfo.left]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.batchSize,h.outHeight,h.outWidth,h.outChannels]}];let m;return z().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||"channelsLast"!==h.dataFormat?m=new u3(h):(m=new m3(h),p.push({type:"uint32",data:[h.inHeight*h.inWidth]},{type:"uint32",data:[h.inChannels]},{type:"uint32",data:[h.filterHeight*h.filterWidth*h.outChannels]})),e.runWebGPUProgram(m,[s,o],"float32",p)}};class x3{constructor(t){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords.x;\n        let d2 = coords.u;\n\n        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n        let xFCorner = xFRCCorner.x;\n        let xRCorner = xFRCCorner.y;\n        let xCCorner = xFRCCorner.z;\n\n        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;\n        let inputDepthVec4Remainder = uniforms.xShape.u % 4;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let xF = xFCorner + wF * uniforms.dilations[0];\n          if (xF < 0 || xF >= uniforms.xShape.y) {\n            continue;\n          }\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let xR = xRCorner + wR * uniforms.dilations[1];\n            if (xR < 0 || xR >= uniforms.xShape.z) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let xC = xCCorner + wC * uniforms.dilations[2];\n              if (xC < 0 || xC >= uniforms.xShape.w) {\n                continue;\n              }\n\n              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {\n                let xValues = vec4<f32>(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                let wValues = vec4<f32>(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (inputDepthVec4Remainder == 1) {\n                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2);\n              } else if (inputDepthVec4Remainder == 2) {\n                let xValues = vec2<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)\n                );\n                let wValues = vec2<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (inputDepthVec4Remainder == 3) {\n                let xValues = vec3<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)\n                );\n                let wValues = vec3<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }`}}const w3={kernelName:Jo,backendName:"webgpu",kernelFunc:function b3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o}=t,{strides:i,pad:a,dilations:u}=r,l=gs(s.shape,o.shape,i,u,a),d=[{type:"int32",data:[l.filterDepth,l.filterHeight,l.filterWidth]},{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationDepth,l.dilationHeight,l.dilationWidth]}],h=new x3(l),p=pn(s.dtype,o.dtype);return e.runWebGPUProgram(h,[s,o],p,d)}},C3={kernelName:Ws,backendName:"webgpu",kernelFunc:function v3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,dy:o}=t,{strides:i,pad:a,filterShape:u}=r,l=gs(s.shape,u,i,1,a),c=new c3(l);return e.runWebGPUProgram(c,[s,o],o.dtype,[{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.batchSize]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"int32",data:[l.inDepth]},{type:"int32",data:[l.inHeight]},{type:"int32",data:[l.inWidth]}])}},I3={kernelName:ei,backendName:"webgpu",kernelFunc:function S3(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,filter:o}=t,{strides:i,pad:a,inputShape:u}=r,l=gs(u,o.shape,i,1,a),c=new d3(l);return e.runWebGPUProgram(c,[s,o],s.dtype,[{type:"int32",data:[l.filterDepth,l.filterHeight,l.filterWidth]},{type:"int32",data:[l.filterDepth-1-l.padInfo.front,l.filterHeight-1-l.padInfo.top,l.filterWidth-1-l.padInfo.left]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"int32",data:[l.outChannels]}])}},N3={kernelName:"Cos",backendName:"webgpu",kernelFunc:tt({opType:se.COS})},$3=tt({opType:se.COSH}),_3={kernelName:Ar,backendName:"webgpu",kernelFunc:$3};class T3{constructor(t,e,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;const[o]=e;this.outputShape=[o,r[0],r[1],t],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId="bilinear"===s?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){const[t,e]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[r,s,o]=this.cropHeightBiggerThan1?[`(${t} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${t} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${t}`],[i,a,u]=this.cropWidthBiggerThan1?[`(${e} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${e} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${e}`];return`\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${r});\n        let width_ratio = f32(${i});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${s};\n        let width_scale = ${a};\n        let in_y = ${o};\n        if( in_y < 0.0 || in_y > ${t} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${u};\n        if( in_x < 0.0 || in_x > ${e} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `}}const E3={kernelName:Ji,backendName:"webgpu",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{image:s,boxes:o,boxInd:i}=t,{cropSize:a,method:u,extrapolationValue:l}=r,c=new T3(s.shape[3],o.shape,a,u);return e.runWebGPUProgram(c,[s,o,i],"float32",[{type:"float32",data:[l]}])}};var wl=function(n){return n.Prod="*",n.Sum="+",n}(wl||{});class yy{constructor(t,e,r,s){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=r,this.reverse=s,this.op=t,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){const t=this.outputShape.length,r=this.exclusive?this.op===wl.Prod?"1.0":"0.0":`getX(${xy(t,"coords",this.op)})`,s=this.outputShape[this.outputShape.length-1];let o="",i="";return this.exclusive?(o=this.reverse?"end != "+(s-1):"end != 0",i=this.reverse?"end + 1":"end - 1"):(o=this.reverse?`end + pow2 < ${s}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`\n      ${ie("index")} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${by(t,"coords",this.op)};\n         var val = ${r};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${o}) {\n           let idx = ${i};\n           ${by(t,"coords",this.op)} = idx;\n           val ${this.op}= getX(${xy(t,"coords",this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `}}function xy(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function by(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function wy(n,t,e,r,s,o){const i=t.shape.length,a=jt([r],i);let u=t;null!=a&&(u=br({inputs:{x:t},backend:e,attrs:{perm:a}}));const l=Kt(1,i)[0];if(l!==i-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const c=u.shape[l];let d=$n({inputs:{x:u},backend:e});for(let h=0;h<=Math.ceil(Math.log2(c))-1;h++){const p=new yy(n,u.shape,!1,o),m=d;d=e.runWebGPUProgram(p,[d],d.dtype,[{type:"float32",data:[h]}]),e.disposeData(m.dataId)}if(s){const h=new yy(n,u.shape,s,o),p=d;d=e.runWebGPUProgram(h,[d],d.dtype,[{type:"float32",data:[0]}]),e.disposeData(p.dataId)}if(null!=a){const p=br({inputs:{x:d},backend:e,attrs:{perm:Ba(a)}});return e.disposeData(d.dataId),e.disposeData(u.dataId),p}return d}const A3={kernelName:Qi,backendName:"webgpu",kernelFunc:function R3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,exclusive:i,reverse:a}=r;return wy(wl.Prod,s,e,o,i,a)}},P3={kernelName:Zi,backendName:"webgpu",kernelFunc:function D3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,exclusive:i,reverse:a}=r;return wy(wl.Sum,s,e,o,i,a)}},F3={kernelName:ea,backendName:"webgpu",kernelFunc:function O3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,weights:o}=t,{size:i,binaryOutput:a}=r,u=1===s.shape.length,c=j(o.shape)>0,d=o.dtype,h=u?[s.shape[0]]:[s.shape[0],s.shape[1]],m=gn({backend:e,attrs:{shape:u?[i]:[s.shape[0],i],value:0,dtype:d}}),y=new hy(h,c,a);return e.runWebGPUProgram(y,c?[s,o]:[s],d,[{type:"int32",data:[i]}],m)}};class L3{constructor(t,e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${e}`,this.dataFormat=e}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const M3={kernelName:Us,backendName:"webgpu",kernelFunc:function B3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{blockSize:o,dataFormat:i}=r,a=s.shape[0],d=("NHWC"===i?s.shape[1]:s.shape[2])*o,h=("NHWC"===i?s.shape[2]:s.shape[3])*o,p=("NHWC"===i?s.shape[3]:s.shape[1])/(o*o),y=[{type:"int32",data:[o]}],g=new L3("NHWC"===i?[a,d,h,p]:[a,p,d,h],i);return e.runWebGPUProgram(g,[s],s.dtype,y)}};class z3{constructor(t,e,r,s=!1,o=null,i=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=t,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=s,this.activation=o,this.hasPreluActivation=i,this.filterHeight=e,this.filterWidth=r,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){const t=this.filterWidth*this.filterHeight,e=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],r=this.workgroupSize[1]+this.filterHeight-1,s=this.workgroupSize[0]+this.filterWidth-1;return`\n      ${Yr(this.activation,this.hasPreluActivation,!1,4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${s}>, ${r}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${ie()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${s}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${t<e?`if (wIndex < ${t})`:`for(; wIndex < ${t}; wIndex = wIndex + ${e})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${vo(this.addBias,this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}class vy{constructor(t,e=!1,r=null,s=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=t.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;const o=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=he(o),this.dispatch=ae(this.dispatchLayout,o,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),N("channelsLast"===t.dataFormat,()=>"TODO: NCHW is unimplemented"),e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.convInfo=t,this.addBias=e,this.activation=r,this.hasPreluActivation=s,this.shaderKey=`depthwiseVec4_${r}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){const t=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,e=this.convInfo.strideHeight,r=this.convInfo.strideWidth;return`\n      ${Yr(this.activation,this.hasPreluActivation,!0,4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${ie("index")} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${e}, ${r}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${t}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${t}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${r} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${vo(this.addBias,this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `}}class Cy{constructor(t,e=!1,r=null,s=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===t.dataFormat,e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.convInfo=t,this.addBias=e,this.activation=r,this.hasPreluActivation=s,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){const t=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`\n      ${Yr(this.activation,this.hasPreluActivation,!1,4)}\n\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;\n          let d2 = coords[${this.isChannelsLast?3:1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ${t};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${t};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${vo(this.addBias,this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}const W3={kernelName:Dr,backendName:"webgpu",kernelFunc:function V3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o}=t,{strides:i,pad:a,dataFormat:u,dilations:l,dimRoundingMode:c}=r,d=ur(u);let h=l;null==h&&(h=[1,1]);const p=Ft(s.shape,o.shape,i,h,a,c,!0,d),m=[{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.inHeight,p.inWidth]}],y="channelsLast"===p.dataFormat;let g;return!y&&p.inHeight>16&&p.inWidth>16&&1===p.strideHeight&&1===p.strideWidth&&1===p.dilationWidth&&1===p.dilationHeight&&p.inChannels===p.outChannels?g=new z3(p.outShape,p.filterHeight,p.filterWidth):y&&p.outHeight>4&&p.outWidth>4&&p.strideWidth<=2&&p.inChannels===p.outChannels&&1===p.dilationHeight&&1===p.dilationWidth&&p.inChannels%4==0?(g=new vy(p),m.push({type:"int32",data:[g.virtualWidth]})):(g=new Cy(p),m.push({type:"int32",data:[p.filterHeight]},{type:"int32",data:[p.filterWidth]},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]})),e.runWebGPUProgram(g,[s,o],s.dtype,m)}};class U3{constructor(t){this.variableNames=["x","dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,\n      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.filterShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`\n      ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let dm = coords[3];\n        let d2 = d1 * uniforms.channelMul + dm;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yR = 0; yR < uniforms.outHeight; yR++) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC++) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              let dyValue = getDy(b, yR, yC, d2);\n              let xValue = getX(b, xR, xC, d1);\n              dotProd += xValue * dyValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class G3{constructor(t){this.variableNames=["dy","W"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`\n      ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[3];\n        let dyCorner = coords.yz - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n\n          let idyR = i32(dyR);\n          let wRPerm = uniforms.filterDims[0] - 1 - wR;\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n\n            let idyC = i32(dyC);\n            let wCPerm = uniforms.filterDims[1] - 1 - wC;\n\n            for (var dm = 0; dm < uniforms.channelMul; dm++) {\n              let d2 = d1 * uniforms.channelMul + dm;\n              let xValue = getDy(batch, idyR, idyC, d2);\n              let wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const j3={kernelName:ta,backendName:"webgpu",kernelFunc:function H3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,dy:o}=t,{strides:i,dilations:a,pad:u,dimRoundingMode:l,filterShape:c}=r,d=Ft(s.shape,c,i,a,u,l,!0),h=new U3(d);return e.runWebGPUProgram(h,[s,o],"float32",[{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.filterHeight,d.filterWidth]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]},{type:"int32",data:[d.inHeight]},{type:"int32",data:[d.inWidth]},{type:"int32",data:[d.batchSize]},{type:"int32",data:[d.outChannels/d.inChannels]}])}},X3={kernelName:na,backendName:"webgpu",kernelFunc:function K3(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,filter:o}=t,{strides:i,dilations:a,pad:u,dimRoundingMode:l,inputShape:c}=r,d=Ft(c,o.shape,i,a,u,l,!0),h=new G3(d);return e.runWebGPUProgram(h,[s,o],s.dtype,[{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.filterHeight-1-d.padInfo.top,d.filterWidth-1-d.padInfo.left]},{type:"int32",data:[d.filterHeight,d.filterWidth]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]},{type:"int32",data:[d.outChannels/d.inChannels]}])}};class q3{constructor(t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t,t],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}const Q3={kernelName:ra,backendName:"webgpu",kernelFunc:function Y3(n){const{inputs:t,backend:e}=n,{x:r}=t,s=[...r.shape,...r.shape],o=j(r.shape),i=be({inputs:{x:r},backend:e,attrs:{shape:[o]}}),a=new q3(o),u=e.runWebGPUProgram(a,[i],i.dtype),l=be({inputs:{x:u},backend:e,attrs:{shape:s}});return e.disposeData(i.dataId),e.disposeData(u.dataId),l}};class Z3{constructor(t){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`\n       ${ie("index")} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilations[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilations[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `}}const eD={kernelName:sa,backendName:"webgpu",kernelFunc:function J3(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o}=t,{strides:i,pad:a,dilations:u}=r,l=Da(s.shape,o.shape,i,a,"NHWC",u),d=[{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]}],h=new Z3(l);return e.runWebGPUProgram(h,[s,o],s.dtype,d)}};class tD{constructor(t,e){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t.inShape,this.dispatchLayout=he(t.outShape),this.dispatch=ae(this.dispatchLayout,t.outShape,this.workgroupSize),"float32"!==e&&"int32"!==e)throw new Error(`Dilation2DBackpropInput only supports float32 and int32\n          types, does not support ${e} type.`);this.type=e,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`\n       ${ie("index")} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var xRMax = 0;\n           var xCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     xRMax = xR;\n                     xCMax = xC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.xShape[3] *\n               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));\n           let value = getDy(b, r, c, d);\n           ${ws("&result[flatIndexIn]","value",this.type)}\n         }\n       }\n     `}}class nD{constructor(t,e,r){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t.filterShape,this.dispatchLayout=he(t.outShape),this.dispatch=ae(this.dispatchLayout,t.outShape,this.workgroupSize),"float32"!==r&&"int32"!==r)throw new Error(`Dilation2DBackpropFilter only supports float32 and int32\n          types, does not support ${r} type.`);this.type=r,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`\n       ${ie("index")} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var wRMax = 0;\n           var wCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     wRMax = wR;\n                     wCMax = wC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);\n           let value = getDy(b, r, c, d);\n           ${ws("&result[flatIndexIn]","value",this.type)}\n         }\n       }\n     `}}const sD={kernelName:"Dilation2DBackpropFilter",backendName:"webgpu",kernelFunc:function rD(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o,dy:i}=t,{strides:a,pad:u,dilations:l}=r,c=Da(s.shape,o.shape,a,u,"NHWC",l),d=o.dtype,h=new nD(c,o.shape,d),p=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[j(c.outShape)]}],m=gn({backend:e,attrs:{shape:o.shape,value:0,dtype:d}});return e.runWebGPUProgram(h,[s,o,i],d,p,m)}},iD={kernelName:"Dilation2DBackpropInput",backendName:"webgpu",kernelFunc:function oD(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o,dy:i}=t,{strides:a,pad:u,dilations:l}=r,c=Da(s.shape,o.shape,a,u,"NHWC",l),d=s.dtype,h=new tD(c,d),p=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[j(c.outShape)]}],m=gn({backend:e,attrs:{shape:c.inShape,value:0,dtype:d}});return e.runWebGPUProgram(h,[s,o,i],d,p,m)}};class aD{constructor(t,e,r){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=qa.DRAW,this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=e,this.textureFormat=r,this.shaderKey=`draw_${e}_${r}`}getUserCode(){let t;const e="float32"===this.type?"value":"value / 255.0";return t=`\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ${e};\n        rgba[1] = ${e};\n        rgba[2] = ${e};\n      } else {\n        rgba[d] = ${e};\n      }`,`\n       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;\n       ${ie("index")} {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ${t}\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      `}}const lD={kernelName:ni,backendName:"webgpu",kernelFunc:function uD(n){const{inputs:t,backend:e,attrs:r}=n,{image:s}=t,{canvas:o,options:i}=r,[a,u]=s.shape.slice(0,2),{imageOptions:l}=i||{},c=(null==l?void 0:l.alpha)||1,d=e.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",h=[a,u],p=new aD(h,s.dtype,d);o.width=u,o.height=a;const m="webgpu";let g,y=o.getContext(m);y||(g=new OffscreenCanvas(u,a),y=g.getContext(m));const x=3===s.shape.length?s.shape[2]:1;y.configure({device:e.device,format:d,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});const w="int32",S=e.makeTensorInfo(h,w),k=e.tensorMap.get(S.dataId);if(k.resource=y.getCurrentTexture(),k.external=!0,e.runWebGPUProgram(p,[s],w,[{type:"uint32",data:[x]},{type:"float32",data:[c]}],S),g){const A=o.getContext("2d");if(!A)throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");A.drawImage(g,0,0)}return e.disposeData(S.dataId),s}},Sy=Vt({opType:De.MUL,cpuKernelImpl:gR,supportsComplex:!0}),cD={kernelName:Z,backendName:"webgpu",kernelFunc:Sy};function Iy(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,keepDims:i}=r;return Io(s,o,i,"sum",e)}const dD={kernelName:"Sum",backendName:"webgpu",kernelFunc:Iy},pD={kernelName:hn,backendName:"webgpu",kernelFunc:function hD(n){const{inputs:t,backend:e,attrs:r}=n,{equation:s}=r,o=t,{allDims:i,summedDims:a,idDims:u}=rh(s,o.length);oh(i.length,u,o);const{path:l,steps:c}=ih(a,u),d=c.length;let h=null,p=i.length;const m=[];for(let y=0;y<d;++y){for(const g of c[y]){const{permutationIndices:x,expandDims:w}=sh(p,u[g]);let S;ah(x)?S=o[g]:(S=br({inputs:{x:o[g]},backend:e,attrs:{perm:x}}),m.push(S));const k=S.shape.slice();for(let _=0;_<w.length;++_)k.splice(w[_],0,1);ot(S.shape,k)||(S=be({inputs:{x:S},backend:e,attrs:{shape:k}}),m.push(S)),null===h?h=S:(h=Sy({inputs:{a:S,b:h},backend:e}),m.push(h))}y<d-1&&(l[y]>=0&&(h=Iy({inputs:{x:h},backend:e,attrs:{axis:l[y]-(i.length-p),keepDims:!1}}),m.push(h)),p--)}for(const y of m)y!==h&&e.disposeData(y.dataId);return h}},mD={kernelName:"Elu",backendName:"webgpu",kernelFunc:tt({opType:se.ELU})},gD={kernelName:Cu,backendName:"webgpu",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:r,y:s}=t,o=new ml(De.ELU_DER,r.shape,s.shape);return e.runWebGPUProgram(o,[r,s],r.dtype)}},yD=Vt({opType:De.EQUAL,dtype:"bool",cpuKernelImpl:tR}),xD={kernelName:rs,backendName:"webgpu",kernelFunc:yD},wD={kernelName:"Erf",backendName:"webgpu",kernelFunc:tt({opType:se.ERF})},vD=tt({opType:se.EXP,cpuKernelImpl:nR,dtype:"float32"}),CD={kernelName:Or,backendName:"webgpu",kernelFunc:vD};function Lh(n){const{inputs:t,attrs:e,backend:r}=n,{dim:s}=e,{input:o}=t,i=o.shape.length,a=o.shape.slice();let u=s;return s<0&&(N(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+s+1),a.splice(u,0,1),be({inputs:{x:o},backend:r,attrs:{shape:a}})}const SD={kernelName:Gs,backendName:"webgpu",kernelFunc:Lh},ID=tt({opType:se.EXPM1,cpuKernelImpl:rR}),kD={kernelName:Wn,backendName:"webgpu",kernelFunc:ID};class ky{constructor(t,e){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=t,this.shaderKey=`fft_${t}`}getUserCode(){return`\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${"real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `}}function Ny(n,t,e){const r=e.tensorMap.get(n.dataId),s=j(n.shape),o=n.shape[n.shape.length-1],a=[],u=be({inputs:{x:n},backend:e,attrs:{shape:[s/o,o]}});a.push(u);const l=u.shape,c=new ky("real",l),d=new ky("imag",l),h=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:l},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:l}],y=[{type:"float32",data:[t?2*Math.PI:-2*Math.PI]},{type:"float32",data:[t?l[1]:1]}],g=e.runWebGPUProgram(c,h,"float32",y);a.push(g);const x=e.runWebGPUProgram(d,h,"float32",y);a.push(x);const w=Co({inputs:{real:g,imag:x},backend:e});a.push(w);const S=be({inputs:{x:w},backend:e,attrs:{shape:n.shape}});return a.forEach(k=>e.disposeData(k.dataId)),S}const $D={kernelName:"FFT",backendName:"webgpu",kernelFunc:function ND(n){const{inputs:t,backend:e}=n,{input:r}=t;return Ny(r,!1,e)}};class _D{constructor(t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `}}const TD={kernelName:aa,backendName:"webgpu",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,r=t,s=new _D(e.shape);return r.runWebGPUProgram(s,[e],e.dtype)}},ED=tt({opType:se.FLOOR,cpuKernelImpl:sR}),RD={kernelName:js,backendName:"webgpu",kernelFunc:ED},AD=Vt({opType:De.FLOOR_DIV,cpuKernelImpl:oR,dtype:"int32"}),DD={kernelName:nr,backendName:"webgpu",kernelFunc:AD};class PD{constructor(t,e,r=!1){this.pixelsOpType=qa.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[e,1,1]),this.importVideo=r,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){const t=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`\n      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};\n      ${ie("index")} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${t};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `}}const OD={kernelName:Tu,backendName:"webgpu",kernelFunc:function FD(n){const{inputs:t,backend:e,attrs:r}=n;let{pixels:s}=t;const{numChannels:o}=r;if(null==s)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");const i=typeof HTMLVideoElement<"u"&&s instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement,u=typeof HTMLCanvasElement<"u"&&s instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&s instanceof OffscreenCanvas,l=typeof ImageBitmap<"u"&&s instanceof ImageBitmap,[c,d]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],h=[d,c,o],p=z().getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&i,m=i||a;if(l||u||m){let w;if(p)w=e.device.importExternalTexture({source:s});else{if(m){const oe=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==_i||oe!==Bh)&&(Bh=oe,_i=document.createElement("canvas").getContext("2d",{willReadFrequently:Bh})),_i.canvas.width=c,_i.canvas.height=d,_i.drawImage(s,0,0,c,d),s=_i.canvas}const W=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,re=e.textureManager.acquireTexture(h[1],h[0],"rgba8unorm",W);e.queue.copyExternalImageToTexture({source:s},{texture:re},[h[1],h[0]]),w=re}const S=j(h),k=pt(h),_=new PD(h,o,p),A=[{type:"uint32",data:[S]},{type:"uint32",data:[o]},{type:"uint32",data:[...k]}],P=e.makeTensorInfo([d,c],"int32");e.tensorMap.get(P.dataId).resource=w;const M=e.runWebGPUProgram(_,[P],"int32",A);return e.disposeData(P.dataId),M}const y=s.data;let g=y;if(null!=o&&4!==o){g=new Uint8Array(s.width*s.height*o);const w=y.length;let S=0;for(let k=0;k<w;k++)k%4<o&&(g[S++]=y[k])}const x=e.makeTensorInfo(h,"int32",new Int32Array(g));return e.uploadToGPU(x.dataId),x}};let _i,Bh=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class LD{constructor(t,e,r,s,o){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],Be(t,e),Be(t,r),this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=s&&(Be(t,s),this.variableNames.push("offset")),null!=o&&(Be(t,o),this.variableNames.push("scale")),this.offsetShape=s,this.scaleShape=o,this.shaderKey="batchNorm"}getUserCode(){let t="0.0";null!=this.offsetShape&&(t="getOffsetByOutputIndex(index)");let e="1.0";return null!=this.scaleShape&&(e="getScaleByOutputIndex(index)"),`\n      ${ie("index")} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${t};\n          let scaleValue = ${e};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `}}const BD={kernelName:oi,backendName:"webgpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:r,scale:s,offset:o,mean:i,variance:a}=n,{varianceEpsilon:u}=t,l=e,c=[r,i,a];let d=null;null!=o&&(d=o.shape,c.push(o));let h=null;null!=s&&(h=s.shape,c.push(s));const p=new LD(r.shape,i.shape,a.shape,d,h);return l.runWebGPUProgram(p,c,r.dtype,[{type:"float32",data:[u]}])}},zD={kernelName:Ru,backendName:"webgpu",kernelFunc:function MD(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o,bias:i,preluActivationWeights:a}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:h,activation:p,leakyreluAlpha:m}=r,y=ur(c);return gy({x:s,filter:o,convInfo:Ft(s.shape,o.shape,u,d,l,h,!1,y),backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:m,activation:p})}},WD={kernelName:Au,backendName:"webgpu",kernelFunc:function VD(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o,bias:i,preluActivationWeights:a}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:d,activation:h,leakyreluAlpha:p}=r;let m=c;null==m&&(m=[1,1]),N(nn(u,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`);const y=Ft(s.shape,o.shape,u,m,l,d,!0),g=[s,o],x=null!=i,w=null!=a;x&&g.push(i),w&&g.push(a);const S=[{type:"int32",data:[y.padInfo.top,y.padInfo.left]},{type:"int32",data:[y.inHeight,y.inWidth]}];let k;return y.outHeight>4&&y.outWidth>4&&y.strideWidth<=2&&y.inChannels===y.outChannels&&1===y.dilationHeight&&1===y.dilationWidth&&y.inChannels%4==0?(k=new vy(y,x,h,w),S.push({type:"int32",data:[k.virtualWidth]})):(k=new Cy(y,x,h,w),S.push({type:"int32",data:[y.filterHeight]},{type:"int32",data:[y.filterWidth]},{type:"int32",data:[y.strideHeight,y.strideWidth]},{type:"int32",data:[y.dilationHeight,y.dilationWidth]})),"leakyrelu"===h&&(S.push({type:"float32",data:[p]}),k.uniforms+=" alpha : f32,"),e.runWebGPUProgram(k,g,"float32",S)}};class UD{constructor(t,e){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${t}`,this.sliceDim=t,this.uniforms=`sliceDim : i32, strides : ${Pt(t)},`}getUserCode(){let t;return t=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides",`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${t};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `}}const HD={kernelName:ua,backendName:"webgpu",kernelFunc:function GD(n){const{inputs:t,backend:e}=n,{params:r,indices:s}=t,o=s.shape,i=o[o.length-1],a=j(r.shape),[u,l,c,d]=Kd(r,s),h=be({inputs:{x:s},backend:e,attrs:{shape:[l,i]}}),p=be({inputs:{x:r},backend:e,attrs:{shape:[j(r.shape)/c,c]}});if(e.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const w=e.readSync(s.dataId),S=e.bufferSync(r),k=iR(w,S,r.dtype,l,i,c,d,r.shape,a);return e.makeTensorInfo(u,r.dtype,k.values)}const m=new UD(i,[l,c]),g=e.runWebGPUProgram(m,[p,h],p.dtype,[{type:"int32",data:[i]},{type:"int32",data:d}]),x=be({inputs:{x:g},backend:e,attrs:{shape:u}});return e.disposeData(h.dataId),e.disposeData(p.dataId),e.disposeData(g.dataId),x}};class jD{constructor(t,e){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.slice(),this.aShape=t,this.outputShape=e,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){const t=function KD(n){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],e=[];for(let r=0;r<n.length;r++)e.push(2===r?"indexZ":`${t[r]}`);return e.join()}(this.aShape);return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${t}));\n        }\n      }\n    `}}function $y(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,indices:o}=t,{axis:i,batchDims:a}=r,l=dh(s,o,at(i,s.shape)[0],a),c=j(o.shape),d=[],h=be({inputs:{x:s},backend:e,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=be({inputs:{x:o},backend:e,attrs:{shape:[l.batchSize,c/l.batchSize]}});d.push(h),d.push(p);const m=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize];if(e.shouldExecuteOnCPU([s,o])){const S=e.tensorMap.get(p.dataId).values,k=dt(p.shape,p.dtype,S),A=e.tensorMap.get(h.dataId).values,P=dt(h.shape,h.dtype,A),L=aR(P,k,m);return d.forEach(M=>e.disposeData(M.dataId)),e.makeTensorInfo(l.outputShape,L.dtype,L.values)}const y=new jD(h.shape,m),g=e.runWebGPUProgram(y,[h,p],h.dtype);d.push(g);const x=be({inputs:{x:g},backend:e,attrs:{shape:l.outputShape}});return d.forEach(w=>e.disposeData(w.dataId)),x}const XD={kernelName:ii,backendName:"webgpu",kernelFunc:$y},qD=Vt({opType:De.GREATER,cpuKernelImpl:lR,dtype:"bool"}),YD={kernelName:Ks,backendName:"webgpu",kernelFunc:qD},QD=Vt({opType:De.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:uR}),ZD={kernelName:hr,backendName:"webgpu",kernelFunc:QD},eP={kernelName:la,backendName:"webgpu",kernelFunc:function JD(n){const{inputs:t,backend:e}=n,{input:r}=t;return Ny(r,!0,e)}},tP=tt({opType:se.IS_FINITE,dtype:"bool"}),nP={kernelName:ca,backendName:"webgpu",kernelFunc:tP},rP=tt({opType:se.IS_INF,dtype:"bool"}),sP={kernelName:da,backendName:"webgpu",kernelFunc:rP},oP=tt({opType:se.IS_NAN,dtype:"bool"}),iP={kernelName:Xs,backendName:"webgpu",kernelFunc:oP},uP={kernelName:qs,backendName:"webgpu",kernelFunc:function aP(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{alpha:o}=r,i=[{type:"float32",data:[o]}],a=new Ni(s.shape,se.LEAKYRELU,"alpha : f32,");return e.runWebGPUProgram(a,[s],"float32",i)}},lP=Vt({opType:De.LESS,dtype:"bool",cpuKernelImpl:dR}),cP={kernelName:os,backendName:"webgpu",kernelFunc:lP},dP=Vt({opType:De.LESS_EQUAL,dtype:"bool",cpuKernelImpl:cR}),hP={kernelName:Ys,backendName:"webgpu",kernelFunc:dP};class pP{constructor(t){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `}}const mP={kernelName:ha,backendName:"webgpu",kernelFunc:function fP(n){const{backend:t,attrs:e}=n,{start:r,stop:s,num:o}=e,i=(s-r)/(o-1),a=new pP(o);return t.runWebGPUProgram(a,[],"float32",[{type:"float32",data:[r]},{type:"float32",data:[i]}])}},gP=tt({opType:se.LOG,cpuKernelImpl:hR}),yP={kernelName:Qs,backendName:"webgpu",kernelFunc:gP},xP=tt({opType:se.LOG1P}),bP={kernelName:pa,backendName:"webgpu",kernelFunc:xP},wP=Vt({opType:De.LOGICAL_AND,dtype:"bool"}),vP={kernelName:ui,backendName:"webgpu",kernelFunc:wP},CP=tt({opType:se.LOGICAL_NOT}),SP={kernelName:fa,backendName:"webgpu",kernelFunc:CP},IP=Vt({opType:De.LOGICAL_OR}),kP={kernelName:ma,backendName:"webgpu",kernelFunc:IP},_y="\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n";class NP{constructor(t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${_y}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `}}class $P{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,N(e<=this.maxAllowRadius,()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${e}`),this.outputShape=t,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=ae(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${ie()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${_y}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `}}const TP={kernelName:"LRN",backendName:"webgpu",kernelFunc:function _P(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{depthRadius:o,bias:i,alpha:a,beta:u}=r;let l;return l=o>16?new NP(s.shape):new $P(s.shape,o),e.runWebGPUProgram(l,[s],s.dtype,[{type:"int32",data:[o]},{type:"float32",data:[i]},{type:"float32",data:[a]},{type:"float32",data:[u]}])}};class EP{constructor(t){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n\n        let MIN_DEPTH_BEGIN = 0;\n        let MAX_DEPTH_END = uniforms.outShape[3];\n        var result = 0.0;\n        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {\n          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);\n          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);\n\n          var norm = 0.0;\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            } else {\n              break;\n            }\n          }\n\n          norm = uniforms.alpha * norm + uniforms.bias;\n\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              var dyi = -2.0 * uniforms.alpha * uniforms.beta\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * uniforms.beta);\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, result);\n      }\n    }\n  `}}const AP={kernelName:Zs,backendName:"webgpu",kernelFunc:function RP(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,y:o,dy:i}=t,{depthRadius:a,bias:u,alpha:l,beta:c}=r,d=new EP(s.shape);return e.runWebGPUProgram(d,[s,o,i],s.dtype,[{type:"int32",data:[a]},{type:"float32",data:[u]},{type:"float32",data:[l]},{type:"float32",data:[c]}])}},DP=Vt({opType:De.MAX,cpuKernelImpl:fR}),PP={kernelName:Js,backendName:"webgpu",kernelFunc:DP},FP={kernelName:li,backendName:"webgpu",kernelFunc:function OP(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{filterSize:o,strides:i,pad:a,dimRoundingMode:u}=r;return dy(s,Hn(s.shape,o,i,1,a,u),"max",e)}},BP={kernelName:f,backendName:"webgpu",kernelFunc:function LP(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{filterSize:o,strides:i,pad:a,dataFormat:u,dimRoundingMode:l}=r,d=zr(s.shape,o,i,[1,1,1],a,l,u),h=new Ph(d,"max");return e.runWebGPUProgram(h,[s],s.dtype,[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.front,d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inDepth,d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]}])}};class MP{constructor(t){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`\n      ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            let curPosValue = wR * uniforms.filterDims[1] + wC;\n            let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class zP{constructor(t){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`\n      ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;\n\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;\n              let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const WP={kernelName:b,backendName:"webgpu",kernelFunc:function VP(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,input:o}=t,i=o,{filterSize:a,strides:u,pad:l,dimRoundingMode:c}=r,h=zr(i.shape,a,u,[1,1,1],l,c),p=new Ph(h,"max",!0);let m=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.front,h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inDepth,h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]}];const y=e.runWebGPUProgram(p,[i],"int32",m),g=new zP(h);m=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterDepth-1-h.padInfo.front,h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outDepth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]}];const x=e.runWebGPUProgram(g,[s,y],i.dtype,m);return e.disposeData(y.dataId),x}},GP={kernelName:xa,backendName:"webgpu",kernelFunc:function UP(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,input:o,output:i}=t,a=o;Ig([o,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,h=Hn(a.shape,u,l,1,c,d),p=new Za(h,"max",!0);let m=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterHeight,h.effectiveFilterWidth]}];const y=e.runWebGPUProgram(p,[a],"int32",m),g=new MP(h);m=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]}];const x=e.runWebGPUProgram(g,[s,y],a.dtype,m);return e.disposeData(y.dataId),x}},jP={kernelName:C,backendName:"webgpu",kernelFunc:function HP(n){const{inputs:t,backend:e,attrs:r}=n,{filterSize:s,strides:o,pad:i,includeBatchInIndex:a}=r,{x:u}=t;N(4===u.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${u.shape.length}.`);const l=[1,1];N(nn(o,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${l}'`);const c=Hn(u.shape,s,o,l,i),d=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]}];let h=new Za(c,"max",!1);const p=e.runWebGPUProgram(h,[u],u.dtype,d);return h=new Za(c,"max",!0,!0,a),[p,e.runWebGPUProgram(h,[u],"int32",d)]}},XP={kernelName:T,backendName:"webgpu",kernelFunc:function KP(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,keepDims:i}=r;return Io(s,o,i,"min",e)}},qP=Vt({opType:De.MIN,cpuKernelImpl:mR}),YP={kernelName:R,backendName:"webgpu",kernelFunc:qP};class QP{constructor(t,e,r){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.map((s,o)=>s[0]+t[o]+s[1]),this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=t,e.map((s,o)=>{this.uniforms+=` pad${o} : vec2<i32>,`}),this.offset="reflect"===r?0:1,this.shaderKey=`mirrorPad_${r}`}getUserCode(){const t=this.xShape.length,e=this.xShape.map((l,c)=>`uniforms.pad${c}[0]`).join(","),r=this.xShape.map((l,c)=>`uniforms.pad${c}[0] + uniforms.xShape${t>1?`[${c}]`:""}`).join(","),s=1===t?"start":"start[i]",o=1===t?"end":"end[i]",i=1===t?"outC":"outC[i]",a=Pt(t),u=t>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,t):"coords";return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let start = ${a}(${e});\n          let end = ${a}(${r});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${t}; i = i + 1) {\n            if (${i} < ${s}) {\n              ${i} = ${s} * 2 - ${i} - ${this.offset};\n            } else if(${i} >= ${o}) {\n              ${i} = (${o} - 1) * 2 - ${i} + ${this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${u}));\n        }\n      }\n    `}}const ZP={kernelName:E,backendName:"webgpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:r}=n,{paddings:s,mode:o}=t,i=e,a=s.map(c=>({type:"int32",data:[c[0],c[1]]})),u=new QP(r.shape,s,o);return i.runWebGPUProgram(u,[r],r.dtype,a)}},JP=Vt({opType:De.MOD}),eO={kernelName:B,backendName:"webgpu",kernelFunc:JP};class tO{constructor(t,e){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t,e],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {\n      let HASHSCALE1 = 443.8975;\n      let p = resultUV * seed;\n      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);\n      p3 = p3 + dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n\n        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),\n            f32(coords[0]) / f32(uniforms.outShape[0]));\n        let r = random(uniforms.seed, resUV);\n        var cdf = 0.0;\n        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {\n          cdf = cdf + getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutputAtIndexI32(index, i);\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);\n      }\n    }\n  `}}class nO{constructor(t){this.variableNames=["logits"],this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.workgroupSize=this.outputShape[1]>=4096?[256,1,1]:[64,1,1],this.shaderKey="softmax"}getUserCode(){return`\n    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;\n    var<workgroup> rowMaxShared : f32;\n    var<workgroup> rowSumShared : f32;\n    const blockSize = ${this.workgroupSize[0]};\n    ${ie("index")} {\n      let row = index / blockSize;\n      let tid = i32(localId.x);\n      let cols = uniforms.outShape[1];\n\n      var threadMax = -3.402823e+38f;\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = getLogits(row, col);\n        threadMax = max(threadMax, value);\n      }\n      if (tid < cols) {\n        buf[tid] = threadMax;\n      }\n      workgroupBarrier();\n\n      var reduceSize = min(cols, blockSize);\n      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n        reduceSize = currSize + (reduceSize & 1);\n        if (tid < currSize) {\n          buf[tid] = max(buf[tid], buf[tid + reduceSize]);\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowMaxShared = buf[0];\n      }\n      workgroupBarrier();\n\n      var threadSum = 0.0;\n      for (var col = tid; col < cols; col += blockSize) {\n        let subExp = exp(getLogits(row, col) - rowMaxShared);\n        threadSum += subExp;\n      }\n      buf[tid] = threadSum;\n      workgroupBarrier();\n\n      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n        if (tid < currSize) {\n          buf[tid] = buf[tid] + buf[tid + currSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowSumShared = buf[0];\n      }\n      workgroupBarrier();\n\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;\n        setOutputAtCoords(row, col, value);\n      }\n  }\n    `}}function Ty(n){const{inputs:t,backend:e,attrs:r}=n,{logits:s}=t,{dim:o}=r,i=be({inputs:{x:s},backend:e,attrs:{shape:[j(s.shape)/s.shape[o],s.shape[o]]}}),a=new nO(i.shape),u=e.runWebGPUProgram(a,[i],s.dtype),l=be({inputs:{x:u},backend:e,attrs:{shape:s.shape}});return e.disposeData(i.dataId),e.disposeData(u.dataId),l}const rO={kernelName:pc,backendName:"webgpu",kernelFunc:Ty},oO={kernelName:G,backendName:"webgpu",kernelFunc:function sO(n){const{inputs:t,backend:e,attrs:r}=n,{logits:s}=t,{numSamples:o,seed:i,normalized:a}=r,u=a?s:Ty({inputs:{logits:s},backend:e,attrs:{dim:s.shape.length-1}}),c=u.shape[1],d=new tO(u.shape[0],o),p=e.runWebGPUProgram(d,[u],"int32",[{type:"float32",data:[i]},{type:"int32",data:[c]}]);return a||e.disposeData(u.dataId),p}},aO={kernelName:"Neg",backendName:"webgpu",kernelFunc:function iO(n){const{inputs:t,backend:e}=n,{x:r}=t;if(e.shouldExecuteOnCPU([r])){const o=e.tensorMap.get(r.dataId),[i,a]=yR(o.values,r.shape,r.dtype);return e.makeTensorInfo(a,r.dtype,i)}const s=new Ni(r.shape,se.NEG);return e.runWebGPUProgram(s,[r],r.dtype)}},lO={kernelName:Se,backendName:"webgpu",kernelFunc:function uO(n){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:r}=n,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:u}=r,l=e.readSync(s.dataId),c=e.readSync(o.dataId),{selectedIndices:d}=Fd(l,c,i,a,u);return e.makeTensorInfo([d.length],"int32",new Int32Array(d))}},dO={kernelName:Te,backendName:"webgpu",kernelFunc:function cO(n){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:r}=n,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:u,softNmsSigma:l}=r,c=e.readSync(s.dataId),d=e.readSync(o.dataId),h=i,p=a,m=u,y=l,{selectedIndices:g,selectedScores:x}=Ld(c,d,h,p,m,y);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class hO{constructor(t,e){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t,e],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`\n      ${ie("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `}}const fO={kernelName:ft,backendName:"webgpu",kernelFunc:function pO(n){const{inputs:t,backend:e,attrs:r}=n,{indices:s}=t,{dtype:o,depth:i,onValue:a,offValue:u}=r,l=j(s.shape),c=new hO(l,i),d=be({inputs:{x:s},backend:e,attrs:{shape:[l]}}),p=e.runWebGPUProgram(c,[d],o,[{type:"float32",data:[a]},{type:"float32",data:[u]}]);e.disposeData(d.dataId);const y=be({inputs:{x:p},backend:e,attrs:{shape:[...s.shape,i]}});return e.disposeData(p.dataId),y}};function vl(n){const{inputs:t,backend:e}=n,{x:r}=t;if("complex64"===r.dtype){const s=Ja({inputs:{input:r},backend:e}),o=vl({inputs:{x:s},backend:e}),i=xl({inputs:{input:r},backend:e}),a=vl({inputs:{x:i},backend:e}),u=Co({inputs:{real:o,imag:a},backend:e});return e.disposeData(s.dataId),e.disposeData(o.dataId),e.disposeData(i.dataId),e.disposeData(a.dataId),u}return gn({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:e})}const mO={kernelName:Nc,backendName:"webgpu",kernelFunc:vl},gO={kernelName:Le,backendName:"webgpu",kernelFunc:function Ey(n){const{inputs:t,backend:e}=n,{x:r}=t;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const s=Ja({inputs:{input:r},backend:e}),o=Ey({inputs:{x:s},backend:e}),i=xl({inputs:{input:r},backend:e}),a=vl({inputs:{x:i},backend:e}),u=Co({inputs:{real:o,imag:a},backend:e});return e.disposeData(s.dataId),e.disposeData(o.dataId),e.disposeData(i.dataId),e.disposeData(a.dataId),u}return gn({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:e})}},xO={kernelName:lt,backendName:"webgpu",kernelFunc:function yO(n){const{inputs:t,backend:e,attrs:r}=n,{axis:s}=r;if(1===t.length)return Lh({inputs:{input:t[0]},backend:e,attrs:{dim:s}});const o=t[0].shape,i=t[0].dtype;t.forEach(c=>{ut(o,c.shape,"All tensors passed to stack must have matching shapes"),N(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const a=[],l=my({inputs:t.map(c=>{const d=Lh({inputs:{input:c},backend:e,attrs:{dim:s}});return a.push(d),d}),backend:e,attrs:{axis:s}});return a.forEach(c=>e.disposeData(c.dataId)),l}};function Ry(n,t=!1){const e=n.length,r=Pt(e),s=n.map((d,h)=>`uniforms.pad${h}[0]`).join(","),o=n.map((d,h)=>`uniforms.pad${h}[0] + uniforms.xShape${e>1?`[${h}]`:""}`).join(",");return`\n        let start = ${e>1?`${r}(${s})`:`${s}`};\n        let end = ${e>1?`${r}(${o})`:`${o}`};\n        if (${e>1?"any(paddedCoords < start)":"paddedCoords < start"} || ${e>1?"any(paddedCoords >= end)":"paddedCoords >= end"}) {\n          setOutputAtIndex(index, ${t?0:"uniforms.constantValue"});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords"}));\n        }\n  `}class bO{constructor(t,e){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.map((r,s)=>r[0]+t[s]+r[1]),this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),e.map((r,s)=>{this.uniforms+=` pad${s} : vec2<i32>,`}),this.xShape=t,this.shaderKey="pad"}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${Ry(this.xShape)}\n        }\n      }\n    `}}const wO={kernelName:Ot,backendName:"webgpu",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{paddings:o,constantValue:i}=r;if(o.every(l=>ot(l,[0,0])))return $n({inputs:{x:s},backend:e});if(0===j(s.shape))return gn({backend:e,attrs:{shape:o.map((c,d)=>c[0]+s.shape[d]+c[1]),value:i,dtype:s.dtype}});const a=[{type:"float32",data:[i]}];o.map(l=>a.push({type:"int32",data:[l[0],l[1]]}));const u=new bO(s.shape,o);return e.runWebGPUProgram(u,[s],s.dtype,a)}},CO={kernelName:"Pow",backendName:"webgpu",kernelFunc:Vt({opType:De.POW})},IO={kernelName:Qe,backendName:"webgpu",kernelFunc:function SO(n){const{inputs:t,backend:e}=n,{x:r,alpha:s}=t,o=new ml(De.PRELU,r.shape,s.shape);return e.runWebGPUProgram(o,[r,s],"float32")}},NO={kernelName:Dt,backendName:"webgpu",kernelFunc:function kO(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,keepDims:i}=r;return Io(s,o,i,"prod",e)}},$O={kernelName:ba,backendName:"webgpu",kernelFunc:n=>{const{backend:t,attrs:e}=n,{start:r,stop:s,step:o,dtype:i}=e,a=wR(r,s,o,i);return t.makeTensorInfo([a.length],i,a)}},_O=Vt({opType:De.DIV}),TO={kernelName:Pr,backendName:"webgpu",kernelFunc:_O},EO=tt({opType:se.RECIPROCAL}),RO={kernelName:wa,backendName:"webgpu",kernelFunc:EO},AO=tt({opType:se.RELU}),DO={kernelName:is,backendName:"webgpu",kernelFunc:AO},PO=tt({opType:se.RELU6}),OO={kernelName:Zl,backendName:"webgpu",kernelFunc:PO};class FO{constructor(t,e,r){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t[0],e,r,t[3]],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const BO={kernelName:Ql,backendName:"webgpu",kernelFunc:function LO(n){const{inputs:t,backend:e,attrs:r}=n,{images:s}=t,{alignCorners:o,size:i,halfPixelCenters:a}=r,[u,l]=i,p=[{type:"float32",data:[o&&u>1?1:0,o&&l>1?1:0]},{type:"float32",data:[a?.5:0]}],m=new FO(s.shape,u,l);return e.runWebGPUProgram(m,[s],"float32",p)}};class MO{constructor(t,e){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,\n       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=e,this.shaderKey=`resizeBilinearBackprop_${e}`}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let dxR = f32(dyR) * uniforms.heightScale;\n              let topDxRIndex = i32(floor(dxR));\n              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));\n              let dxRLerp = dxR - f32(topDxRIndex);\n              let inverseDxRLerp = 1.0 - dxRLerp;\n\n              let dxC = f32(dyC) * uniforms.widthScale;\n              let leftDxCIndex = i32(floor(dxC));\n              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));\n              let dxCLerp = dxC - f32(leftDxCIndex);\n              let inverseDxCLerp = 1.0 - dxCLerp;\n\n              if (r == topDxRIndex && c == leftDxCIndex) {\n                // topLeft\n                accumulator +=\n                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n              }\n\n              if (r == topDxRIndex && c == rightDxCIndex) {\n                // topRight\n                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == leftDxCIndex) {\n                // bottomLeft\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == rightDxCIndex) {\n                // bottomRight\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `}}const VO={kernelName:Np,backendName:"webgpu",kernelFunc:function zO(n){const{inputs:t,backend:e,attrs:r}=n,{images:s,dy:o}=t,{alignCorners:i}=r,[,a,u]=s.shape,[,l,c]=o.shape,d=[i&&l>1?a-1:a,i&&c>1?u-1:u],h=[i&&l>1?l-1:l,i&&c>1?c-1:c],p=d[0]/h[0],m=d[1]/h[1],y=1/p,g=1/m,x=2*Math.ceil(y)+2,w=2*Math.ceil(g)+2,S=new MO(s.shape,i);return e.runWebGPUProgram(S,[o],o.dtype,[{type:"int32",data:d},{type:"int32",data:h},{type:"float32",data:[p]},{type:"float32",data:[m]},{type:"float32",data:[y]},{type:"float32",data:[g]},{type:"int32",data:[x]},{type:"int32",data:[w]}])}};class WO{constructor(t,e,r,s){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t[0],e,r,t[3]],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=s,this.shaderKey=`resizeNearest_${s}`}getUserCode(){let t;return t=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${t};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const GO={kernelName:Yl,backendName:"webgpu",kernelFunc:function UO(n){const{inputs:t,backend:e,attrs:r}=n,{images:s}=t,{alignCorners:o,halfPixelCenters:i,size:a}=r,[u,l]=a,p=[{type:"float32",data:[o&&u>1?1:0,o&&l>1?1:0]},{type:"float32",data:[o?.5:0]}],m=new WO(s.shape,u,l,i);return e.runWebGPUProgram(m,[s],s.dtype,p)}};class HO{constructor(t,e){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,\n       winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=e,this.shaderKey=`resizeNearestNeigborBackprop_${e}`}getUserCode(){return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *\n                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));\n\n              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *\n                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));\n\n              let sourceNearestRow =\n                  i32(min(f32(uniforms.outShape[1] - 1),\n                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));\n\n              let sourceNearestCol =\n                  i32(min(f32(uniforms.outShape[2] - 1),\n                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));\n\n              if (r == sourceNearestRow && c == sourceNearestCol) {\n                accumulator += getDy(b, dyR, dyC, d);\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `}}const KO={kernelName:kp,backendName:"webgpu",kernelFunc:function jO(n){const{inputs:t,backend:e,attrs:r}=n,{images:s,dy:o}=t,{alignCorners:i}=r,[,a,u]=s.shape,[,l,c]=o.shape,d=[i&&l>1?a-1:a,i&&c>1?u-1:u],h=[i&&l>1?l-1:l,i&&c>1?c-1:c],y=1/(d[0]/h[0]),g=1/(d[1]/h[1]),x=2*Math.ceil(y)+2,w=2*Math.ceil(g)+2,S=new HO(s.shape,i);return e.runWebGPUProgram(S,[o],o.dtype,[{type:"int32",data:d},{type:"int32",data:h},{type:"float32",data:[y]},{type:"float32",data:[g]},{type:"int32",data:[x]},{type:"int32",data:[w]}])}};class XO{constructor(t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`\n      \n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    \n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `}}const YO={kernelName:Jl,backendName:"webgpu",kernelFunc:function qO(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{dims:o}=r,i=s.shape.length;if(0===i)return $n({inputs:{x:s},backend:e});const a=s.shape,u=[1,1,1,1];a.forEach((g,x)=>{u[x+4-i]=g});const l=at(o,s.shape),c=[0,0,0,0];l.forEach(g=>{c[g+4-i]=1});const d=[{type:"int32",data:c}],h=be({inputs:{x:s},backend:e,attrs:{shape:u}}),p=new XO(u),m=e.runWebGPUProgram(p,[h],h.dtype,d);e.disposeData(h.dataId);const y=be({inputs:{x:m},backend:e,attrs:{shape:a}});return e.disposeData(m.dataId),y}};class QO{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,",this.shaderKey="rotate",this.outputShape=t,"number"==typeof e?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`\n        ${ie("index")} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `}}const ZO={kernelName:_c,backendName:"webgpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:r}=n,{radians:s,fillValue:o,center:i}=t,a=e,u=new QO(r.shape,o),[l,c]=Gd(i,r.shape[1],r.shape[2]),d=[{type:"float32",data:[l]},{type:"float32",data:[c]},{type:"float32",data:[Math.sin(s)]},{type:"float32",data:[Math.cos(s)]}];return d.push("number"==typeof o?{type:"float32",data:[Number.parseFloat(o.toFixed(2))]}:{type:"float32",data:o}),a.runWebGPUProgram(u,[r],r.dtype,d)}},JO=tt({opType:se.ROUND}),eF={kernelName:ec,backendName:"webgpu",kernelFunc:JO},tF=tt({opType:se.RSQRT,cpuKernelImpl:vR}),nF={kernelName:va,backendName:"webgpu",kernelFunc:tF};class tu{constructor(t,e,r,s,o,i,a,u=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=a,this.sumDupeIndices=u,this.dispatchLayout=he(t),this.dispatch=ae(this.dispatchLayout,t,this.workgroupSize),this.sliceDimGreaterThanOne=e>1,this.shaderKey=`scatter_${r}_${s}_${this.sliceDimGreaterThanOne}_${a}_${u}_${o.length}`;const l=Pt(o.length);this.uniforms=`sliceDim : i32, strides: ${l}, updatesSize: i32,`,this.updatesRank=s,this.indicesRank=r}getUserCode(){let t="";1===this.indicesRank?t="coords[0]":2===this.indicesRank&&(t="coords[0], j");const e=`getIndices(${t})`,r=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides";let s="",o="";1===this.dispatchLayout.x.length?(s="flattenedIndex",o="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      "):2===this.dispatchLayout.x.length&&(s="vec2<i32>(flattenedIndex, coords[1])",o="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      ");const a=`getUpdates(${Array.from({length:this.updatesRank},(l,c)=>`coords[${c}]`).join(", ")})`;return`\n    ${o}\n      ${ie("index")} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${e}));\n            flattenedIndex = flattenedIndex + indexInside * ${r};\n          }\n          let updateValue =\n              ${xo(this.type)}(${a});\n          let flatIndex = getOutputIndexFromCoords(${s});\n\n          ${this.sumDupeIndices?ws("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}\n        }\n      }`}}const sF={kernelName:tc,backendName:"webgpu",kernelFunc:function rF(n){const{inputs:t,backend:e,attrs:r}=n,{indices:s,updates:o}=t,{shape:i}=r,{sliceRank:a,numUpdates:u,sliceSize:l,strides:c,outputSize:d}=po(0,s,i),h=[d/l,l];if(0===d)return e.makeTensorInfo(i,s.dtype);const p=be({inputs:{x:s},backend:e,attrs:{shape:[u,a]}}),m=be({inputs:{x:o},backend:e,attrs:{shape:[u,l]}}),y=m.dtype,g=gn({backend:e,attrs:{shape:h,value:0,dtype:y}}),w=[{type:"int32",data:[a]},{type:"int32",data:c},{type:"int32",data:[j(m.shape)]}],S=new tu(m.shape,a,p.shape.length,m.shape.length,c,h,y),k=e.runWebGPUProgram(S,[m,p],y,w,g),_=be({inputs:{x:k},backend:e,attrs:{shape:i}});return e.disposeData(p.dataId),e.disposeData(m.dataId),e.disposeData(k.dataId),_}};class oF{constructor(t,e){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=e,this.shaderKey=`search_sorted_${e}`}getUserCode(){return`\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${"left"===this.side?"<":"<="} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `}}const aF={kernelName:rc,backendName:"webgpu",kernelFunc:function iF(n){const{inputs:t,backend:e,attrs:r}=n,{sortedSequence:s,values:o}=t,{side:i}=r,a=new oF([o.shape[0],o.shape[1]],i);return e.runWebGPUProgram(a,[s,o],"int32",[{type:"int32",data:[s.shape[1]]}])}};class uF{constructor(t,e,r){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=t,this.rank=r,this.shaderKey="select"}getUserCode(){let t,e;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(1===this.rank)e="resRC",t="resRC";else{const s=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],i=[];for(let a=0;a<this.outputShape.length;a++)i.push(`${s[a]}`),a<this.cRank&&o.push(`${s[a]}`);t=o.join(),e=i.join()}return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${t});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${e}));\n          } else {\n            setOutputAtIndex(index, getB(${e}));\n          }\n        }\n      }\n    `}}const cF={kernelName:sc,backendName:"webgpu",kernelFunc:function lF(n){const{inputs:t,backend:e}=n,{condition:r,t:s,e:o}=t,i=new uF(r.shape.length,s.shape,s.shape.length);return e.runWebGPUProgram(i,[r,s,o],pn(s.dtype,o.dtype))}},dF=tt({opType:se.SELU}),hF={kernelName:oc,backendName:"webgpu",kernelFunc:dF},pF=tt({opType:se.SIGMOID}),fF={kernelName:Ca,backendName:"webgpu",kernelFunc:pF},mF=tt({opType:se.SIGN}),gF={kernelName:uc,backendName:"webgpu",kernelFunc:mF},xF={kernelName:"Sin",backendName:"webgpu",kernelFunc:tt({opType:se.SIN})},bF=tt({opType:se.SINH}),wF={kernelName:ac,backendName:"webgpu",kernelFunc:bF},vF=tt({opType:se.SOFTPLUS}),CF={kernelName:lc,backendName:"webgpu",kernelFunc:vF};class SF{constructor(t,e,r,s,o,i){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;const a=new Array(s.length);for(let u=0;u<a.length;u++)a[u]=s[o[u]];this.outputShape=a,this.newDim=o,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=t,this.paddedXShape=e,this.uniforms+=`reshapedPaddedXShape : ${Pt(s.length)}, paddedXShapeStrides : ${Pt(i)}, `,r.map((u,l)=>{this.uniforms+=` pad${l} : vec2<i32>,`}),this.shaderKey=`spaceToBatchND_${o}`}getUserCode(){const t=Pt(this.outputShape.length),e=ay(this.newDim);return`\n      ${dl(this.paddedXShape,"PaddedX")}\n      ${ie("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${t}(${e}), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ${Ry(this.xShape,!0)}\n        }\n      }\n    `}}const IF={kernelName:dc,backendName:"webgpu",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{blockShape:o,paddings:i}=r;N(s.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");const a=o.reduce((w,S)=>w*S),u=[[0,0]];u.push(...i);for(let w=1+o.length;w<s.shape.length;++w)u.push([0,0]);const l=u.map((w,S)=>w[0]+s.shape[S]+w[1]),c=Ha(l,o,a,!1),d=ja(c.length,o.length,!1),h=Ka(l,o,a,!1),p=pt(l),m=new SF(s.shape,l,u,c,d,p.length),y=[{type:"int32",data:c},{type:"int32",data:p}];u.map(w=>y.push({type:"int32",data:[w[0],w[1]]}));const g=e.runWebGPUProgram(m,[s],s.dtype,y),x=be({inputs:{x:g},backend:e,attrs:{shape:h}});return e.disposeData(g.dataId),x}};class kF{constructor(t,e,r){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.type=r,this.dispatchLayout=he([e]),this.dispatch=ae(this.dispatchLayout,[e],this.workgroupSize),this.shaderKey="sparseSegmentSum"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.sparseSize) {\n        let indexInSegmentIds = index / uniforms.segmentSize;\n        let indexInSegment = index % uniforms.segmentSize;\n        let indexInInput = indices[indexInSegmentIds];\n        let segmentId = segmentIds[indexInSegmentIds];\n\n        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];\n        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;\n        ${ws("&result[outIndex]","value",this.type)}\n      }\n    }\n  `}}class NF{constructor(t,e){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[t],this.dispatchLayout=he(e),this.dispatch=ae(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.segmentIdsShape) {\n        let segmentId = segmentIds[index];\n        ${ws("&result[segmentId]","1","int32")}\n      }\n    }\n  `}}class $F{constructor(t,e){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.type=e,this.dispatchLayout=he(t),this.dispatch=ae(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentMean"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.size) {\n        let segmentId = index / uniforms.segmentSize;\n        let count = sameSegmentIdCount[segmentId];\n        if (count != 0) {\n          ${"float32"===this.type?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);"}\n        }\n      }\n    }\n  `}}function Ay(n,t,e,r=!1,s){const i=j(n.shape)/n.shape[0],a=n.dtype,u=j(t.shape),l=s.readSync(e.dataId),d=u>0?l[u-1]+1:0;let h;const p=n.shape.slice();p[0]=d;const m=u*i,y=gn({backend:s,attrs:{shape:p,value:0,dtype:a}});h=new kF(p,m,a);let g=[{type:"int32",data:[i]},{type:"int32",data:[m]}];const x=s.runWebGPUProgram(h,[n,t,e],a,g,y);if(r)return x;const w=gn({backend:s,attrs:{shape:[d],value:0,dtype:"int32"}});h=new NF(d,e.shape);const S=s.runWebGPUProgram(h,[e],"int32",null,w),k=gn({backend:s,attrs:{shape:p,value:0,dtype:a}});h=new $F(p,a),g=[{type:"int32",data:[i]}];const _=s.runWebGPUProgram(h,[x,S],a,g,k);return s.disposeData(x.dataId),s.disposeData(S.dataId),_}const TF={kernelName:fc,backendName:"webgpu",kernelFunc:function _F(n){const{inputs:t,backend:e}=n,{data:r,indices:s,segmentIds:o}=t;return Ay(r,s,o,!1,e)}},RF={kernelName:mc,backendName:"webgpu",kernelFunc:function EF(n){const{inputs:t,backend:e}=n,{data:r,indices:s,segmentIds:o}=t;return Ay(r,s,o,!0,e)}};class AF{constructor(t,e){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;const r=new Array(t.length);for(let s=0;s<r.length;s++)r[s]=t[s]*e[s];this.outputShape=r,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){const t=function DF(n,t=""){if(n>=5)throw Error(`Tile for rank ${n} is not yet supported`);if(1===n)return`(resRC % ${t}aShape)`;const e=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<n;s++)r.push(`(${e[s]} % ${t}aShape[${s}])`);return r.join()}(this.rank,"uniforms.");return`\n      ${ie("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${t}));\n        }\n      }\n    `}}function Mh(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{reps:o}=r;if(e.shouldExecuteOnCPU([s])||"string"===s.dtype||s.shape.length>=5){const u=e.readSync(s.dataId),l="string"===s.dtype?u.map(h=>Fr(h)):u,c=dt(s.shape,s.dtype,l),d=_R(c,o);return e.makeTensorInfo(d.shape,d.dtype,d.values)}const i=new AF(s.shape,o);return e.runWebGPUProgram(i,[s],s.dtype)}const PF={kernelName:_u,backendName:"webgpu",kernelFunc:Mh},FF={kernelName:gc,backendName:"webgpu",kernelFunc:function OF(n){const{inputs:t,backend:e,attrs:r}=n,{sparseIndices:s,sparseValues:o,defaultValue:i}=t,{outputShape:a}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:d,outputSize:h}=po(0,s,a),p=!1;if("string"===o.dtype){const L=e.bufferSync(s),M=e.bufferSync(o),W=Fr(e.readSync(i.dataId)[0]),q=CR(L,M,a,h,c,l,u,d,W,p);return e.makeTensorInfo(a,q.dtype,q.values)}const m=[h/c,c],y=be({inputs:{x:s},backend:e,attrs:{shape:[l,u]}}),g=o.shape.length?be({inputs:{x:o},backend:e,attrs:{shape:[l,c]}}):$n({inputs:{x:o},backend:e}),x=g.dtype,w=e.makeTensorInfo([],x,En(1,x)),S=be({inputs:{x:i},backend:e,attrs:{shape:Array(m.length).fill(1)}}),k=Mh({inputs:{x:S},backend:e,attrs:{reps:m}}),A=[{type:"int32",data:[u]},{type:"int32",data:d},{type:"int32",data:[j([l,c])]}];switch(l){case 0:break;case 1:{const L=new tu([l,c],u,y.shape.length,g.shape.length,d,m,x,p);e.runWebGPUProgram(L,[g,y],x,A,k)}break;default:{const L=new tu([l,c],u,y.shape.length,w.shape.length,d,m,x,p);e.runWebGPUProgram(L,[w,y],x,A,k)}{const L=new tu([l,c],u,y.shape.length,g.shape.length,d,m,x);e.runWebGPUProgram(L,[g,y],x,A,k)}}const P=be({inputs:{x:k},backend:e,attrs:{shape:a}});return e.disposeData(y.dataId),e.disposeData(g.dataId),e.disposeData(S.dataId),e.disposeData(w.dataId),e.disposeData(k.dataId),P}},BF={kernelName:hc,backendName:"webgpu",kernelFunc:function LF(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{numOrSizeSplits:o,axis:i}=r,a=at(i,s.shape)[0],u=uh(s,o,a),c=new Array(s.shape.length).fill(0),d=s.shape.slice();return u.map(h=>{const p=[...d];p[a]=h;const m=$i({inputs:{x:s},backend:e,attrs:{begin:c,size:p}});return c[a]+=h,m})}},MF=tt({opType:se.SQRT}),zF={kernelName:Sa,backendName:"webgpu",kernelFunc:MF},VF={kernelName:"Square",backendName:"webgpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,r=t,s=new Ni(e.shape,se.SQUARE);return r.runWebGPUProgram(s,[e],e.dtype)}},WF=Vt({opType:De.SQUARED_DIFFERENCE}),UF={kernelName:yc,backendName:"webgpu",kernelFunc:WF},HF={kernelName:$c,backendName:"webgpu",kernelFunc:function GF({inputs:n,attrs:t,backend:e}){const{x:r}=n,s=new Ni(r.shape,se.STEP,"stepAlpha : f32,");return e.runWebGPUProgram(s,[r],r.dtype,[{type:"float32",data:[t.alpha]}])}};class jF{constructor(t){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);const e=Pt(this.outputShape.length);this.uniforms=`begin : ${e},  strides : ${e}, `,this.shaderKey="stridedSlice"}getUserCode(){let e="";if(1===this.outputShape.length)e="coords * uniforms.strides + uniforms.begin";else{let s=0;e=this.outputShape.map((o,i)=>(s++,1===this.outputShape.length?`coords * uniforms.strides[${i}] + uniforms.begin[${i}]`:`coords[${s-1}] * uniforms.strides[${i}] + uniforms.begin[${i}]`)).join(",")}return`\n       ${ie("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${e}));\n         }\n       }\n     `}}const XF={kernelName:xc,backendName:"webgpu",kernelFunc:function KF(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{begin:o,end:i,strides:a,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:h}=r,{finalShapeSparse:p,finalShape:m,isIdentity:y,sliceDim0:g,isSimpleSlice:x,begin:w,end:S,strides:k}=pd(s.shape,o,i,a,u,l,c,d,h);let _;if(y)_=be({inputs:{x:s},backend:e,attrs:{shape:m}});else if(g||x){N(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);const A=cd(w,S,k),P=$i({inputs:{x:s},backend:e,attrs:{begin:w,size:A}});_=be({inputs:{x:P},backend:e,attrs:{shape:m}}),e.disposeData(P.dataId)}else if(e.shouldExecuteOnCPU([s])){const P=e.readSync(s.dataId),L=dt(s.shape,s.dtype,P),M=kR(p,L,k,w);_=e.makeTensorInfo(m,s.dtype,M.values)}else{const P=new jF(p),M=e.runWebGPUProgram(P,[s],s.dtype,[{type:"int32",data:w},{type:"int32",data:k}]);_=be({inputs:{x:M},backend:e,attrs:{shape:m}}),e.disposeData(M.dataId)}return _}},YF={kernelName:bc,backendName:"webgpu",kernelFunc:function qF(n){const{inputs:t,backend:e,attrs:r}=n,{separator:s,nGramWidths:o,leftPad:i,rightPad:a,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:d}=t,h=e.readSync(c.dataId),p=e.readSync(d.dataId),[m,y]=NR(h,p,s,o,i,a,u,l);return[e.makeTensorInfo([m.length],"string",m),e.makeTensorInfo(d.shape,"int32",y)]}},QF=Vt({opType:De.SUB,cpuKernelImpl:$R,supportsComplex:!0}),ZF={kernelName:Ia,backendName:"webgpu",kernelFunc:QF},eL={kernelName:"Tan",backendName:"webgpu",kernelFunc:tt({opType:se.TAN})},tL=tt({opType:se.TANH}),nL={kernelName:vc,backendName:"webgpu",kernelFunc:tL},sL={kernelName:nc,backendName:"webgpu",kernelFunc:function rL(n){const{inputs:t,backend:e}=n,{tensor:s,indices:o,updates:i}=t,{sliceRank:a,numUpdates:u,sliceSize:l,strides:c,outputSize:d}=po(0,o,s.shape),h=[d/l,l];if(0===d)return e.makeTensorInfo(s.shape,o.dtype);const p=[],m=be({inputs:{x:o},backend:e,attrs:{shape:[u,a]}});p.push(m);const y=be({inputs:{x:i},backend:e,attrs:{shape:[u,l]}});p.push(y);const g=be({inputs:{x:s},backend:e,attrs:{shape:h}});p.push(g);const x=Mh({inputs:{x:g},backend:e,attrs:{reps:Array(h.length).fill(1)}}),w=new tu([u,l],a,m.shape.length,y.shape.length,c,h,s.dtype,!1),S=j([u,l]),_=e.runWebGPUProgram(w,[y,m],g.dtype,[{type:"int32",data:[a]},{type:"int32",data:c},{type:"int32",data:[S]}],x);p.push(_);const A=be({inputs:{x:_},backend:e,attrs:{shape:s.shape}});return p.forEach(P=>e.disposeData(P.dataId)),A}};class oL{constructor(t){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,",this.shaderKey="swap"}getUserCode(){return`\n        ${ie("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}class iL{constructor(t){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`\n        ${ie("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}function Ti(n,t){null!==t&&n.disposeData(t.dataId)}function Dy(n){let t=1;for(;t<n;)t*=2;return t}const uL={kernelName:Cc,backendName:"webgpu",kernelFunc:function aL(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{k:o,sorted:i}=r,a=s.shape,u=a[a.length-1];if(e.shouldExecuteOnCPU([s])){const _=e.readSync(s.dataId),[A,P]=TR(_,a,s.dtype,o,i);return[e.makeTensorInfo(A.shape,A.dtype,A.values),e.makeTensorInfo(P.shape,P.dtype,P.values)]}if(0===o)return a[a.length-1]=0,[e.makeTensorInfo(a,s.dtype,[]),e.makeTensorInfo(a,"int32",[])];if(1===u)return[s,gn({attrs:{shape:a,dtype:"int32",value:0},backend:e})];const c=j(a)/u,d=be({inputs:{x:s},attrs:{shape:[c,u]},backend:e}),h=Dy(o),p=Dy(u);let m=null;const y=()=>null===m?[d,d]:[d,m],g=(_,A,P)=>{const L=y(),M=new oL(P),re=m;m=e.runWebGPUProgram(M,L,"int32",[{type:"int32",data:[u]},{type:"int32",data:[null===m?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[_]},{type:"int32",data:[A]}]),Ti(e,re)};for(let _=1;_<h;_*=2){const A=2*_;for(let P=_;P>=1;P/=2)g(A,P,[c,p])}for(let _=p;_>h;_/=2){const A=y(),P=new iL([c,_/2]),W=m;m=e.runWebGPUProgram(P,A,"int32",[{type:"int32",data:[u]},{type:"int32",data:[null===m?1:0]},{type:"int32",data:[h]}]),Ti(e,W);const q=h/2,re=2*q;for(let oe=q;oe>=1;oe/=2)g(re,oe,m.shape)}let x=m;m=$i({inputs:{x:m},backend:e,attrs:{begin:0,size:[c,o]}}),Ti(e,x);let w=$y({inputs:{x:d,indices:m},backend:e,attrs:{axis:1,batchDims:1}});Ti(e,d);const S=a.slice(0,-1);S.push(o),x=m,m=be({inputs:{x:m},attrs:{shape:S},backend:e}),Ti(e,x);const k=w;return w=be({inputs:{x:w},attrs:{shape:S},backend:e}),Ti(e,k),[w,m]}};class lL{constructor(t){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${ie("index")} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `}}const dL={kernelName:Sc,backendName:"webgpu",kernelFunc:function cL(n){const{inputs:t,backend:e,attrs:r}=n,{image:s,transforms:o}=t,{interpolation:i,fillMode:a,fillValue:u,outputShape:l}=r,[c,d,h,p]=s.shape,[m,y]=null!=l?l:[d,h],x=new lL([c,m,y,p]),w="nearest"===i?1:2;let S;switch(a){case"constant":default:S=1;break;case"reflect":S=2;break;case"wrap":S=3;break;case"nearest":S=4}return e.runWebGPUProgram(x,[s,o],"float32",[{type:"int32",data:[w]},{type:"int32",data:[S]},{type:"float32",data:[u]}])}},pL={kernelName:Ic,backendName:"webgpu",kernelFunc:function hL(n){const{inputs:t,backend:e,attrs:r}=n,{value:s}=t;let{axis:o}=r;o<0&&(o+=s.shape.length);const i=s,a=i.shape.length,u=s.shape[o],l=new Array(a-1);let c=0;for(let y=0;y<a;y++)y!==o&&(l[c++]=i.shape[y]);const d=[],h=new Array(a).fill(0),p=i.shape.slice();p[o]=1;const m=new Array(u);for(let y=0;y<m.length;y++){h[o]=y;const g=$i({inputs:{x:i},backend:e,attrs:{begin:h,size:p}}),x=be({inputs:{x:g},backend:e,attrs:{shape:l}});m[y]=x,d.push(g)}return d.forEach(y=>e.disposeData(y.dataId)),m}};class fL{constructor(t,e,r){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.dispatchLayout=he(t),this.dispatch=ae(this.dispatchLayout,t,this.workgroupSize),"float32"!==r&&"int32"!==r)throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${r} type.`);this.type=r,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`\n    ${ie("index")} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${ws("&result[flatIndex]","value",this.type)}\n        }\n      }\n    }\n  `}}const gL={kernelName:kc,backendName:"webgpu",kernelFunc:function mL(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,segmentIds:o}=t,{numSegments:i}=r,a=s.shape.length,u=[];let l=0;const c=jt([l],a);let d=s;null!=c&&(d=br({inputs:{x:s},backend:e,attrs:{perm:c}}),u.push(d),l=Kt(1,a)[0]);const h=ch(d.shape,l,i),p=j([d.shape[l]]),m=be({inputs:{x:d},backend:e,attrs:{shape:[-1,p]}});u.push(m);const y=s.dtype,g=[m.shape[0],i],x=gn({backend:e,attrs:{shape:g,value:0,dtype:y}}),w=new fL(m.shape,g,y),S=[{type:"int32",data:[i]},{type:"int32",data:[j(m.shape)]}],k=e.runWebGPUProgram(w,[m,o],y,S,x),_=be({inputs:{x:k},backend:e,attrs:{shape:h}});u.push(k);let A=_;if(null!=c){u.push(_);const P=Ba(c);A=br({inputs:{x:A},backend:e,attrs:{perm:P}})}return u.forEach(P=>e.disposeData(P.dataId)),A}},yL=[WT,AR,PR,FR,BR,VR,XR,YR,ZR,eA,nA,sA,iA,uA,cA,mA,yA,vA,SA,kA,TA,DA,FA,zA,WA,jA,GT,qA,JA,a3,p3,y3,w3,C3,I3,N3,_3,E3,A3,P3,F3,M3,j3,X3,W3,Q3,eD,sD,iD,lD,pD,mD,gD,xD,wD,CD,SD,kD,$D,MT,TD,OD,RD,DD,BD,zD,WD,HD,XD,YD,ZD,UT,eP,QA,nP,sP,iP,uP,cP,hP,mP,bP,yP,vP,SP,kP,TP,AP,hA,PP,FP,GP,BP,WP,jP,pA,XP,YP,ZP,eO,oO,cD,aO,lO,dO,LA,fO,gO,xO,wO,CO,IO,NO,$O,BA,TO,RO,DO,OO,zT,BO,VO,GO,KO,YO,ZO,eF,nF,sF,aF,cF,hF,fF,gF,xF,wF,_A,HF,XF,YF,rO,CF,IF,TF,RF,FF,BF,zF,VF,UF,ZF,dD,eL,nL,sL,PF,uL,dL,GR,pL,gL,mO];for(const n of yL)Ec(n);var Py=function(n,t){return(Py=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])})(n,t)};function Oy(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=n}Py(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}var wt=function(){return(wt=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var s in t=arguments[e])Object.prototype.hasOwnProperty.call(t,s)&&(n[s]=t[s]);return n}).apply(this,arguments)};function Ze(n,t,e,r){return new(e||(e=Promise))(function(s,o){function i(l){try{u(r.next(l))}catch(c){o(c)}}function a(l){try{u(r.throw(l))}catch(c){o(c)}}function u(l){var c;l.done?s(l.value):(c=l.value,c instanceof e?c:new e(function(d){d(c)})).then(i,a)}u((r=r.apply(n,t||[])).next())})}function Je(n,t){var e,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(u){return function(l){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;i;)try{if(e=1,r&&(s=2&c[0]?r.return:c[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,c[1])).done)return s;switch(r=0,s&&(c=[2&c[0],s.value]),c[0]){case 0:case 1:s=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!s||c[1]>s[0]&&c[1]<s[3])){i.label=c[1];break}if(6===c[0]&&i.label<s[1]){i.label=s[1],s=c;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(c);break}s[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(n,i)}catch(d){c=[6,d],r=0}finally{e=s=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([u,l])}}}function ko(n,t,e){if(e||2===arguments.length)for(var r,s=0,o=t.length;s<o;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return n.concat(r||Array.prototype.slice.call(t))}var wr=["nose","left_eye","right_eye","left_ear","right_ear","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle"],nu=["nose","left_eye_inner","left_eye","left_eye_outer","right_eye_inner","right_eye","right_eye_outer","left_ear","right_ear","mouth_left","mouth_right","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_pinky","right_pinky","left_index","right_index","left_thumb","right_thumb","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle","left_heel","right_heel","left_foot_index","right_foot_index"],xL={left:[1,2,3,7,9,11,13,15,17,19,21,23,25,27,29,31],right:[4,5,6,8,10,12,14,16,18,20,22,24,26,28,30,32],middle:[0]},bL={left:[1,3,5,7,9,11,13,15],right:[2,4,6,8,10,12,14,16],middle:[0]},wL=[[0,1],[0,2],[1,3],[2,4],[5,6],[5,7],[5,11],[6,8],[6,12],[7,9],[8,10],[11,12],[11,13],[12,14],[13,15],[14,16]],vL=[[0,1],[0,4],[1,2],[2,3],[3,7],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[11,23],[12,14],[14,16],[12,24],[13,15],[15,17],[16,18],[16,20],[15,17],[15,19],[15,21],[16,22],[17,19],[18,20],[23,25],[23,24],[24,26],[25,27],[26,28],[27,29],[28,30],[27,31],[28,32],[29,31],[30,32]];function Cl(n){return n instanceof SVGAnimatedLength?n.baseVal.value:n}function Fy(n){return Ze(this,void 0,void 0,function(){var t,e;return Je(this,function(r){switch(r.label){case 0:return t=document.createElement("canvas"),n instanceof _t?[4,ad(n,t)]:[3,2];case 1:return r.sent(),[3,3];case 2:t.width=Cl(n.width),t.height=Cl(n.height),e=t.getContext("2d"),n instanceof ImageData?e.putImageData(n,0,0):e.drawImage(n,0,0),r.label=3;case 3:return[2,t]}})})}function Ly(n){return Ze(this,void 0,void 0,function(){var t,e,r,s,o,i;return Je(this,function(a){switch(a.label){case 0:return n instanceof _t?(t=n.shape.slice(0,2),e=t[0],r=t[1],s=ImageData.bind,[4,ad(n)]):[3,2];case 1:return[2,new(s.apply(ImageData,[void 0,a.sent(),r,e]))];case 2:return o=document.createElement("canvas"),i=o.getContext("2d"),o.width=Cl(n.width),o.height=Cl(n.height),i.drawImage(n,0,0),[2,i.getImageData(0,0,o.width,o.height)]}})})}function CL(n){return Ze(this,void 0,void 0,function(){var e;return Je(this,function(r){switch(r.label){case 0:return n instanceof SVGImageElement||n instanceof OffscreenCanvas?[4,Fy(n)]:[3,2];case 1:return e=r.sent(),[3,3];case 2:e=n,r.label=3;case 3:return[2,Mf(e,4)]}})})}function By(n){if(n<0||n>=256)throw new Error("Mask value must be in range [0, 255] but got ".concat(n));if(!Number.isInteger(n))throw new Error("Mask value must be an integer but got ".concat(n))}var ru={runtime:"mediapipe",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,modelType:"full"},SL=function(){function n(t){this.mask=t}return n.prototype.toCanvasImageSource=function(){return Ze(this,void 0,void 0,function(){return Je(this,function(t){return[2,this.mask]})})},n.prototype.toImageData=function(){return Ze(this,void 0,void 0,function(){return Je(this,function(t){return[2,Ly(this.mask)]})})},n.prototype.toTensor=function(){return Ze(this,void 0,void 0,function(){return Je(this,function(t){return[2,CL(this.mask)]})})},n.prototype.getUnderlyingType=function(){return"canvasimagesource"},n}();function IL(n){return By(n),"person"}var kL=function(){function n(t){var e,r=this;switch(this.width=0,this.height=0,this.selfieMode=!1,this.poseSolution=new St.Pose({locateFile:function(s,o){if(t.solutionPath){var i=t.solutionPath.replace(/\/+$/,"");return"".concat(i,"/").concat(s)}return"".concat(o,"/").concat(s)}}),t.modelType){case"lite":e=0;break;case"heavy":e=2;break;default:e=1}this.poseSolution.setOptions({modelComplexity:e,smoothLandmarks:t.enableSmoothing,enableSegmentation:t.enableSegmentation,smoothSegmentation:t.smoothSegmentation,selfieMode:this.selfieMode}),this.poseSolution.onResults(function(s){if(r.height=s.image.height,r.width=s.image.width,null==s.poseLandmarks)r.poses=[];else{var o=r.translateOutput(s.poseLandmarks,s.poseWorldLandmarks);s.segmentationMask&&(o.segmentation={maskValueToLabel:IL,mask:new SL(s.segmentationMask)}),r.poses=[o]}})}return n.prototype.translateOutput=function(t,e){var r=this,s={keypoints:t.map(function(o,i){return{x:o.x*r.width,y:o.y*r.height,z:o.z,score:o.visibility,name:nu[i]}})};return null!=e&&(s.keypoints3D=e.map(function(o,i){return{x:o.x,y:o.y,z:o.z,score:o.visibility,name:nu[i]}})),s},n.prototype.estimatePoses=function(t,e,r){return Ze(this,void 0,void 0,function(){var s,o;return Je(this,function(i){switch(i.label){case 0:return e&&e.flipHorizontal&&e.flipHorizontal!==this.selfieMode&&(this.selfieMode=e.flipHorizontal,this.poseSolution.setOptions({selfieMode:this.selfieMode})),t instanceof _t?(o=ImageData.bind,[4,ad(t)]):[3,2];case 1:return s=new(o.apply(ImageData,[void 0,i.sent(),t.shape[1],t.shape[0]])),[3,3];case 2:s=t,i.label=3;case 3:return[4,this.poseSolution.send({image:t=s},r)];case 4:return i.sent(),[2,this.poses]}})})},n.prototype.dispose=function(){this.poseSolution.close()},n.prototype.reset=function(){this.poseSolution.reset()},n.prototype.initialize=function(){return this.poseSolution.initialize()},n}();function NL(n){return Ze(this,void 0,void 0,function(){var t,e;return Je(this,function(r){switch(r.label){case 0:return t=function(s){if(null==s)return wt({},ru);var o=wt({},s);return o.runtime="mediapipe",null==o.enableSegmentation&&(o.enableSegmentation=ru.enableSegmentation),null==o.enableSmoothing&&(o.enableSmoothing=ru.enableSmoothing),null==o.smoothSegmentation&&(o.smoothSegmentation=ru.smoothSegmentation),null==o.modelType&&(o.modelType=ru.modelType),o}(n),[4,(e=new kL(t)).initialize()];case 1:return r.sent(),[2,e]}})})}function Ei(n){return n instanceof _t?{height:n.shape[0],width:n.shape[1]}:{height:n.height,width:n.width}}function My(n){return n-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))}function zh(n){return n instanceof _t?n:Mf(n)}function zy(n,t,e){return Vh(e,"inputResolution"),[1/e.width*n[0][0]*t.width,1/e.height*n[0][1]*t.width,n[0][3]*t.width,1/e.width*n[1][0]*t.height,1/e.height*n[1][1]*t.height,n[1][3]*t.height,0,0]}function Vh(n,t){N(0!==n.width,function(){return"".concat(t," width cannot be 0.")}),N(0!==n.height,function(){return"".concat(t," height cannot be 0.")})}function Wh(n,t,e){var p,m,g,x,w,r=e.rotationVectorStartKeypointIndex,s=e.rotationVectorEndKeypointIndex,o=n.locationData,i=o.relativeKeypoints[r].x*t.width,a=o.relativeKeypoints[r].y*t.height,u=o.relativeKeypoints[s].x*t.width,l=o.relativeKeypoints[s].y*t.height,c=2*Math.sqrt((u-i)*(u-i)+(l-a)*(l-a)),d=(p=t,g=n.locationData,x=(m=e).rotationVectorStartKeypointIndex,w=m.rotationVectorEndKeypointIndex,My((m.rotationVectorTargetAngle?m.rotationVectorTargetAngle:Math.PI*m.rotationVectorTargetAngleDegree/180)-Math.atan2(-(g.relativeKeypoints[w].y*p.height-g.relativeKeypoints[x].y*p.height),g.relativeKeypoints[w].x*p.width-g.relativeKeypoints[x].x*p.width)));return{xCenter:i/t.width,yCenter:a/t.height,width:c/t.width,height:c/t.height,rotation:d}}function Vy(n){if(16!==n.length)throw new Error("Array length must be 16 but got ".concat(n.length));return[[n[0],n[1],n[2],n[3]],[n[4],n[5],n[6],n[7]],[n[8],n[9],n[10],n[11]],[n[12],n[13],n[14],n[15]]]}function Uh(n,t,e,r,s,o,i){return n[t][s]*(n[e][o]*n[r][i]-n[e][i]*n[r][o])}function rn(n,t,e){var r=(t+1)%4,s=(t+2)%4,o=(t+3)%4,i=(e+1)%4,a=(e+2)%4,u=(e+3)%4;return Uh(n,r,s,o,i,a,u)+Uh(n,s,o,r,i,a,u)+Uh(n,o,r,s,i,a,u)}function Wy(n,t,e){void 0===e&&(e={ignoreRotation:!1});for(var r=[],s=0,o=n;s<o.length;s++){var i=o[s],a=i.x-.5,u=i.y-.5,l=e.ignoreRotation?0:t.rotation,c=Math.cos(l)*a-Math.sin(l)*u,d=Math.sin(l)*a+Math.cos(l)*u;c=c*t.width+t.xCenter,d=d*t.height+t.yCenter;var h=i.z*t.width,p=wt({},i);p.x=c,p.y=d,p.z=h,r.push(p)}return r}function Uy(n,t){var o,l,e={scale:l=(t[1]-(o=t[0]))/255,offset:o-0*l};return Ae(function(){return Ce(ne(n,e.scale),e.offset)})}function Gh(n,t,e){var r,s,o,a,u,c,d,h,p,m,y,g,M,W,x=t.outputTensorSize,w=t.keepAspectRatio,S=t.borderMode,k=t.outputTensorFloatRange,_=Ei(n),A=(M=_,(W=e)?{xCenter:W.xCenter*M.width,yCenter:W.yCenter*M.height,width:W.width*M.width,height:W.height*M.height,rotation:W.rotation}:{xCenter:.5*M.width,yCenter:.5*M.height,width:M.width,height:M.height,rotation:0}),P=function(M,W,q){if(void 0===q&&(q=!1),!q)return{top:0,left:0,right:0,bottom:0};var re=W.height,oe=W.width;Vh(W,"targetSize"),Vh(M,"roi");var ge,Ie,ve=re/oe,qe=M.height/M.width,Ye=0,bt=0;return ve>qe?(ge=M.width,Ie=M.width*ve,bt=(1-qe/ve)/2):(ge=M.height/ve,Ie=M.height,Ye=(1-ve/qe)/2),M.width=ge,M.height=Ie,{top:bt,left:Ye,right:Ye,bottom:bt}}(A,x,w),L=(s=_.width,o=_.height,a=(r=A).width,u=r.height,c=Math.cos(r.rotation),d=Math.sin(r.rotation),h=r.xCenter,p=r.yCenter,m=1/s,y=1/o,(g=new Array(16))[0]=a*c*1*m,g[1]=-u*d*m,g[2]=0,g[3]=(-.5*a*c*1+.5*u*d+h)*m,g[4]=a*d*1*y,g[5]=u*c*y,g[6]=0,g[7]=(-.5*u*c-.5*a*d*1+p)*y,g[8]=0,g[9]=0,g[10]=a*m,g[11]=0,g[12]=0,g[13]=0,g[14]=0,g[15]=1,Vy(g));return{imageTensor:Ae(function(){var M=zh(n),W=Kn(zy(L,_,x),[1,8]),q="zero"===S?"constant":"nearest",re=bs.transform(On(mt(M,"float32")),W,"bilinear",q,0,[x.height,x.width]);return null!=k?Uy(re,k):re}),padding:P,transformationMatrix:L}}function Gy(n,t,e,r){return 1===r?.5*(n+t):n+(t-n)*e/(r-1)}function Hy(n){return null!=n&&null!=n.currentTime}function jy(n){for(var t={locationData:{relativeKeypoints:[]}},e=Number.MAX_SAFE_INTEGER,r=Number.MIN_SAFE_INTEGER,s=Number.MAX_SAFE_INTEGER,o=Number.MIN_SAFE_INTEGER,i=0;i<n.length;++i){var a=n[i];e=Math.min(e,a.x),r=Math.max(r,a.x),s=Math.min(s,a.y),o=Math.max(o,a.y),t.locationData.relativeKeypoints.push({x:a.x,y:a.y})}return t.locationData.relativeBoundingBox={xMin:e,yMin:s,xMax:r,yMax:o,width:r-e,height:o-s},t}function _L(n,t,e,r){return Ze(this,void 0,void 0,function(){var s,o,i,a,u;return Je(this,function(l){switch(l.label){case 0:return n.sort(function(c,d){return Math.max.apply(Math,d.score)-Math.max.apply(Math,c.score)}),s=Kn(n.map(function(c){return[c.locationData.relativeBoundingBox.yMin,c.locationData.relativeBoundingBox.xMin,c.locationData.relativeBoundingBox.yMax,c.locationData.relativeBoundingBox.xMax]})),o=Yt(n.map(function(c){return c.score[0]})),[4,bs.nonMaxSuppressionAsync(s,o,t,e)];case 1:return[4,(i=l.sent()).array()];case 2:return a=l.sent(),u=n.filter(function(c,d){return a.indexOf(d)>-1}),ct([s,o,i]),[2,u]}})})}function Ky(n,t){return n.map(function(e){var r=wt(wt({},e),{x:e.x*t.width,y:e.y*t.height});return null!=e.z&&(r.z=e.z*t.width),r})}function TL(n,t,e){return Ze(this,void 0,void 0,function(){var r,s,o,i,a,u,l,c,h,p,m,y,g,x,w,S,k,_,A,P,L,M,W;return Je(this,function(q){switch(q.label){case 0:if(r=yt(t,[0]),o=(s=r.shape)[0],i=s[1],n.length!==(a=s[2]))throw new Error("Expected heatmap to have same number of channels as the number of landmarks. But got landmarks length: "+"".concat(n.length,", heatmap length: ").concat(a));return u=[],[4,r.buffer()];case 1:for(l=q.sent(),c=0;c<n.length;c++)if(h=wt({},n[c]),u.push(h),p=Math.trunc(h.x*i),m=Math.trunc(h.y*o),!(p<0||p>=i||m<0||p>=o)){for(y=Math.trunc((e.kernelSize-1)/2),g=Math.max(0,p-y),x=Math.min(i,p+y+1),w=Math.max(0,m-y),S=Math.min(o,m+y+1),k=0,_=0,A=0,P=0,L=w;L<S;++L)for(M=g;M<x;++M)W=l.get(L,M,c),k+=W,P=Math.max(P,W),_+=M*W,A+=L*W;P>=e.minConfidenceToRefine&&k>0&&(h.x=_/i/k,h.y=A/o/k)}return r.dispose(),[2,u]}})})}function Xy(n,t){var e=t.left,r=t.top,s=t.left+t.right,o=t.top+t.bottom;return n.map(function(i){return wt(wt({},i),{x:(i.x-e)/(1-s),y:(i.y-r)/(1-o),z:i.z/(1-s)})})}function RL(n,t,e){return Ze(this,void 0,void 0,function(){var r,o,i,a;return Je(this,function(u){switch(u.label){case 0:return r=n[0],l=n[1],c=t,d=e,o=Ae(function(){var h,p,m,y;d.reverseOutputOrder?(p=yt(Ue(l,[0,d.boxCoordOffset+0],[-1,1])),h=yt(Ue(l,[0,d.boxCoordOffset+1],[-1,1])),y=yt(Ue(l,[0,d.boxCoordOffset+2],[-1,1])),m=yt(Ue(l,[0,d.boxCoordOffset+3],[-1,1]))):(h=yt(Ue(l,[0,d.boxCoordOffset+0],[-1,1])),p=yt(Ue(l,[0,d.boxCoordOffset+1],[-1,1])),m=yt(Ue(l,[0,d.boxCoordOffset+2],[-1,1])),y=yt(Ue(l,[0,d.boxCoordOffset+3],[-1,1]))),p=Ce(ne(je(p,d.xScale),c.w),c.x),h=Ce(ne(je(h,d.yScale),c.h),c.y),d.applyExponentialOnBoxSize?(m=ne(Wr(je(m,d.hScale)),c.h),y=ne(Wr(je(y,d.wScale)),c.w)):(m=ne(je(m,d.hScale),c.h),y=ne(je(y,d.wScale),c.h));var g=Pe(h,je(m,2)),x=Pe(p,je(y,2)),w=Ce(h,je(m,2)),S=Ce(p,je(y,2)),k=zt([K(g,[d.numBoxes,1]),K(x,[d.numBoxes,1]),K(w,[d.numBoxes,1]),K(S,[d.numBoxes,1])],1);if(d.numKeypoints)for(var _=0;_<d.numKeypoints;++_){var A=d.keypointCoordOffset+_*d.numValuesPerKeypoint,P=void 0,L=void 0;d.reverseOutputOrder?(P=yt(Ue(l,[0,A],[-1,1])),L=yt(Ue(l,[0,A+1],[-1,1]))):(L=yt(Ue(l,[0,A],[-1,1])),P=yt(Ue(l,[0,A+1],[-1,1])));var M=Ce(ne(je(P,d.xScale),c.w),c.x),W=Ce(ne(je(L,d.yScale),c.h),c.y);k=zt([k,K(M,[d.numBoxes,1]),K(W,[d.numBoxes,1])],1)}return k}),i=Ae(function(){var l=r;return e.sigmoidScore?(null!=e.scoreClippingThresh&&(l=Jf(r,-e.scoreClippingThresh,e.scoreClippingThresh)),l=Vr(l)):l}),[4,AL(o,i,e)];case 1:return a=u.sent(),ct([o,i]),[2,a]}var l,c,d})})}function AL(n,t,e){return Ze(this,void 0,void 0,function(){var r,s,o,i,a,u,l,c,d,h,p;return Je(this,function(y){switch(y.label){case 0:return r=[],[4,n.data()];case 1:return s=y.sent(),[4,t.data()];case 2:for(o=y.sent(),i=0;i<e.numBoxes;++i)if(!(null!=e.minScoreThresh&&o[i]<e.minScoreThresh||(a=i*e.numCoords,u=DL(s[a+0],s[a+1],s[a+2],s[a+3],o[i],e.flipVertically,i),(l=u.locationData.relativeBoundingBox).width<0||l.height<0))){if(e.numKeypoints>0)for((c=u.locationData).relativeKeypoints=[],d=e.numKeypoints*e.numValuesPerKeypoint,h=0;h<d;h+=e.numValuesPerKeypoint)c.relativeKeypoints.push({x:s[(p=a+e.keypointCoordOffset+h)+0],y:e.flipVertically?1-s[p+1]:s[p+1]});r.push(u)}return[2,r]}})})}function DL(n,t,e,r,s,o,i){return{score:[s],ind:i,locationData:{relativeBoundingBox:{xMin:t,yMin:o?1-e:n,xMax:r,yMax:o?1-n:e,width:r-t,height:e-n}}}}function PL(n,t){return"none"===n?t:1/(1+Math.exp(-t))}function qy(n,t,e,r){return Ze(this,void 0,void 0,function(){var o,i,a,u,l,c,d;return Je(this,function(h){switch(h.label){case 0:return e=e||t.flipHorizontally||!1,r=r||t.flipVertically||!1,o=n.size/t.numLandmarks,[4,n.data()];case 1:for(i=h.sent(),a=[],u=0;u<t.numLandmarks;++u)l=u*o,(d={x:0,y:0}).x=e?t.inputImageWidth-i[l]:i[l],o>1&&(d.y=r?t.inputImageHeight-i[l+1]:i[l+1]),o>2&&(d.z=i[l+2]),o>3&&(d.score=PL(t.visibilityActivation,i[l+3])),a.push(d);for(c=0;c<a.length;++c)(d=a[c]).x=d.x/t.inputImageWidth,d.y=d.y/t.inputImageHeight,d.z=d.z/t.inputImageWidth/(t.normalizeZ||1);return[2,a]}})})}function Yy(n,t,e){var c,d,r=n.width,s=n.height,o=n.rotation;if(null==e.rotation&&null==e.rotationDegree||(c=o,null!=(d=e).rotation?c+=d.rotation:null!=d.rotationDegree&&(c+=Math.PI*d.rotationDegree/180),o=My(c)),0===o)n.xCenter=n.xCenter+r*e.shiftX,n.yCenter=n.yCenter+s*e.shiftY;else{var i=(t.width*r*e.shiftX*Math.cos(o)-t.height*s*e.shiftY*Math.sin(o))/t.width,a=(t.width*r*e.shiftX*Math.sin(o)+t.height*s*e.shiftY*Math.cos(o))/t.height;n.xCenter=n.xCenter+i,n.yCenter=n.yCenter+a}if(e.squareLong){var u=Math.max(r*t.width,s*t.height);r=u/t.width,s=u/t.height}else if(e.squareShort){var l=Math.min(r*t.width,s*t.height);r=l/t.width,s=l/t.height}return n.width=r*e.scaleX,n.height=s*e.scaleY,n}var Cs=function(){function n(t){this.alpha=t,this.initialized=!1}return n.prototype.apply=function(t,e){var r;return this.initialized?r=null==e?this.storedValue+this.alpha*(t-this.storedValue):this.storedValue+this.alpha*e*Math.asinh((t-this.storedValue)/e):(r=t,this.initialized=!0),this.rawValue=t,this.storedValue=r,r},n.prototype.applyWithAlpha=function(t,e,r){return this.alpha=e,this.apply(t,r)},n.prototype.hasLastRawValue=function(){return this.initialized},n.prototype.lastRawValue=function(){return this.rawValue},n.prototype.reset=function(){this.initialized=!1},n}(),Hh=function(){function n(t){this.frequency=t.frequency,this.minCutOff=t.minCutOff,this.beta=t.beta,this.thresholdCutOff=t.thresholdCutOff,this.thresholdBeta=t.thresholdBeta,this.derivateCutOff=t.derivateCutOff,this.x=new Cs(this.getAlpha(this.minCutOff)),this.dx=new Cs(this.getAlpha(this.derivateCutOff)),this.lastTimestamp=0}return n.prototype.apply=function(t,e,r){if(null==t)return t;var s=Math.trunc(e);if(this.lastTimestamp>=s)return t;0!==this.lastTimestamp&&0!==s&&(this.frequency=1/(1e-6*(s-this.lastTimestamp))),this.lastTimestamp=s;var o=this.x.hasLastRawValue()?(t-this.x.lastRawValue())*r*this.frequency:0,i=this.dx.applyWithAlpha(o,this.getAlpha(this.derivateCutOff)),a=this.minCutOff+this.beta*Math.abs(i),u=null!=this.thresholdCutOff?this.thresholdCutOff+this.thresholdBeta*Math.abs(i):null;return this.x.applyWithAlpha(t,this.getAlpha(a),u)},n.prototype.getAlpha=function(t){return 1/(1+this.frequency/(2*Math.PI*t))},n}(),jh=function(){function n(t){this.config=t}return n.prototype.apply=function(t,e,r){var s=this;if(null==t)return this.reset(),null;this.initializeFiltersIfEmpty(t);var o=1;if(!this.config.disableValueScaling){if(r<this.config.minAllowedObjectScale)return ko([],t,!0);o=1/r}return t.map(function(i,a){var u=wt(wt({},i),{x:s.xFilters[a].apply(i.x,e,o),y:s.yFilters[a].apply(i.y,e,o)});return null!=i.z&&(u.z=s.zFilters[a].apply(i.z,e,o)),u})},n.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},n.prototype.initializeFiltersIfEmpty=function(t){var e=this;null!=this.xFilters&&this.xFilters.length===t.length||(this.xFilters=t.map(function(r){return new Hh(e.config)}),this.yFilters=t.map(function(r){return new Hh(e.config)}),this.zFilters=t.map(function(r){return new Hh(e.config)}))},n}(),Kh=function(){function n(t){this.config=t,this.window=[],this.lowPassFilter=new Cs(1),this.lastValue=0,this.lastValueScale=1,this.lastTimestamp=-1}return n.prototype.apply=function(t,e,r){if(null==t)return t;var s,o=Math.trunc(e);if(this.lastTimestamp>=o)return t;if(-1===this.lastTimestamp)s=1;else{for(var i=t*r-this.lastValue*this.lastValueScale,a=o-this.lastTimestamp,u=i,l=a,c=(1+this.window.length)*(1e6/30),d=0,h=this.window;d<h.length;d++){var p=h[d];if(l+p.duration>c)break;u+=p.distance,l+=p.duration}s=1-1/(1+this.config.velocityScale*Math.abs(u/(1e-6*l))),this.window.unshift({distance:i,duration:a}),this.window.length>this.config.windowSize&&this.window.pop()}return this.lastValue=t,this.lastValueScale=r,this.lastTimestamp=o,this.lowPassFilter.applyWithAlpha(t,s)},n}(),OL=function(){function n(t){this.config=t}return n.prototype.apply=function(t,e,r){var s=this;if(null==t)return this.reset(),null;var o=1;if(!this.config.disableValueScaling){if(r<this.config.minAllowedObjectScale)return ko([],t,!0);o=1/r}return this.initializeFiltersIfEmpty(t),t.map(function(i,a){var u=wt(wt({},i),{x:s.xFilters[a].apply(i.x,e,o),y:s.yFilters[a].apply(i.y,e,o)});return null!=i.z&&(u.z=s.zFilters[a].apply(i.z,e,o)),u})},n.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},n.prototype.initializeFiltersIfEmpty=function(t){var e=this;null!=this.xFilters&&this.xFilters.length===t.length||(this.xFilters=t.map(function(r){return new Kh(e.config)}),this.yFilters=t.map(function(r){return new Kh(e.config)}),this.zFilters=t.map(function(r){return new Kh(e.config)}))},n}(),Xh=function(){function n(t){if(null!=t.velocityFilter)this.keypointsFilter=new OL(t.velocityFilter);else{if(null==t.oneEuroFilter)throw new Error("Either configure velocityFilter or oneEuroFilter, but got "+"".concat(t,"."));this.keypointsFilter=new jh(t.oneEuroFilter)}}return n.prototype.apply=function(t,e,r,s,o){if(void 0===s&&(s=!1),null==t)return this.keypointsFilter.reset(),null;var l,c,i=null!=o?((l=o).width*(c=r).width+l.height*c.height)/2:1,a=s?Ky(t,r):t,u=this.keypointsFilter.apply(a,e,i);return s?function Qy(n,t){return n.map(function(e){var r=wt(wt({},e),{x:e.x/t.width,y:e.y/t.height});return null!=e.z&&(e.z=e.z/t.width),r})}(u,r):u},n}(),Zy=function(){function n(t){this.alpha=t.alpha}return n.prototype.apply=function(t){var e=this;if(null==t)return this.visibilityFilters=null,null;null!=this.visibilityFilters&&this.visibilityFilters.length===t.length||(this.visibilityFilters=t.map(function(a){return new Cs(e.alpha)}));for(var r=[],s=0;s<t.length;++s){var o=t[s],i=wt({},o);i.score=this.visibilityFilters[s].apply(o.score),r.push(i)}return r},n}(),FL={reduceBoxesInLowestlayer:!1,interpolatedScaleAspectRatio:1,featureMapHeight:[],featureMapWidth:[],numLayers:5,minScale:.1484375,maxScale:.75,inputSizeHeight:224,inputSizeWidth:224,anchorOffsetX:.5,anchorOffsetY:.5,strides:[8,16,32,32,32],aspectRatios:[1],fixedAnchorSize:!0},Ri={runtime:"tfjs",modelType:"full",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,detectorModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/detector/1",landmarkModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"},LL={maxPoses:1,flipHorizontal:!1},BL={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:2254,numCoords:12,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:4,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:224,yScale:224,hScale:224,wScale:224,minScoreThresh:.5},Jy={shiftX:0,shiftY:0,scaleX:1.25,scaleY:1.25,squareLong:!0},zL={outputTensorSize:{width:224,height:224},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"},VL={outputTensorSize:{width:256,height:256},keepAspectRatio:!0,outputTensorFloatRange:[0,1],borderMode:"zero"},WL={numLandmarks:39,inputImageWidth:256,inputImageHeight:256,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},UL={numLandmarks:39,inputImageWidth:1,inputImageHeight:1,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},GL={kernelSize:7,minConfidenceToRefine:.5},ex={alpha:.1},HL={oneEuroFilter:{frequency:30,minCutOff:.05,beta:80,derivateCutOff:1,minAllowedObjectScale:1e-6}},jL={oneEuroFilter:{frequency:30,minCutOff:.01,beta:10,derivateCutOff:1,minAllowedObjectScale:1e-6}},KL={oneEuroFilter:{frequency:30,minCutOff:.1,beta:40,derivateCutOff:1,minAllowedObjectScale:1e-6,disableValueScaling:!0}},XL={activation:"none"},qL={combineWithPreviousRatio:.7},YL=function(){function n(t){this.mask=t}return n.prototype.toCanvasImageSource=function(){return Ze(this,void 0,void 0,function(){return Je(this,function(t){return[2,Fy(this.mask)]})})},n.prototype.toImageData=function(){return Ze(this,void 0,void 0,function(){return Je(this,function(t){return[2,Ly(this.mask)]})})},n.prototype.toTensor=function(){return Ze(this,void 0,void 0,function(){return Je(this,function(t){return[2,this.mask]})})},n.prototype.getUnderlyingType=function(){return"tensor"},n}();function QL(n){return By(n),"person"}var ZL=function(){function n(t,e,r,s,o,i){this.detectorModel=t,this.landmarkModel=e,this.enableSmoothing=r,this.enableSegmentation=s,this.smoothSegmentation=o,this.modelType=i,this.regionOfInterest=null,this.prevFilteredSegmentationMask=null,this.anchors=function(d){null==d.reduceBoxesInLowestLayer&&(d.reduceBoxesInLowestLayer=!1),null==d.interpolatedScaleAspectRatio&&(d.interpolatedScaleAspectRatio=1),null==d.fixedAnchorSize&&(d.fixedAnchorSize=!1);for(var h=[],p=0;p<d.numLayers;){for(var m=[],y=[],g=[],x=[],w=p;w<d.strides.length&&d.strides[w]===d.strides[p];){var S=Gy(d.minScale,d.maxScale,w,d.strides.length);if(0===w&&d.reduceBoxesInLowestLayer)g.push(1),g.push(2),g.push(.5),x.push(.1),x.push(S),x.push(S);else{for(var k=0;k<d.aspectRatios.length;++k)g.push(d.aspectRatios[k]),x.push(S);if(d.interpolatedScaleAspectRatio>0){var _=w===d.strides.length-1?1:Gy(d.minScale,d.maxScale,w+1,d.strides.length);x.push(Math.sqrt(S*_)),g.push(d.interpolatedScaleAspectRatio)}}w++}for(var A=0;A<g.length;++A){var P=Math.sqrt(g[A]);m.push(x[A]/P),y.push(x[A]*P)}var L=0,M=0;if(d.featureMapHeight.length>0)L=d.featureMapHeight[p],M=d.featureMapWidth[p];else{var W=d.strides[p];L=Math.ceil(d.inputSizeHeight/W),M=Math.ceil(d.inputSizeWidth/W)}for(var q=0;q<L;++q)for(var re=0;re<M;++re)for(var oe=0;oe<m.length;++oe){var ge={xCenter:(re+d.anchorOffsetX)/M,yCenter:(q+d.anchorOffsetY)/L,width:0,height:0};d.fixedAnchorSize?(ge.width=1,ge.height=1):(ge.width=y[oe],ge.height=m[oe]),h.push(ge)}p=w}return h}(FL);var a=Yt(this.anchors.map(function(d){return d.width})),u=Yt(this.anchors.map(function(d){return d.height})),l=Yt(this.anchors.map(function(d){return d.xCenter})),c=Yt(this.anchors.map(function(d){return d.yCenter}));this.anchorTensor={x:l,y:c,w:a,h:u},this.prevFilteredSegmentationMask=this.enableSegmentation?Kn([],[0,0]):null}return n.prototype.estimatePoses=function(t,e,r){return Ze(this,void 0,void 0,function(){var s,o,i,a,u,c,p,y,g,x,S,k,_,A,P,L,M,W;return Je(this,function(q){switch(q.label){case 0:return s=function(re){var oe;if(null==(oe=null==re?LL:wt({},re)).maxPoses&&(oe.maxPoses=1),oe.maxPoses<=0)throw new Error("Invalid maxPoses ".concat(oe.maxPoses,". Should be > 0."));if(oe.maxPoses>1)throw new Error("Multi-pose detection is not implemented yet. Please set maxPoses to 1.");return oe}(e),null==t?(this.reset(),[2,[]]):(this.maxPoses=s.maxPoses,this.timestamp=null!=r?1e3*r:Hy(t)?1e6*t.currentTime:null,o=Ei(t),i=Ae(function(){return mt(zh(t),"float32")}),null!=(a=this.regionOfInterest)?[3,2]:[4,this.detectPose(i)]);case 1:if(0===(u=q.sent()).length)return this.reset(),i.dispose(),[2,[]];a=this.poseDetectionToRoi(u[0],o),q.label=2;case 2:return[4,this.poseLandmarksByRoi(a,i)];case 3:return c=q.sent(),i.dispose(),null==c?(this.reset(),[2,[]]):(p=c.poseScore,y=c.segmentationMask,g=this.poseLandmarkFiltering(c.landmarks,c.auxiliaryLandmarks,c.worldLandmarks,o),x=g.actualLandmarksFiltered,S=g.actualWorldLandmarksFiltered,k=this.poseLandmarksToRoi(g.auxiliaryLandmarksFiltered,o),this.regionOfInterest=k,_=this.smoothSegmentation&&null!=y?this.poseSegmentationFiltering(y):y,null!=(A=null!=x?Ky(x,o):null)&&A.forEach(function(re,oe){re.name=nu[oe]}),null!=(P=S)&&P.forEach(function(re,oe){re.name=nu[oe]}),L={score:p,keypoints:A,keypoints3D:P},null!==_&&(M=Ae(function(){var re=On(_,2),oe=xs(re,[[0,0],[0,0],[0,1]]);return gm(oe,[[0,0],[0,0],[0,2]],"symmetric")}),this.smoothSegmentation||ct(_),W={maskValueToLabel:QL,mask:new YL(M)},L.segmentation=W),[2,[L]])}})})},n.prototype.poseSegmentationFiltering=function(t){var e=this.prevFilteredSegmentationMask;return 0===e.size?this.prevFilteredSegmentationMask=t:(this.prevFilteredSegmentationMask=function EL(n,t,e){return"webgl"===Ta()?(r=n,s=t,i=e.combineWithPreviousRatio.toFixed(2),a={variableNames:["prevMask","newMask"],outputShape:r.shape,userCode:"\n  void main() {\n      ivec2 coords = getOutputCoords();\n      int height = coords[0];\n      int width = coords[1];\n\n      float prevMaskValue = getPrevMask(height, width);\n      float newMaskValue = getNewMask(height, width);\n\n      /*\n      * Assume p := newMaskValue\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\n      * uncertainty alpha(p) =\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\n      * uncertainty]\n      *\n      * The following polynomial approximates uncertainty alpha as a\n      * function of (p + 0.5):\n      */\n      const float c1 = 5.68842;\n      const float c2 = -0.748699;\n      const float c3 = -57.8051;\n      const float c4 = 291.309;\n      const float c5 = -624.717;\n      float t = newMaskValue - 0.5;\n      float x = t * t;\n\n      float uncertainty =\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\n\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\n                             (uncertainty * ".concat(i,");\n\n      setOutput(outputValue);\n    }\n")},u=gi(),Ae(function(){var l=u.compileAndRun(a,[r,s]);return Sn().makeTensorFromDataId(l.dataId,l.shape,l.dtype)})):Ae(function(){var r=Pe(t,.5),s=Gn(r),o=Pe(1,Va(1,ne(s,Ce(5.68842,ne(s,Ce(-.748699,ne(s,Ce(-57.8051,ne(s,Ce(291.309,ne(s,-624.717)))))))))));return Ce(t,ne(Pe(n,t),ne(o,e.combineWithPreviousRatio)))});var r,s,i,a,u}(e,t,qL),ct(t)),ct(e),this.prevFilteredSegmentationMask},n.prototype.dispose=function(){this.detectorModel.dispose(),this.landmarkModel.dispose(),ct([this.anchorTensor.x,this.anchorTensor.y,this.anchorTensor.w,this.anchorTensor.h,this.prevFilteredSegmentationMask])},n.prototype.reset=function(){this.regionOfInterest=null,this.enableSegmentation&&(ct(this.prevFilteredSegmentationMask),this.prevFilteredSegmentationMask=Kn([],[0,0])),this.visibilitySmoothingFilterActual=null,this.visibilitySmoothingFilterAuxiliary=null,this.landmarksSmoothingFilterActual=null,this.landmarksSmoothingFilterAuxiliary=null},n.prototype.detectPose=function(t){return Ze(this,void 0,void 0,function(){var e,r,s,o,i,a,u,l,c,d;return Je(this,function(h){switch(h.label){case 0:return e=Gh(t,zL),s=e.padding,o=this.detectorModel.predict(r=e.imageTensor),i=function $L(n){return Ae(function(){var s,t=(s=n,Ae(function(){return[Ue(s,[0,0,0],[1,-1,1]),Ue(s,[0,0,1],[1,-1,-1])]})),e=t[0];return{boxes:yt(t[1]),logits:yt(e)}})}(o),[4,RL([u=i.logits,a=i.boxes],this.anchorTensor,BL)];case 1:return 0===(l=h.sent()).length?(ct([r,o,u,a]),[2,l]):[4,_L(l,this.maxPoses,.3)];case 2:return c=h.sent(),d=function(p,m){void 0===p&&(p=[]);for(var y=m.left,g=m.top,x=m.left+m.right,w=m.top+m.bottom,S=0;S<p.length;S++){var k=p[S],_=k.locationData.relativeBoundingBox,A=(_.xMin-y)/(1-x),P=(_.yMin-g)/(1-w),L=_.width/(1-x),M=_.height/(1-w);_.xMin=A,_.yMin=P,_.width=L,_.height=M,_.xMax=A+L,_.yMax=P+M;var W=k.locationData.relativeKeypoints;W&&W.forEach(function(q){var oe=(q.y-g)/(1-w);q.x=(q.x-y)/(1-x),q.y=oe})}return p}(c,s),ct([r,o,u,a]),[2,d]}})})},n.prototype.poseDetectionToRoi=function(t,e){return Yy(Wh(t,e,{rotationVectorEndKeypointIndex:1,rotationVectorStartKeypointIndex:0,rotationVectorTargetAngleDegree:90}),e,Jy)},n.prototype.poseLandmarksByRoi=function(t,e){return Ze(this,void 0,void 0,function(){var r,s,o,i,a,u,l,c,p,g;return Je(this,function(x){switch(x.label){case 0:if(r=Ei(e),s=Gh(e,VL,t),o=s.imageTensor,i=s.padding,a=s.transformationMatrix,"lite"!==this.modelType&&"full"!==this.modelType&&"heavy"!==this.modelType)throw new Error("Model type must be one of lite, full or heavy,"+"but got ".concat(this.modelType));return u=["ld_3d","output_poseflag","activation_heatmap","world_3d"],this.enableSegmentation&&u.push("activation_segmentation"),l=this.landmarkModel.execute(o,u),[4,this.tensorsToPoseLandmarksAndSegmentation(l)];case 1:return null==(c=x.sent())?(ct(l),ct(o),[2,null]):(p=c.poseScore,[4,this.poseLandmarksAndSegmentationInverseProjection(r,t,i,a,c.landmarks,c.auxiliaryLandmarks,c.worldLandmarks,c.segmentationMask)]);case 2:return g=x.sent(),ct(l),ct(o),[2,wt({poseScore:p},g)]}})})},n.prototype.poseLandmarksAndSegmentationInverseProjection=function(t,e,r,s,o,i,a,u){return Ze(this,void 0,void 0,function(){var l,c,d,h,p,m;return Je(this,function(y){return l=Xy(o,r),c=Xy(i,r),d=Wy(l,e),h=Wy(c,e),p=function(g,x){for(var w=[],S=0,k=g;S<k.length;S++){var _=k[S],A=_.x,P=_.y,L=x.rotation,M=Math.cos(L)*A-Math.sin(L)*P,W=Math.sin(L)*A+Math.cos(L)*P,q=wt({},_);q.x=M,q.y=W,w.push(q)}return w}(a,e),m=null,this.enableSegmentation&&(m=Ae(function(){var g=u.shape,x=g[0],w=g[1],k=Kn(zy(function(A){var P=Vy(new Array(16).fill(0));P[0][0]=rn(A,0,0),P[1][0]=-rn(A,0,1),P[2][0]=rn(A,0,2),P[3][0]=-rn(A,0,3),P[0][2]=rn(A,2,0),P[1][2]=-rn(A,2,1),P[2][2]=rn(A,2,2),P[3][2]=-rn(A,2,3),P[0][1]=-rn(A,1,0),P[1][1]=rn(A,1,1),P[2][1]=-rn(A,1,2),P[3][1]=rn(A,1,3),P[0][3]=-rn(A,3,0),P[1][3]=rn(A,3,1),P[2][3]=-rn(A,3,2),P[3][3]=rn(A,3,3);for(var L=A[0][0]*P[0][0]+A[1][0]*P[0][1]+A[2][0]*P[0][2]+A[3][0]*P[0][3],M=0;M<P.length;M++)for(var W=0;W<P.length;W++)P[M][W]/=L;return P}(s),{width:w,height:x},t),[1,8]);return yt(bs.transform(K(u,[1,x,w,1]),k,"bilinear","constant",0,[t.height,t.width]),[0,3])}),ct(u)),[2,{landmarks:d,auxiliaryLandmarks:h,worldLandmarks:p,segmentationMask:m}]})})},n.prototype.tensorsToPoseLandmarksAndSegmentation=function(t){return Ze(this,void 0,void 0,function(){var e,s,o,i,a,u,l,c,d,h,p,m;return Je(this,function(y){switch(y.label){case 0:return e=t[0],s=t[2],o=t[3],i=this.enableSegmentation?t[4]:null,[4,t[1].data()];case 1:return(a=y.sent()[0])<.5?[2,null]:[4,qy(e,WL)];case 2:return[4,TL(y.sent(),s,GL)];case 3:return u=y.sent(),l=u.slice(0,33),c=u.slice(33,35),[4,qy(o,UL)];case 4:return d=y.sent(),h=d.slice(0,33),p=function(g,x,w){void 0===w&&(w=!0);for(var S=[],k=0;k<g.length;k++){var _=wt({},x[k]);w&&(_.score=g[k].score),S.push(_)}return S}(l,h,!0),m=this.enableSegmentation?(g=i,x=XL,Ae(function(){var S=yt(g,[0]),k=S.shape[2];if(1===k){var _=S;switch(x.activation){case"none":break;case"sigmoid":_=Vr(_);break;case"softmax":throw new Error("Softmax activation requires two channels.");default:throw new Error("Activation not supported (".concat(x.activation,")"))}return yt(_,[2])}throw new Error("Unsupported number of tensor channels ".concat(k))})):null,[2,{landmarks:l,auxiliaryLandmarks:c,poseScore:a,worldLandmarks:p,segmentationMask:m}]}var g,x})})},n.prototype.poseLandmarksToRoi=function(t,e){return Yy(Wh(jy(t),e,{rotationVectorStartKeypointIndex:0,rotationVectorEndKeypointIndex:1,rotationVectorTargetAngleDegree:90}),e,Jy)},n.prototype.poseLandmarkFiltering=function(t,e,r,s){var o,i,a;if(null!=this.timestamp&&this.enableSmoothing){var u=Wh(jy(e),s,{rotationVectorEndKeypointIndex:0,rotationVectorStartKeypointIndex:1,rotationVectorTargetAngleDegree:90});null==this.visibilitySmoothingFilterActual&&(this.visibilitySmoothingFilterActual=new Zy(ex)),o=this.visibilitySmoothingFilterActual.apply(t),null==this.visibilitySmoothingFilterAuxiliary&&(this.visibilitySmoothingFilterAuxiliary=new Zy(ex)),i=this.visibilitySmoothingFilterAuxiliary.apply(e),a=this.visibilitySmoothingFilterActual.apply(r),null==this.landmarksSmoothingFilterActual&&(this.landmarksSmoothingFilterActual=new Xh(HL)),o=this.landmarksSmoothingFilterActual.apply(o,this.timestamp,s,!0,u),null==this.landmarksSmoothingFilterAuxiliary&&(this.landmarksSmoothingFilterAuxiliary=new Xh(jL)),i=this.landmarksSmoothingFilterAuxiliary.apply(i,this.timestamp,s,!0,u),null==this.worldLandmarksSmoothingFilterActual&&(this.worldLandmarksSmoothingFilterActual=new Xh(KL)),a=this.worldLandmarksSmoothingFilterActual.apply(r,this.timestamp)}else o=t,i=e,a=r;return{actualLandmarksFiltered:o,auxiliaryLandmarksFiltered:i,actualWorldLandmarksFiltered:a}},n}();function JL(n){return Ze(this,void 0,void 0,function(){var t,e,r,s;return Je(this,function(a){switch(a.label){case 0:return t=function(u){var l=wt({},null==u?Ri:u);if(null==l.enableSmoothing&&(l.enableSmoothing=Ri.enableSmoothing),null==l.enableSegmentation&&(l.enableSegmentation=Ri.enableSegmentation),null==l.smoothSegmentation&&(l.smoothSegmentation=Ri.smoothSegmentation),null==l.modelType&&(l.modelType=Ri.modelType),null==l.detectorModelUrl&&(l.detectorModelUrl=Ri.detectorModelUrl),null==l.landmarkModelUrl)switch(l.modelType){case"lite":l.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/lite/2";break;case"heavy":l.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/heavy/2";break;default:l.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"}return l}(n),e="string"==typeof t.detectorModelUrl&&t.detectorModelUrl.indexOf("https://tfhub.dev")>-1,r="string"==typeof t.landmarkModelUrl&&t.landmarkModelUrl.indexOf("https://tfhub.dev")>-1,[4,Promise.all([ki(t.detectorModelUrl,{fromTFHub:e}),ki(t.landmarkModelUrl,{fromTFHub:r})])];case 1:return s=a.sent(),[2,new ZL(s[0],s[1],t.enableSmoothing,t.enableSegmentation,t.smoothSegmentation,t.modelType)]}})})}var Ss,sn,n,tx=function(){function n(t){(function(e){if(e.maxTracks<1)throw new Error("Must specify 'maxTracks' to be at least 1, but "+"encountered ".concat(e.maxTracks));if(e.maxAge<=0)throw new Error("Must specify 'maxAge' to be positive, but "+"encountered ".concat(e.maxAge));if(void 0!==e.keypointTrackerParams){if(e.keypointTrackerParams.keypointConfidenceThreshold<0||e.keypointTrackerParams.keypointConfidenceThreshold>1)throw new Error("Must specify 'keypointConfidenceThreshold' to be in the range [0, 1], but encountered "+"".concat(e.keypointTrackerParams.keypointConfidenceThreshold));if(e.keypointTrackerParams.minNumberOfKeypoints<1)throw new Error("Must specify 'minNumberOfKeypoints' to be at least 1, but "+"encountered ".concat(e.keypointTrackerParams.minNumberOfKeypoints));for(var r=0,s=e.keypointTrackerParams.keypointFalloff;r<s.length;r++){var o=s[r];if(o<=0)throw new Error("Must specify each keypoint falloff parameterto be positive "+"but encountered ".concat(o))}}})(t),this.tracks=[],this.maxTracks=t.maxTracks,this.maxAge=1e3*t.maxAge,this.minSimilarity=t.minSimilarity,this.nextID=1}return n.prototype.apply=function(t,e){this.filterOldTracks(e);var r=this.computeSimilarity(t);return this.assignTracks(t,r,e),this.updateTracks(e),t},n.prototype.getTracks=function(){return this.tracks.slice()},n.prototype.getTrackIDs=function(){return new Set(this.tracks.map(function(t){return t.id}))},n.prototype.filterOldTracks=function(t){var e=this;this.tracks=this.tracks.filter(function(r){return t-r.lastTimestamp<=e.maxAge})},n.prototype.assignTracks=function(t,e,r){for(var s=Array.from(Array(e[0].length).keys()),o=[],i=0,a=Array.from(Array(t.length).keys());i<a.length;i++){var u=a[i];if(0!==s.length){for(var l=-1,c=-1,d=0,h=s;d<h.length;d++){var p=h[d],m=e[u][p];m>=this.minSimilarity&&m>c&&(l=p,c=m)}if(l>=0){var y=this.tracks[l];y=Object.assign(y,this.createTrack(t[u],r,y.id)),t[u].id=y.id;var g=s.indexOf(l);s.splice(g,1)}else o.push(u)}else o.push(u)}for(var x=0,w=o;x<w.length;x++){var S=this.createTrack(t[u=w[x]],r);this.tracks.push(S),t[u].id=S.id}},n.prototype.updateTracks=function(t){this.tracks.sort(function(e,r){return r.lastTimestamp-e.lastTimestamp}),this.tracks=this.tracks.slice(0,this.maxTracks)},n.prototype.createTrack=function(t,e,r){var s={id:r||this.nextTrackID(),lastTimestamp:e,keypoints:ko([],t.keypoints,!0).map(function(o){return wt({},o)})};return void 0!==t.box&&(s.box=wt({},t.box)),s},n.prototype.nextTrackID=function(){var t=this.nextID;return this.nextID+=1,t},n.prototype.remove=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.tracks=this.tracks.filter(function(r){return!t.includes(r.id)})},n.prototype.reset=function(){this.tracks=[]},n}(),eB=function(n){function t(e){return n.call(this,e)||this}return Oy(t,n),t.prototype.computeSimilarity=function(e){var r=this;return 0===e.length||0===this.tracks.length?[[]]:e.map(function(s){return r.tracks.map(function(o){return r.iou(s,o)})})},t.prototype.iou=function(e,r){var s=Math.max(e.box.xMin,r.box.xMin),o=Math.max(e.box.yMin,r.box.yMin),i=Math.min(e.box.xMax,r.box.xMax),a=Math.min(e.box.yMax,r.box.yMax);if(s>=i||o>=a)return 0;var u=(i-s)*(a-o);return u/(e.box.width*e.box.height+r.box.width*r.box.height-u)},t}(tx),tB=function(n){function t(e){var r=n.call(this,e)||this;return r.keypointThreshold=e.keypointTrackerParams.keypointConfidenceThreshold,r.keypointFalloff=e.keypointTrackerParams.keypointFalloff,r.minNumKeyoints=e.keypointTrackerParams.minNumberOfKeypoints,r}return Oy(t,n),t.prototype.computeSimilarity=function(e){if(0===e.length||0===this.tracks.length)return[[]];for(var r=[],s=0,o=e;s<o.length;s++){for(var i=o[s],a=[],u=0,l=this.tracks;u<l.length;u++)a.push(this.oks(i,l[u]));r.push(a)}return r},t.prototype.oks=function(e,r){for(var s=this.area(r.keypoints)+1e-6,o=0,i=0,a=0;a<e.keypoints.length;++a){var u=e.keypoints[a],l=r.keypoints[a];if(!(u.score<this.keypointThreshold||l.score<this.keypointThreshold)){i+=1;var c=Math.pow(u.x-l.x,2)+Math.pow(u.y-l.y,2);o+=Math.exp(-1*c/(2*s*Math.pow(2*this.keypointFalloff[a],2)))}}return i<this.minNumKeyoints?0:o/i},t.prototype.area=function(e){var r=this,s=e.filter(function(u){return u.score>r.keypointThreshold}),o=Math.min.apply(Math,ko([1],s.map(function(u){return u.x}),!1)),i=Math.max.apply(Math,ko([0],s.map(function(u){return u.x}),!1)),a=Math.min.apply(Math,ko([1],s.map(function(u){return u.y}),!1));return(i-o)*(Math.max.apply(Math,ko([0],s.map(function(u){return u.y}),!1))-a)},t}(tx);function nx(n){switch(n){case sn.BlazePose:return nu.reduce(function(t,e,r){return t[e]=r,t},{});case sn.PoseNet:case sn.MoveNet:return wr.reduce(function(t,e,r){return t[e]=r,t},{});default:throw new Error("Model ".concat(n," is not supported."))}}(n=Ss||(Ss={})).Keypoint="keypoint",n.BoundingBox="boundingBox",function(n){n.MoveNet="MoveNet",n.BlazePose="BlazePose",n.PoseNet="PoseNet"}(sn||(sn={})),Object.freeze({__proto__:null,getKeypointIndexBySide:function(n){switch(n){case sn.BlazePose:return xL;case sn.PoseNet:case sn.MoveNet:return bL;default:throw new Error("Model ".concat(n," is not supported."))}},getAdjacentPairs:function(n){switch(n){case sn.BlazePose:return vL;case sn.PoseNet:case sn.MoveNet:return wL;default:throw new Error("Model ".concat(n," is not supported."))}},getKeypointIndexByName:nx});var rx=["SinglePose.Lightning","SinglePose.Thunder","MultiPose.Lightning"],sx={modelType:"SinglePose.Lightning",enableSmoothing:!0},ox={},ix={frequency:30,minCutOff:2.5,beta:300,derivateCutOff:2.5,thresholdCutOff:.5,thresholdBeta:5,disableValueScaling:!0},qh={maxTracks:18,maxAge:1e3,minSimilarity:.2,keypointTrackerParams:{keypointConfidenceThreshold:.3,keypointFalloff:[.026,.025,.025,.035,.035,.079,.079,.072,.072,.062,.062,.107,.107,.087,.087,.089,.089],minNumberOfKeypoints:4}},ax={maxTracks:18,maxAge:1e3,minSimilarity:.15,trackerParams:{}};function Yh(n,t){var e,r,s,o;return n?t.width>t.height?(e=1,r=t.height/t.width,s=0,o=(t.width/2-t.height/2)/t.width):(e=t.width/t.height,r=1,s=(t.height/2-t.width/2)/t.height,o=0):t.width>t.height?(e=t.width/t.height,r=1,s=(t.height/2-t.width/2)/t.height,o=0):(e=1,r=t.height/t.width,s=0,o=(t.width/2-t.height/2)/t.width),{yMin:s,xMin:o,yMax:s+e,xMax:o+r,height:e,width:r}}function ux(n,t){var e={maxTracks:n.maxTracks,maxAge:n.maxAge,minSimilarity:n.minSimilarity};return null!=t.maxTracks&&(e.maxTracks=t.maxTracks),null!=t.maxAge&&(e.maxAge=t.maxAge),null!=t.minSimilarity&&(e.minSimilarity=t.minSimilarity),e}var sB=function(){function n(t,e){this.moveNetModel=t,this.modelInputResolution={height:0,width:0},this.keypointIndexByName=nx(sn.MoveNet),"SinglePose.Lightning"===e.modelType?(this.modelInputResolution.width=192,this.modelInputResolution.height=192):"SinglePose.Thunder"===e.modelType&&(this.modelInputResolution.width=256,this.modelInputResolution.height=256),this.multiPoseModel="MultiPose.Lightning"===e.modelType,this.multiPoseModel||(this.keypointFilter=new jh(ix),this.cropRegionFilterYMin=new Cs(.9),this.cropRegionFilterXMin=new Cs(.9),this.cropRegionFilterYMax=new Cs(.9),this.cropRegionFilterXMax=new Cs(.9)),this.enableSmoothing=e.enableSmoothing,this.minPoseScore=e.minPoseScore?e.minPoseScore:.25,this.multiPoseMaxDimension=e.multiPoseMaxDimension?e.multiPoseMaxDimension:256,this.enableTracking=e.enableTracking,this.multiPoseModel&&this.enableTracking&&(e.trackerType===Ss.Keypoint?this.tracker=new tB(e.trackerConfig):e.trackerType===Ss.BoundingBox&&(this.tracker=new eB(e.trackerConfig)),this.enableSmoothing&&(this.keypointFilterMap=new Map))}return n.prototype.runSinglePersonPoseModel=function(t){return Ze(this,void 0,void 0,function(){var e,r,s,o,i;return Je(this,function(a){switch(a.label){case 0:if(4!==(e=this.moveNetModel.execute(t)).shape.length||1!==e.shape[0]||1!==e.shape[1]||17!==e.shape[2]||3!==e.shape[3])throw e.dispose(),new Error("Unexpected output shape from model: [".concat(e.shape,"]"));return"webgpu"===Ta()?[3,1]:(r=e.dataSync(),[3,3]);case 1:return[4,e.data()];case 2:r=a.sent(),a.label=3;case 3:for(e.dispose(),s={keypoints:[],score:0},o=0,i=0;i<17;++i)s.keypoints[i]={y:r[3*i],x:r[3*i+1],score:r[3*i+2]},s.keypoints[i].score>.2&&(++o,s.score+=s.keypoints[i].score);return o>0&&(s.score/=o),[2,s]}})})},n.prototype.runMultiPersonPoseModel=function(t){return Ze(this,void 0,void 0,function(){var e,r,s,o,i,a,l;return Je(this,function(c){switch(c.label){case 0:if(3!==(e=this.moveNetModel.execute(t)).shape.length||1!==e.shape[0]||56!==e.shape[2])throw e.dispose(),new Error("Unexpected output shape from model: [".concat(e.shape,"]"));return"webgpu"===Ta()?[3,1]:(r=e.dataSync(),[3,3]);case 1:return[4,e.data()];case 2:r=c.sent(),c.label=3;case 3:for(e.dispose(),s=[],o=r.length/56,i=0;i<o;++i)for(s[i]={keypoints:[]},s[i].box={yMin:r[a=56*i+51],xMin:r[a+1],yMax:r[a+2],xMax:r[a+3],width:r[a+3]-r[a+1],height:r[a+2]-r[a]},s[i].score=r[56*i+55],s[i].keypoints=[],l=0;l<17;++l)s[i].keypoints[l]={y:r[56*i+3*l],x:r[56*i+3*l+1],score:r[56*i+3*l+2]};return[2,s]}})})},n.prototype.estimatePoses=function(t,e,r){return void 0===e&&(e=ox),Ze(this,void 0,void 0,function(){var s,o,i,a,u,l;return Je(this,function(c){switch(c.label){case 0:return e=null==(d=e)?ox:wt({},d),null==t?(this.reset(),[2,[]]):(null==r?Hy(t)&&(r=1e6*t.currentTime):r*=1e3,s=zh(t),o=Ei(s),i=On(s,0),t instanceof _t||s.dispose(),a=[],this.multiPoseModel?[3,2]:[4,this.estimateSinglePose(i,o,r)]);case 1:return a=c.sent(),[3,4];case 2:return[4,this.estimateMultiplePoses(i,o,r)];case 3:a=c.sent(),c.label=4;case 4:for(u=0;u<a.length;++u)for(l=0;l<a[u].keypoints.length;++l)a[u].keypoints[l].name=wr[l],a[u].keypoints[l].y*=o.height,a[u].keypoints[l].x*=o.width;return[2,a]}var d})})},n.prototype.estimateSinglePose=function(t,e,r){return Ze(this,void 0,void 0,function(){var s,o,i,a,u=this;return Je(this,function(l){switch(l.label){case 0:return this.cropRegion||(this.cropRegion=Yh(null==this.cropRegion,e)),s=Ae(function(){var c=Kn([[u.cropRegion.yMin,u.cropRegion.xMin,u.cropRegion.yMax,u.cropRegion.xMax]]),d=Ur([1],"int32");return mt(bs.cropAndResize(t,c,d,[u.modelInputResolution.height,u.modelInputResolution.width],"bilinear",0),"int32")}),t.dispose(),[4,this.runSinglePersonPoseModel(s)];case 1:if(o=l.sent(),s.dispose(),o.score<this.minPoseScore)return this.reset(),[2,[]];for(i=0;i<o.keypoints.length;++i)o.keypoints[i].y=this.cropRegion.yMin+o.keypoints[i].y*this.cropRegion.height,o.keypoints[i].x=this.cropRegion.xMin+o.keypoints[i].x*this.cropRegion.width;return null!=r&&this.enableSmoothing&&(o.keypoints=this.keypointFilter.apply(o.keypoints,r,1)),a=function nB(n,t,e,r){for(var s={},o=0,i=wr;o<i.length;o++){var a=i[o];s[a]=[t[e[a]].y*r.height,t[e[a]].x*r.width]}if(((w=t)[(S=e).left_hip].score>.2||w[S.right_hip].score>.2)&&(w[S.left_shoulder].score>.2||w[S.right_shoulder].score>.2)){var u=(s.left_hip[0]+s.right_hip[0])/2,l=(s.left_hip[1]+s.right_hip[1])/2,c=function(w,S,k,_,A){for(var P=["left_shoulder","right_shoulder","left_hip","right_hip"],L=0,M=0,W=0;W<P.length;W++)(Ie=Math.abs(_-k[P[W]][0]))>L&&(L=Ie),(ve=Math.abs(A-k[P[W]][1]))>M&&(M=ve);for(var q=0,re=0,oe=0,ge=Object.keys(k);oe<ge.length;oe++){var Ie,ve,qe=ge[oe];w[S[qe]].score<.2||((Ie=Math.abs(_-k[qe][0]))>q&&(q=Ie),(ve=Math.abs(A-k[qe][1]))>re&&(re=ve))}return[L,M,q,re]}(t,e,s,u,l),y=Math.max(1.9*c[1],1.9*c[0],1.2*c[2],1.2*c[3]),g=[u-(y=Math.min(y,Math.max(l,r.width-l,u,r.height-u))),l-y];if(y>Math.max(r.width,r.height)/2)return Yh(null==n,r);var x=2*y;return{yMin:g[0]/r.height,xMin:g[1]/r.width,yMax:(g[0]+x)/r.height,xMax:(g[1]+x)/r.width,height:(g[0]+x)/r.height-g[0]/r.height,width:(g[1]+x)/r.width-g[1]/r.width}}var w,S;return Yh(null==n,r)}(this.cropRegion,o.keypoints,this.keypointIndexByName,e),this.cropRegion=this.filterCropRegion(a),[2,[o]]}})})},n.prototype.estimateMultiplePoses=function(t,e,r){return Ze(this,void 0,void 0,function(){var s,o,i,a,u,l,c,d,h,p,m,y=this;return Je(this,function(g){switch(g.label){case 0:return e.width>e.height?(o=this.multiPoseMaxDimension,i=Math.round(this.multiPoseMaxDimension*e.height/e.width),s=bs.resizeBilinear(t,[i,o]),u=o,l=32*Math.ceil(i/32),a=xs(s,[[0,0],[0,l-i],[0,0],[0,0]])):(o=Math.round(this.multiPoseMaxDimension*e.width/e.height),s=bs.resizeBilinear(t,[i=this.multiPoseMaxDimension,o]),u=32*Math.ceil(o/32),l=i,a=xs(s,[[0,0],[0,0],[0,u-o],[0,0]])),s.dispose(),t.dispose(),c=mt(a,"int32"),a.dispose(),[4,this.runMultiPersonPoseModel(c)];case 1:for(d=g.sent(),c.dispose(),d=d.filter(function(x){return x.score>=y.minPoseScore}),p=0;p<d.length;++p)for(h=0;h<d[p].keypoints.length;++h)d[p].keypoints[h].y*=l/i,d[p].keypoints[h].x*=u/o;if(this.enableTracking&&(this.tracker.apply(d,r),this.enableSmoothing)){for(p=0;p<d.length;++p)this.keypointFilterMap.has(d[p].id)||this.keypointFilterMap.set(d[p].id,new jh(ix)),d[p].keypoints=this.keypointFilterMap.get(d[p].id).apply(d[p].keypoints,r,1);m=this.tracker.getTrackIDs(),this.keypointFilterMap.forEach(function(x,w){m.has(w)||y.keypointFilterMap.delete(w)})}return[2,d]}})})},n.prototype.filterCropRegion=function(t){if(t){var e=this.cropRegionFilterYMin.apply(t.yMin),r=this.cropRegionFilterXMin.apply(t.xMin),s=this.cropRegionFilterYMax.apply(t.yMax),o=this.cropRegionFilterXMax.apply(t.xMax);return{yMin:e,xMin:r,yMax:s,xMax:o,height:s-e,width:o-r}}return this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset(),null},n.prototype.dispose=function(){this.moveNetModel.dispose()},n.prototype.reset=function(){this.cropRegion=null,this.resetFilters()},n.prototype.resetFilters=function(){this.keypointFilter.reset(),this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset()},n}();function oB(n){return void 0===n&&(n=sx),Ze(this,void 0,void 0,function(){var t,e,r,s;return Je(this,function(o){switch(o.label){case 0:return t=function rB(n){var r,s,e=null==n?sx:wt({},n);if(null==e.modelType)e.modelType="SinglePose.Lightning";else if(rx.indexOf(e.modelType)<0)throw new Error("Invalid architecture ".concat(e.modelType,". ")+"Should be one of ".concat(rx));if(null==e.enableSmoothing&&(e.enableSmoothing=!0),null!=e.minPoseScore&&(e.minPoseScore<0||e.minPoseScore>1))throw new Error("minPoseScore should be between 0.0 and 1.0");if(null!=e.multiPoseMaxDimension&&(e.multiPoseMaxDimension%32!=0||e.multiPoseMaxDimension<32))throw new Error("multiPoseMaxDimension must be a multiple of 32 and higher than 0");if("MultiPose.Lightning"===e.modelType&&null==e.enableTracking&&(e.enableTracking=!0),"MultiPose.Lightning"===e.modelType&&!0===e.enableTracking)if(null==e.trackerType&&(e.trackerType=Ss.BoundingBox),e.trackerType===Ss.Keypoint)e.trackerConfig=null!=e.trackerConfig?((s=ux(qh,r=e.trackerConfig)).keypointTrackerParams=wt({},qh.keypointTrackerParams),null!=r.keypointTrackerParams&&(null!=r.keypointTrackerParams.keypointConfidenceThreshold&&(s.keypointTrackerParams.keypointConfidenceThreshold=r.keypointTrackerParams.keypointConfidenceThreshold),null!=r.keypointTrackerParams.keypointFalloff&&(s.keypointTrackerParams.keypointFalloff=r.keypointTrackerParams.keypointFalloff),null!=r.keypointTrackerParams.minNumberOfKeypoints&&(s.keypointTrackerParams.minNumberOfKeypoints=r.keypointTrackerParams.minNumberOfKeypoints)),s):qh;else{if(e.trackerType!==Ss.BoundingBox)throw new Error("Tracker type not supported by MoveNet");e.trackerConfig=null!=e.trackerConfig?ux(ax,e.trackerConfig):ax}return e}(n),r=!0,t.modelUrl?(r="string"==typeof t.modelUrl&&t.modelUrl.indexOf("https://tfhub.dev")>-1,[4,ki(t.modelUrl,{fromTFHub:r})]):[3,2];case 1:return e=o.sent(),[3,4];case 2:return s=void 0,"SinglePose.Lightning"===t.modelType?s="https://tfhub.dev/google/tfjs-model/movenet/singlepose/lightning/4":"SinglePose.Thunder"===t.modelType?s="https://tfhub.dev/google/tfjs-model/movenet/singlepose/thunder/4":"MultiPose.Lightning"===t.modelType&&(s="https://tfhub.dev/google/tfjs-model/movenet/multipose/lightning/1"),[4,ki(s,{fromTFHub:r})];case 3:e=o.sent(),o.label=4;case 4:return"webgl"===Ta()&&z().set("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",0),[2,new sB(e,t)]}})})}var lx={architecture:"MobileNetV1",outputStride:16,multiplier:.75,inputResolution:{height:257,width:257}},cx=["MobileNetV1","ResNet50"],dx={MobileNetV1:[8,16],ResNet50:[16]},iB=[8,16,32],hx={MobileNetV1:[.5,.75,1],ResNet50:[1]},px=[1,2,4],fx={maxPoses:1,flipHorizontal:!1},aB={maxPoses:5,flipHorizontal:!1,scoreThreshold:.5,nmsRadius:20},uB=[-123.15,-115.9,-103.06];function Qh(n){return Math.floor(n/2)}var lB=function(){function n(t,e){this.priorityQueue=new Array(t),this.numberOfElements=-1,this.getElementValue=e}return n.prototype.enqueue=function(t){this.priorityQueue[++this.numberOfElements]=t,this.swim(this.numberOfElements)},n.prototype.dequeue=function(){var t=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,t},n.prototype.empty=function(){return-1===this.numberOfElements},n.prototype.size=function(){return this.numberOfElements+1},n.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},n.prototype.max=function(){return this.priorityQueue[0]},n.prototype.swim=function(t){for(;t>0&&this.less(Qh(t),t);)this.exchange(t,Qh(t)),t=Qh(t)},n.prototype.sink=function(t){for(;2*t<=this.numberOfElements;){var e=2*t;if(e<this.numberOfElements&&this.less(e,e+1)&&e++,!this.less(t,e))break;this.exchange(t,e),t=e}},n.prototype.getValueAt=function(t){return this.getElementValue(this.priorityQueue[t])},n.prototype.less=function(t,e){return this.getValueAt(t)<this.getValueAt(e)},n.prototype.exchange=function(t,e){var r=this.priorityQueue[t];this.priorityQueue[t]=this.priorityQueue[e],this.priorityQueue[e]=r},n}();function cB(n,t,e,r,s,o){for(var i=o.shape,a=i[0],u=i[1],l=!0,c=Math.max(e-s,0),d=Math.min(e+s+1,a),h=c;h<d;++h){for(var p=Math.max(r-s,0),m=Math.min(r+s+1,u),y=p;y<m;++y)if(o.get(h,y,n)>t){l=!1;break}if(!l)break}return l}function dB(n){return Ze(this,void 0,void 0,function(){return Je(this,function(t){return[2,Promise.all(n.map(function(e){return e.buffer()}))]})})}function mx(n,t,e,r){return{y:r.get(n,t,e),x:r.get(n,t,e+17)}}function gx(n,t,e){var r=mx(n.heatmapY,n.heatmapX,n.id,e);return{x:n.heatmapX*t+r.x,y:n.heatmapY*t+r.y}}function yx(n,t,e,r){var s=e.x,o=e.y;return n.some(function(i){var d,h,p=i.keypoints;return(d=p[r].y-o)*d+(h=p[r].x-s)*h<=t})}var xx=wr.reduce(function(n,t,e){return n[t]=e,n},{}),bx=[["nose","left_eye"],["left_eye","left_ear"],["nose","right_eye"],["right_eye","right_ear"],["nose","left_shoulder"],["left_shoulder","left_elbow"],["left_elbow","left_wrist"],["left_shoulder","left_hip"],["left_hip","left_knee"],["left_knee","left_ankle"],["nose","right_shoulder"],["right_shoulder","right_elbow"],["right_elbow","right_wrist"],["right_shoulder","right_hip"],["right_hip","right_knee"],["right_knee","right_ankle"]].map(function(n){return[xx[n[0]],xx[n[1]]]}),Zh=bx.map(function(n){return n[1]}),wx=bx.map(function(n){return n[0]});function vx(n,t,e){return n<t?t:n>e?e:n}function Jh(n,t,e,r){return{y:vx(Math.round(n.y/t),0,e-1),x:vx(Math.round(n.x/t),0,r-1)}}function Cx(n,t){return{x:n.x+t.x,y:n.y+t.y}}function Sx(n,t,e,r,s,o,i,a){void 0===a&&(a=2);for(var u=r.shape,l=u[0],c=u[1],d={y:t.y,x:t.x},h=Cx(d,(w=n,S=Jh(d,o,l,c),void 0,_=(k=i).shape[2]/2,{y:k.get(S.y,S.x,w),x:k.get(S.y,S.x,_+w)})),p=0;p<a;p++){var m=Jh(h,o,l,c),y=mx(m.y,m.x,e,s);h=Cx({x:m.x*o,y:m.y*o},{x:y.x,y:y.y})}var w,S,k,_,g=Jh(h,o,l,c),x=r.get(g.y,g.x,e);return{y:h.y,x:h.x,name:wr[e],score:x}}function hB(n,t,e,r,s,o){var a=Zh.length,u=new Array(t.shape[2]),l=n.part,c=n.score,d=gx(l,r,e);u[l.id]={score:c,name:wr[l.id],y:d.y,x:d.x};for(var h=a-1;h>=0;--h){var p=Zh[h],m=wx[h];u[p]&&!u[m]&&(u[m]=Sx(h,u[p],m,t,e,r,o))}for(h=0;h<a;++h)m=Zh[h],u[p=wx[h]]&&!u[m]&&(u[m]=Sx(h,u[p],m,t,e,r,s));return u}function pB(n,t,e){return e.reduce(function(r,s,o){var u=s.score;return yx(n,t,{y:s.y,x:s.x},o)||(r+=u),r},0)/e.length}function fB(n,t,e,r,s,o,i,a){return void 0===i&&(i=.5),void 0===a&&(a=20),Ze(this,void 0,void 0,function(){var u,l,c,d,h,p,m,y,g,x,w,S;return Je(this,function(k){switch(k.label){case 0:return[4,dB([n,t,e,r])];case 1:for(u=k.sent(),c=u[1],d=u[2],h=u[3],p=[],m=function(_,A,P){for(var L=P.shape,M=L[0],W=L[1],q=L[2],re=new lB(M*W*q,function(qe){return qe.score}),oe=0;oe<M;++oe)for(var ge=0;ge<W;++ge)for(var Ie=0;Ie<q;++Ie){var ve=P.get(oe,ge,Ie);ve<_||cB(Ie,ve,oe,ge,1,P)&&re.enqueue({score:ve,part:{heatmapY:oe,heatmapX:ge,id:Ie}})}return re}(i,0,l=u[0]),y=a*a;p.length<o&&!m.empty();)g=m.dequeue(),x=gx(g.part,s,c),yx(p,y,x,g.part.id)||(w=hB(g,l,c,s,d,h),S=pB(p,y,w),p.push({keypoints:w,score:S}));return[2,p]}})})}function Ix(){for(var n,t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];switch(t.length){case 0:n="fn main() ";break;case 1:n="fn main(".concat(t[0]," : i32)");break;default:throw Error("Unreachable")}return n}var mB=function(){function n(t){this.variableNames=["A","B"],this.size=!0,this.workgroupSize=[32,1,1],this.outputShape=[t[0],1],this.dispatchLayout=he(this.outputShape),this.dispatch=ae(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="getpointsConfidenceOp"}return n.prototype.getUserCode=function(){return"\n        ".concat(Ix("index")," {\n          if (index < uniforms.size) {\n            let y = B[index * 2];\n            let x = B[index * 2 + 1];\n            let outIndex = y * uniforms.aShape.x * uniforms.aShape.z + x * uniforms.aShape.z + index;\n            result[index] = A[outIndex];\n          }\n        }\n        ")},n}(),yB=function(){function n(t){if(this.variableNames=["A","B"],this.size=!0,this.supportedLastDimension=2,2!==t.length||t[1]!==this.supportedLastDimension)throw new Error("GetOffsetVectorsProgram only supports shape of [x, ".concat(this.supportedLastDimension,"], but current shape is ").concat(t));this.workgroupSize=[32,1,1],this.outputShape=t;var e=[t[0],1];this.dispatchLayout=he(e),this.dispatch=ae(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="GetOffsetVectors"}return n.prototype.getUserCode=function(){return"\n    fn getOffsetPoint(y: i32, x: i32, index: i32) -> vec2<i32> {\n      let outIndexY = y * uniforms.bShape.x * uniforms.bShape.y + x * uniforms.bShape.y + index;\n      let outIndexX = outIndexY + uniforms.bShape.z;\n      let outY = i32(B[outIndexY]);\n      let outX = i32(B[outIndexX]);\n      return vec2<i32>(outY, outX);\n    }\n\n    ".concat(Ix("index")," {\n      if (index < uniforms.size) {\n        let indexY = index * ").concat(this.supportedLastDimension,";\n        let indexX = indexY + 1;\n        let heatmapY = A[indexY];\n        let heatmapX = A[indexX];\n        let out = getOffsetPoint(i32(heatmapY), i32(heatmapX), index);\n        result[indexY] = f32(out[0]);\n        result[indexX] = f32(out[1]);\n      }\n    }\n    ")},n}();function kx(n){var t=n.shape,e=t[0],r=t[1],s=t[2];return Ae(function(){var o,i,a=K(n,[e*r,s]),u=qf(a,0),l=On(je(u,We(r,"int32")),1),c=On((o=u,i=r,Ae(function(){var d=je(o,We(i,"int32"));return Pe(o,ne(d,We(i,"int32")))})),1);return zt([l,c],1)})}function bB(n,t,e){return Ae(function(){var r=function(s,o){for(var i=[],a=0;a<wr.length;a++){var c=wB(s.get(a,0).valueOf(),s.get(a,1).valueOf(),a,o),d=c.x;i.push(c.y),i.push(d)}return Kn(i,[wr.length,2])}(n,e);return Ce(mt(ne(n.toTensor(),We(t,"int32")),"float32"),r)})}function wB(n,t,e,r){return{y:r.get(n,t,e),x:r.get(n,t,e+wr.length)}}function vB(n,t,e){return Ze(this,void 0,void 0,function(){var r,s,o,i,u,l,c,d,h;return Je(this,function(p){switch(p.label){case 0:return r=0,s=kx(n),[4,Promise.all([n.buffer(),t.buffer(),s.buffer()])];case 1:return o=p.sent(),i=o[0],[4,(l=bB(u=o[2],e,o[1])).buffer()];case 2:return c=p.sent(),d=Array.from(function(m,y){for(var g=y.shape[0],x=new Float32Array(g),w=0;w<g;w++){var S=y.get(w,0),k=y.get(w,1);x[w]=m.get(S,k,w)}return x}(i,u)),h=d.map(function(m,y){return r+=m,{y:c.get(y,0),x:c.get(y,1),score:m,name:wr[y]}}),s.dispose(),l.dispose(),[2,{keypoints:h,score:r/h.length}]}})})}function CB(n,t,e){return Ze(this,void 0,void 0,function(){var r,s,o;return Je(this,function(i){return r=kx(n),a=r,u=e,l=t,s=Ae(function(){var c=function xB(n,t){if(gi()instanceof $h)return e=n,r=t,s=gi(),o=new yB(e.shape),i=s.runWebGPUProgram(o,[e,r],"float32"),Sn().makeTensorFromTensorInfo(i);var e,r,s,o,i;throw new Error("getOffsetVectorsGPU is not supported in this backend!")}(a,l);return Ce(mt(ne(a,We(u,"int32")),"float32"),c)}),o=function gB(n,t){if(gi()instanceof $h)return e=n,r=t,s=gi(),o=new mB(r.shape),i=s.runWebGPUProgram(o,[e,r],"float32"),Sn().makeTensorFromTensorInfo(i);var e,r,s,o,i;throw new Error("getPointsConfidenceWebGPU is not supported in this backend!")}(n,r),[2,[s,o]];var a,u,l})})}function Nx(n,t){return(n-1)%t==0}var $x="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",_x="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/";function Tx(n,t){return(n-1)%t==0?n:Math.floor(n/t)*t+1}var Ex=function(){function n(t,e){this.posenetModel=t;var r=this.posenetModel.inputs[0].shape;N(-1===r[1]&&-1===r[2],function(){return"Input shape [".concat(r[1],", ").concat(r[2],"] ")+"must both be equal to or -1"});var s,o,a,i={height:Tx((s=e.inputResolution).height,o=e.outputStride),width:Tx(s.width,o)};N(iB.indexOf(a=e.outputStride)>=0,function(){return"outputStride of ".concat(a," is invalid. ")+"It must be either 8 or 16."}),function(a,u){N(Nx(a.height,u),function(){return"height of ".concat(a.height," is invalid for output stride ")+"".concat(u,".")}),N(Nx(a.width,u),function(){return"width of ".concat(a.width," is invalid for output stride ")+"".concat(u,".")})}(i,e.outputStride),this.inputResolution=i,this.outputStride=e.outputStride,this.architecture=e.architecture}return n.prototype.estimatePoses=function(t,e){return void 0===e&&(e=fx),Ze(this,void 0,void 0,function(){return Je(this,function(r){return[2,this.estimatePosesGPU(t,e,!1)]})})},n.prototype.estimatePosesGPU=function(t,e,r){return void 0===e&&(e=fx),void 0===r&&(r=!1),Ze(this,void 0,void 0,function(){var s,o,i,a,u,l,c,d,h,p,m,y,g,w,S,k,_;return Je(this,function(A){switch(A.label){case 0:return s=function(P){var L=P;if(null==L.maxPoses&&(L.maxPoses=1),L.maxPoses<=0)throw new Error("Invalid maxPoses ".concat(L.maxPoses,". Should be > 0."));if(L.maxPoses>1){if((L=wt(wt({},aB),L)).scoreThreshold<0||L.scoreThreshold>1)throw new Error("Invalid scoreThreshold ".concat(L.scoreThreshold,". ")+"Should be in range [0.0, 1.0]");if(L.nmsRadius<=0)throw new Error("Invalid nmsRadius ".concat(L.nmsRadius,"."))}return L}(e),null==t?[2,r?[[],[]]:[]]:(this.maxPoses=s.maxPoses,o=Gh(t,{outputTensorSize:this.inputResolution,keepAspectRatio:!0,borderMode:"replicate"}),i=o.imageTensor,a=o.padding,u="ResNet50"===this.architecture?Ce(i,uB):Uy(i,[-1,1]),l=this.posenetModel.predict(u),"ResNet50"===this.architecture?(c=yt(l[2],[0]),d=yt(l[3],[0]),h=yt(l[0],[0]),p=yt(l[1],[0])):(c=yt(l[0],[0]),d=yt(l[1],[0]),h=yt(l[2],[0]),p=yt(l[3],[0])),m=Vr(d),1!==this.maxPoses?[3,5]:r?[4,CB(m,c,this.outputStride)]:[3,2]);case 1:return g=A.sent(),y=[w=g[0],g[1]],[3,4];case 2:return[4,vB(m,c,this.outputStride)];case 3:w=A.sent(),y=[w],A.label=4;case 4:return[3,7];case 5:if(r)throw new Error("GPU renderer only supports single pose!");return[4,fB(m,c,h,p,this.outputStride,this.maxPoses,s.scoreThreshold,s.nmsRadius)];case 6:y=A.sent(),A.label=7;case 7:if(r){if(!0===s.flipHorizontal)throw new Error("flipHorizontal is not supported!");S=this.getCanvasInfo(Ei(t),this.inputResolution,a)}else _=Ei(t),k=function(P,L,M,W){var oe=L.height/(M.height*(1-W.top-W.bottom)),ge=L.width/(M.width*(1-W.left-W.right)),Ie=-W.top*M.height,ve=-W.left*M.width;if(1===ge&&1===oe&&0===Ie&&0===ve)return P;for(var qe=0,Ye=P;qe<Ye.length;qe++)for(var bt=0,Jt=Ye[qe].keypoints;bt<Jt.length;bt++){var ln=Jt[bt];ln.x=(ln.x+ve)*ge,ln.y=(ln.y+Ie)*oe}return P}(y,_,this.inputResolution,a),s.flipHorizontal&&(k=function(P,L){for(var M=0,W=P;M<W.length;M++)for(var q=0,re=W[M].keypoints;q<re.length;q++){var oe=re[q];oe.x=L.width-1-oe.x}return P}(k,_));return i.dispose(),u.dispose(),ct(l),c.dispose(),d.dispose(),h.dispose(),p.dispose(),m.dispose(),[2,r?[y,S]:k]}})})},n.prototype.getCanvasInfo=function(t,e,r){return[-r.left*e.width,-r.top*e.height,t.width/(e.width*(1-r.left-r.right)),t.height/(e.height*(1-r.top-r.bottom)),t.width,t.height]},n.prototype.dispose=function(){this.posenetModel.dispose()},n.prototype.reset=function(){},n}();function SB(n){return void 0===n&&(n=lx),Ze(this,void 0,void 0,function(){var t,e,r,s,o;return Je(this,function(i){switch(i.label){case 0:return"ResNet50"!==(t=function(c){var d=c||lx;if(null==d.architecture&&(d.architecture="MobileNetV1"),cx.indexOf(d.architecture)<0)throw new Error("Invalid architecture ".concat(d.architecture,". ")+"Should be one of ".concat(cx));if(null==d.inputResolution&&(d.inputResolution={height:257,width:257}),null==d.outputStride&&(d.outputStride=16),dx[d.architecture].indexOf(d.outputStride)<0)throw new Error("Invalid outputStride ".concat(d.outputStride,". ")+"Should be one of ".concat(dx[d.architecture]," ")+"for architecture ".concat(d.architecture,"."));if(null==d.multiplier&&(d.multiplier=1),hx[d.architecture].indexOf(d.multiplier)<0)throw new Error("Invalid multiplier ".concat(d.multiplier,". ")+"Should be one of ".concat(hx[d.architecture]," ")+"for architecture ".concat(d.architecture,"."));if(null==d.quantBytes&&(d.quantBytes=4),px.indexOf(d.quantBytes)<0)throw new Error("Invalid quantBytes ".concat(d.quantBytes,". ")+"Should be one of ".concat(px," ")+"for architecture ".concat(d.architecture,"."));if("MobileNetV1"===d.architecture&&32===d.outputStride&&1!==d.multiplier)throw new Error("When using an output stride of 32, you must select 1 as the multiplier.");return d}(n)).architecture?[3,2]:(u=t.quantBytes,l="model-stride".concat(t.outputStride,".json"),e=4===u?_x+"float/"+l:_x+"quant".concat(u,"/")+l,[4,ki(t.modelUrl||e)]);case 1:return r=i.sent(),[2,new Ex(r,t)];case 2:return d=t.multiplier,h=t.quantBytes,p={1:"100",.75:"075",.5:"050"},m="model-stride".concat(t.outputStride,".json"),s=4===h?$x+"float/".concat(p[d],"/")+m:$x+"quant".concat(h,"/").concat(p[d],"/")+m,[4,ki(t.modelUrl||s)];case 3:return o=i.sent(),[2,new Ex(o,t)]}var d,h,p,m,u,l})})}var kB_modelType_SINGLEPOSE_LIGHTNING="SinglePose.Lightning";const Is={},Sl={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function cr(n,t){if(!(n in Is)||null!=t){const r=function _B(n,t){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=null==t?function $B(n){if(!z().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n):t;return e.addEventListener("webglcontextlost",r=>{r.preventDefault(),delete Is[n]},!1),z().getBool("SOFTWARE_WEBGL_ENABLED")&&(Sl.failIfMajorPerformanceCaveat=!1),1===n?e.getContext("webgl",Sl)||e.getContext("experimental-webgl",Sl):e.getContext("webgl2",Sl)}(n,t);if(null===r)return console.log("Could not get context for WebGL version",n),null;Is[n]=r}const e=Is[n];return null==e||e.isContextLost()?(delete Is[n],cr(n)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Is[n])}var Il=function(n){return n[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",n}(Il||{}),Qn=function(n){return n[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",n}(Qn||{}),Qt=function(n){return n[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",n}(Qt||{});function su(n,t){return[t,n]}function kl(n){const t=j(n);return Es(Math.ceil(t/4))}function Ai(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function ep(n,t){const e=n;let r,s,o,i,a,u,l,c,d,h;return 2===z().getNumber("WEBGL_VERSION")?(r=e.R32F,s=e.R16F,o=e.RGBA16F,i=e.RGBA32F,a=e.RED,l=4,c=1,d=e.HALF_FLOAT,h=e.FLOAT,u=e.RGBA8):(r=n.RGBA,s=n.RGBA,o=n.RGBA,i=e.RGBA,a=n.RGBA,l=4,c=4,d=null!=t?t.HALF_FLOAT_OES:null,h=n.FLOAT,u=n.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:d,textureTypeFloat:h}}function de(n,t){const e=t();return z().getBool("DEBUG")&&function RB(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function OB(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}function PB(n){return!!(z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||5.96e-8<Math.abs(n)&&Math.abs(n)<65504)}function Nl(n,t){return Qr(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const BB=/ERROR: [0-9]+:([0-9]+):/g;function Rx(n,t){const e=BB.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const r=+e[1],s=n.split("\n"),o=s.length.toString().length+2,i=s.map((d,h)=>xn((h+1).toString(),o)+d);let a=0;for(let d=0;d<i.length;d++)a=Math.max(i[d].length,a);const u=i.slice(0,r-1),l=i.slice(r-1,r),c=i.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${xn(l[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function tp(n,t){if(de(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Ax(n,t,e,r,s,o,i){const a=n.getAttribLocation(t,e);return-1!==a&&(de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,r)),de(n,()=>n.vertexAttribPointer(a,s,n.FLOAT,!1,o,i)),de(n,()=>n.enableVertexAttribArray(a)),!0)}function qB(n,t,e,r){de(n,()=>function jB(n,t,e){(function Px(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+n.TEXTURE0;if(r<n.TEXTURE0||r>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),de(n,()=>n.activeTexture(n.TEXTURE0+e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,r)),de(n,()=>n.uniform1i(e,r))}function np(n,t,e){de(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),de(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function Dx(n,t){de(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),de(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function $l(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function YB(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function Qr(n,t,e){const r=de(n,()=>t());if(null==r)throw new Error(e);return r}function Di(n,t=2){return j(n.slice(0,n.length-t))}function Pi(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function _l(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[Di(n),...Pi(n)]),t}function Tl(n){return n%2==0}function El(n,t){if(ot(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n[n.length-1],r=t[t.length-1];if(e===r||Tl(e)&&Tl(r)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&Tl(n[0])&&Tl(t[0])}let Rl,Al;function Zn(n,t){return null!=n.getExtension(t)}function Ox(n){try{if(null!=cr(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function rp(n){const t=ep(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(o),i}function ou(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&N("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const we=z();function on(){let n,t,e,r,s,o,i,a,u,l;return 2===z().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",r="in",s="texture",o="outputColor",i="out vec4 outputColor;",a=z().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",r="varying",s="texture2D",o="gl_FragColor",i="",a="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:r,texture2D:s,output:o,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:u,defineRound:l}}function No(n,t,e="index"){const r=pt(t);return r.map((s,o)=>`int ${n[o]} = ${e} / ${s}; ${o===r.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${s}`:`index -= ${n[o]} * ${s}`};`).join("")}function Dl(n,t,e="index"){const r=pt(t);return r.map((s,o)=>`int ${n[o]} = ${e} / outShapeStrides[${o}]; ${o===r.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * outShapeStrides[${o}]`:`index -= ${n[o]} * outShapeStrides[${o}]`};`).join("")}function sp(n){const t=pt(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}we.registerFlag("HAS_WEBGL",()=>we.getNumber("WEBGL_VERSION")>0),we.registerFlag("WEBGL_VERSION",()=>Ox(2)?2:Ox(1)?1:0),we.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),we.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===we.get("WEBGL_VERSION")),we.registerFlag("WEBGL_CPU_FORWARD",()=>!0),we.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),we.registerFlag("WEBGL_PACK",()=>we.getBool("HAS_WEBGL")),we.registerFlag("WEBGL_PACK_NORMALIZATION",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_CLIP",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_REDUCE",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_LAZILY_UNPACK",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_CONV_IM2COL",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>we.getBool("WEBGL_PACK")),we.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function ZB(n){if(null==Rl){const t=cr(n);Rl=t.getParameter(t.MAX_TEXTURE_SIZE)}return Rl}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function JB(n){if(null==Al){const t=cr(n);Al=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Al)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=we.getNumber("WEBGL_VERSION");return 0===n?0:function eM(n){if(0===n)return 0;let t;const e=cr(n);return t=Zn(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:Zn(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),we.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>we.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Jp()),we.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function tM(n){if(0===n)return!1;const t=cr(n);if(1===n){if(!Zn(t,"OES_texture_float"))return!1}else if(!Zn(t,"EXT_color_buffer_float"))return!1;return rp(t)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!we.getBool("WEBGL_FORCE_F16_TEXTURES")&&we.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),we.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function nM(n){if(0===n)return!1;const t=cr(n);if(1!==n){if(Zn(t,"EXT_color_buffer_float"))return rp(t);const r="EXT_color_buffer_half_float";if(Zn(t,r)){const s=t.getExtension(r);return function rM(n,t){const e=ep(n,t),r=n.createTexture();n.bindTexture(n.TEXTURE_2D,r),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const i=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,i),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,r,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(r),n.deleteFramebuffer(i),a}(t,s)}return!1}return!(!Zn(t,"OES_texture_float")||!Zn(t,"WEBGL_color_buffer_float"))&&rp(t)}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function sM(n){return 2===n&&null!=cr(n).fenceSync}(we.getNumber("WEBGL_VERSION"))),we.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>we.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),we.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),we.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Jp()?1:-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),we.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),we.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),we.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),we.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),we.registerFlag("WEBGL_EXP_CONV",()=>!1),we.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>we.getBool("IS_TEST")),we.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),we.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),we.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),we.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const Fx="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Lx}=ke;function aM(n,t,e){const r=[];if(n.forEach(p=>{const m=j(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?r.push(`uniform float ${p.name}${m>1?`[${m}]`:""};`):(r.push(`uniform sampler2D ${p.name};`),r.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:y}=ip(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(y.length){case 1:r.push(`uniform int ${p.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${p.name}Shape;`)}r.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{r.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const s=r.join("\n"),o=n.map(p=>function uM(n,t,e=!1,r){let s="";s+=e?Bx(n,r):Oi(n,r);return n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(s+=e?function VM(n,t){const e=n.name,r=e.charAt(0).toUpperCase()+e.slice(1),s="get"+r+"AtOutCoords",o=n.shapeInfo.logicalShape.length,i=t.logicalShape.length,a=Lx(n.shapeInfo.logicalShape,t.logicalShape),u=xt(i),l=i-o;let c;const d=["x","y","z","w","u","v"];c=0===o?"":i<2&&a.length>=1?"coords = 0;":a.map(w=>`coords.${d[w+l]} = 0;`).join("\n");let h="";h=i<2&&o>0?"coords":n.shapeInfo.logicalShape.map((w,S)=>`coords.${d[S+l]}`).join(", ");let p="return outputValue;";const y=1===j(n.shapeInfo.logicalShape),x=1===j(t.logicalShape);if(1!==o||y||x){if(y&&!x)p=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(a.length){const w=o-2,S=o-1;a.indexOf(w)>-1&&a.indexOf(S)>-1?p="return vec4(outputValue.x);":a.indexOf(w)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(S)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${p}\n    }\n  `}(n,t):function WM(n,t){const e=n.name,r=e.charAt(0).toUpperCase()+e.slice(1),s="get"+r+"AtOutCoords",a=n.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!n.shapeInfo.isUniform&&a===u&&null==n.shapeInfo.flatOffset&&ot(n.shapeInfo.texShape,t.texShape))return`\n      float ${s}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const l=xt(u),c=Lx(n.shapeInfo.logicalShape,t.logicalShape),d=u-a;let h;const p=["x","y","z","w","u","v"];h=0===a?"":u<2&&c.length>=1?"coords = 0;":c.map(y=>`coords.${p[y+d]} = 0;`).join("\n");let m="";return m=u<2&&a>0?"coords":n.shapeInfo.logicalShape.map((y,g)=>`coords.${p[g+d]}`).join(", "),`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      return get${r}(${m});\n    }\n  `}(n,t)),s}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),i=t.texShape,a=on(),u=function dM(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(a);let l,c,d=function fM(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${mM}\n    ${gM}\n    ${yM}\n  `}(a);return t.isPacked?(l=function lM(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function bM(n,t,e){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===r[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `:1===r[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function $M(n,t,e){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(ot(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function vM(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(n[2]/2),o=s*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function SM(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(n[n.length-1]/2),o=s*Math.ceil(n[n.length-2]/2);let i=o,a="",u="b, r, c";for(let l=2;l<n.length-1;l++)i*=n[n.length-l-1],a=`\n      int b${l} = index / ${i};\n      index -= b${l} * ${i};\n    `+a,u=`b${l}, `+u;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${a}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${n.length}(${u});\n    }\n  `}(n,t,e)}}(t.logicalShape,i,e.enableShapeUniforms),c=function pM(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(a)):(l=function cM(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function wM(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function _M(n,t,e){return ot(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function CM(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Dl(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const r=No(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function IM(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Dl(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const r=No(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function kM(n,t){const e=No(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function NM(n,t){const e=No(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,e.enableShapeUniforms),c=function hM(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(a)),e.packedInputs&&(d+=xM),[d,u,c,s,l,o,e.userCode].join("\n")}function Oi(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function EM(n,t){const e=n.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${r}() {return ${e};}`;const[s,o]=n.shapeInfo.texShape;if(1===s&&1===o)return`\n      float ${r}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=$o(e);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[a,u]=n.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${a}, ${u}, ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function AM(n,t){const e=n.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${Fi(n)}\n      }\n    `;const s=n.shapeInfo.texShape,o=s[0],i=s[1];if(1===i&&1===o)return`\n      float ${r}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const a=$o(e);return 1===i?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===o?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${i}, index + ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function PM(n,t){const e=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=n.shapeInfo.texShape;if(null!=o&&ot(e,o))return t?`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const{newShape:i,keptDims:a}=dr(e);if(i.length<e.length){const p=["row","col"];return`\n      ${Oi(Li(n,i),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${Bi(p,a)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Fi(n)}\n      }\n    `;const l=o[0],c=o[1],d=$o(r);return 1===c?t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${d}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `:1===l?t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${d}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `:t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${d};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${d};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(n,t);case 3:return function FM(n,t){const e=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=e[1]*e[2],i=e[2],{newShape:a,keptDims:u}=dr(e);if(a.length<e.length){const g=["row","col","depth"];return`\n        ${Oi(Li(n,a),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${Bi(g,u)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${i}, 1)));\n        ${Fi(n)}\n      }\n    `;const c=n.shapeInfo.texShape,d=c[0],h=c[1],p=n.shapeInfo.flatOffset;if(h===o&&null==p)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${d}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===i&&null==p)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${d}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const m=$o(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${m};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${i} + depth + ${m};\n        vec2 uv = uvFromFlat(${d}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(n,t);case 4:return function BM(n,t){const e=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=e[3],i=e[2]*o,a=e[1]*i,{newShape:u,keptDims:l}=dr(e);if(u.length<e.length){const S=["row","col","depth","depth2"];return`\n      ${Oi(Li(n,u),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${Bi(S,l)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${a}, ${i}, ${o}, 1)));\n        ${Fi(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,h=d[0],p=d[1],m=`int stride2 = ${r}Shape[3];`,y=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(p===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${m}\n        ${y}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(p===o&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const x=$o(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${m}\n      ${y}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${x});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${i} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${x});\n      return sampleTexture(${r}, uv);\n    }\n  `}(n,t);case 5:return function MM(n){const t=n.shapeInfo.logicalShape,e=n.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1),s=t[4],o=t[3]*s,i=t[2]*o,a=t[1]*i,{newShape:u,keptDims:l}=dr(t);if(u.length<t.length){const g=["row","col","depth","depth2","depth3"];return`\n      ${Oi(Li(n,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Bi(g,l)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${a}, ${i}, ${o}, ${s})) +\n          depth3;\n        ${Fi(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,h=d[0],p=d[1];if(p===a&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${o}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${i} + depth * ${o} +\n          depth2 * ${s} + depth3 + ${$o(e)};\n      vec2 uv = uvFromFlat(${h}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function zM(n){const t=n.shapeInfo.logicalShape,e=n.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:s,keptDims:o}=dr(t);if(s.length<t.length){const x=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Oi(Li(n,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Bi(x,o)});\n      }\n    `}const i=t[5],a=t[4]*i,u=t[3]*a,l=t[2]*u,c=t[1]*l;if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${a})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Fi(n)}\n      }\n    `;const d=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,p=h[0],m=h[1];if(m===c&&null==d)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${a}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(m===i&&null==d)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${a} + depth3 * ${i} + depth4 + ${$o(e)};\n      vec2 uv = uvFromFlat(${p}, ${m}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function Bx(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function TM(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${on().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function RM(n,t){const e=n.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1),s=n.shapeInfo.texShape,o=on();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `;const i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function DM(n,t){const e=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=n.shapeInfo.texShape,i=o[0],a=o[1],u=on();if(null!=o&&ot(e,o))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `;const l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `}(n,t);case 3:return function OM(n,t){const e=n.shapeInfo.logicalShape,r=n.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=n.shapeInfo.texShape,i=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const p=[1,2],y=["b","row","col"];return`\n        ${Bx(Li(n,e.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${Bi(y,p)});\n        }\n      `}const a=on();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${a.texture2D}(${r}, uv);\n    }\n  `;const u=i[0],l=i[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${a.texture2D}(${r}, uv);\n    }\n  `}(n,t);default:return function LM(n,t){const e=n.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1),s=on();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${e}, uv);\n    }\n  `;const o=n.shapeInfo.logicalShape,i=o.length,a=n.shapeInfo.texShape,u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],l=u[0],c=u[1],d=Math.ceil(o[i-1]/2);let h=d*Math.ceil(o[i-2]/2),p="int b, int row, int col",m=`b * ${h} + (row / 2) * ${d} + (col / 2)`;for(let y=2;y<i-1;y++)p=`int b${y}, `+p,h*=o[i-y-1],m=`b${y} * ${h} + `+m;return`\n    vec4 ${r}(${p}) {\n      int index = ${m};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${s.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const mM="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",gM="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",yM="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",xM="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function $o(n){return`offset${n}`}function Fi(n){const t=n.name,e=j(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function xt(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function ip(n,t,e){const{newShape:r,keptDims:s}=dr(t),o=t.length,i=n&&3===o&&1===t[0],a=i?t.slice(1):r,u=!n&&o>1&&!ot(t,e)&&r.length<o||i;return{useSqueezeShape:u,uniformShape:u?a:t,keptDims:s}}function Li(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function Bi(n,t){return t.map(e=>n[e]).join(", ")}function zx(n,t,e){const r=[],s=[];let o,i,a,u=null,l=null;l=n.getUniformLocation(e,"NAN",!1),1===z().getNumber("WEBGL_VERSION")&&(u=n.getUniformLocation(e,"INFINITY",!1));const c=!1;for(const d of t.variableNames){const h={name:d,uniform:n.getUniformLocation(e,d,c),offset:n.getUniformLocation(e,`offset${d}`,c)};t.enableShapeUniforms&&(h.shape=n.getUniformLocation(e,`${d}Shape`,c),h.texShape=n.getUniformLocation(e,`${d}TexShape`,c)),r.push(h)}if(t.enableShapeUniforms&&(o=n.getUniformLocation(e,"outShape",c),a=n.getUniformLocation(e,"outShapeStrides",c),i=n.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(const d of t.customUniforms)s.push(n.getUniformLocation(e,d.name,c));return{variablesLocations:r,customUniformLocations:s,infLoc:u,nanLoc:l,outShapeLocation:o,outShapeStridesLocation:a,outTexShapeLocation:i}}function Vx(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,r)=>{const s=e.logicalShape,o=t[r],i=o.shape;if(!ot(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(e.isUniform&&o.isUniform)return;const a=e.texShape,u=o.isUniform?null:o.texData.texShape;if(!ot(a,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${u} must match`)})}function Zt(n){return z().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class jM{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Il.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=on();this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Dl(["r","c","d"],t):No(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class KM{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Il.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=on();this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Dl(["r","c","d"],t):No(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class XM{constructor(t){this.variableNames=["A"],this.outTexUsage=Qn.DOWNLOAD;const e=on();this.outputShape=t,this.userCode=`\n      ${Fx}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class qM{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Qn.DOWNLOAD;const e=on();this.outputShape=t,this.userCode=`\n      ${Fx}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const YM={R:0,G:1,B:2,A:3};class Wx{constructor(t,e=!1,r="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=on();this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length);let o="result";e&&(o="floor(result * 255. + 0.5)");let i="";for(let a=0;a<r.length;a++)i+=`\n          if(offset == ${a}) {\n            result = values[${YM[r[a]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":sp(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${r.length});\n\n        flatIndex = idiv(flatIndex, ${r.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${i}\n        }\n        ${s.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class QM{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=on();this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length);let s="",o="result";e&&(o="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){const u=2*i+a;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${i};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${r.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${u}] = values[0];\n            } else if (offset == 1) {\n              result[${u}] = values[1];\n            } else if (offset == 2) {\n              result[${u}] = values[2];\n            } else {\n              result[${u}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":sp(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${r.output} = ${o};\n        }\n    `}}function iu(n,t,e,r,s,o){!function GB(n,t){const e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const i=function UB(n){return Qr(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),a=n.TEXTURE_2D;return de(n,()=>n.bindTexture(a,i)),de(n,()=>n.texParameteri(a,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),de(n,()=>n.texParameteri(a,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),de(n,()=>n.texParameteri(a,n.TEXTURE_MIN_FILTER,n.NEAREST)),de(n,()=>n.texParameteri(a,n.TEXTURE_MAG_FILTER,n.NEAREST)),1===z().getNumber("WEBGL_VERSION")?de(n,()=>n.texImage2D(a,0,r,t,e,0,s,o,null)):de(n,()=>n.texStorage2D(a,1,r,t,e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:i,texShape:[e,t]}}function Ux(n){return n.internalFormatFloat}function Gx(n){return n.internalFormatHalfFloat}function Hx(n){return n.downloadTextureFormat}function jx(n){return n.internalFormatPackedFloat}function Kx(n){return n.internalFormatPackedHalfFloat}class ap{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=z().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,function NB(n,t){Is[n]=t}(e,t)):this.gl=cr(e),t=this.gl,2===z().getNumber("WEBGL_VERSION")){const o=t;this.createVertexArray=()=>de(o,()=>o.createVertexArray()),this.bindVertexArray=i=>de(o,()=>o.bindVertexArray(i)),this.deleteVertexArray=i=>de(o,()=>o.deleteVertexArray(i)),this.getVertexArray=()=>de(o,()=>o.getParameter(o.VERTEX_ARRAY_BINDING))}else if(null!=t){const o=t.getExtension("OES_vertex_array_object");if(null==o)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>de(t,()=>o.createVertexArrayOES()),this.bindVertexArray=i=>de(t,()=>o.bindVertexArrayOES(i)),this.deleteVertexArray=i=>de(t,()=>o.deleteVertexArrayOES(i)),this.getVertexArray=()=>de(t,()=>t.getParameter(o.VERTEX_ARRAY_BINDING_OES))}let r="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===z().getNumber("WEBGL_VERSION")){const i="OES_texture_half_float";if(this.textureFloatExtension=Nl(this.gl,"OES_texture_float"),Zn(this.gl,i))this.textureHalfFloatExtension=Nl(this.gl,i);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(r),Zn(this.gl,s))this.colorBufferHalfFloatExtension=Nl(this.gl,s);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(r="EXT_color_buffer_float",Zn(this.gl,r))this.colorBufferFloatExtension=this.gl.getExtension(r);else{if(!Zn(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function JM(n){return function VB(n,t){const e=Qr(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),de(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function e4(n){return function WB(n,t){const e=Qr(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return de(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),de(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function HB(n){return Qr(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=ep(this.gl,this.textureHalfFloatExtension)}get debug(){return z().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;de(t,()=>t.finish()),de(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),de(t,()=>t.deleteFramebuffer(this.framebuffer)),de(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),de(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),de(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function t4(n,t,e,r){const[s,o]=su(t,e);return iu(n,s,o,Ux(r),r.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function n4(n,t,e,r){const[s,o]=su(t,e);return iu(n,s,o,Gx(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function r4(n,t,e,r){const[s,o]=su(t,e);return iu(n,s,o,Hx(r),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function u4(n,t,e){de(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?2===z().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.width,e.height,n.RGBA,n.UNSIGNED_BYTE,e.data)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):2===z().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,e)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,r,s){this.throwIfDisposed(),function a4(n,t,e,r,s,o){let i,a,u;de(n,()=>n.bindTexture(n.TEXTURE_2D,t)),s instanceof Uint8Array?(i=new Uint8Array(e*r*4),a=n.UNSIGNED_BYTE,u=n.RGBA):(i=new Float32Array(e*r*4),a=n.FLOAT,u=o.internalFormatPackedFloat),i.set(s),2===z().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e,r,n.RGBA,a,i)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,u,e,r,0,n.RGBA,a,i)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,r,s,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function o4(n,t,e,r){const[s,o]=Ai(t,e);return iu(n,s,o,Kx(r),n.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function s4(n,t,e,r){const[s,o]=Ai(t,e);return iu(n,s,o,jx(r),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Dx(this.gl,this.framebuffer),this.outputTexture=null),de(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,r){return this.downloadMatrixDriver(t,()=>function d4(n,t,e,r){const[s,o]=su(t,e),a=new Uint8Array(function TB(n,t){return n*t}(t*e,4));return de(n,()=>n.readPixels(0,0,s,o,r.downloadTextureFormat,n.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}(this.gl,e,r,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,r,s,o,i){return function h4(n,t,e,r,s,o,i,a){const u=n,l=new Float32Array(function EB(n,t){const[e,r]=Ai(n,t);return e*r*4}(o,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}(this.gl,t,0,0,0,o,i)}downloadFloat32MatrixFromBuffer(t,e){return function c4(n,t,e){const r=n,s=new Float32Array(e);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,r){this.bindTextureToFrameBuffer(t);const s=function l4(n,t,e,r){const s=n.createBuffer();de(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,s));const a=16*t*e;return de(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,a,n.STREAM_READ)),de(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),de(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),s}(this.gl,e,r);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,r;if(z().getBool("WEBGL_FENCE_API_ENABLED")){const s=t,o=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),r=()=>{const i=s.clientWaitSync(o,0,0);return i===s.ALREADY_SIGNALED||i===s.CONDITION_SATISFIED},e=o}else z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(e,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:e,isFencePassed:r}}downloadMatrixFromPackedTexture(t,e,r){return this.downloadMatrixDriver(t,()=>function p4(n,t,e){const r=new Float32Array(t*e*4);return de(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,r)),r}(this.gl,e,r))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=function ZM(n){const t=on();return function FB(n,t){const e=Qr(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(de(n,()=>n.shaderSource(e,t)),de(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const r=function MB(n){return Qr(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);de(e,()=>e.attachShader(r,this.vertexShader)),de(e,()=>e.attachShader(r,t)),function zB(n,t){if(de(n,()=>n.linkProgram(t)),!z().get("ENGINE_COMPILE_ONLY")&&!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,r);const s=Object.assign(r,{vao:this.createVertexArray()});return this.debug&&tp(e,s),s}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);const e=this.gl;de(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),function i4(n,t,e){de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),Ax(n,t,"clipSpacePos",e,3,20,0)&&Ax(n,t,"uv",e,2,20,12)}(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(de(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&tp(this.gl,this.program),de(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,r=!0){return this.throwIfDisposed(),r?function KB(n,t,e){return Qr(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function XB(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),de(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,r){this.throwIfDisposed(),this.throwIfNoProgram(),qB(this.gl,t,e,r)}setOutputMatrixTexture(t,e,r){this.setOutputMatrixTextureDriver(t,r,e)}setOutputPackedMatrixTexture(t,e,r){this.throwIfDisposed();const[s,o]=Ai(e,r);this.setOutputMatrixTextureDriver(t,s,o)}setOutputMatrixWriteRegion(t,e,r,s){this.setOutputMatrixWriteRegionDriver(r,t,s,e)}setOutputPackedMatrixWriteRegion(t,e,r,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&tp(this.gl,this.program),$l(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}de(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),de(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Nl(this.gl,2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const r=this.gl,s=this.getQueryTimerExtensionWebGL2(),o=r.createQuery();return r.beginQuery(s.TIME_ELAPSED_EXT,o),o}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,r=this.getQueryTimerExtensionWebGL2();return void e.endQuery(r.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return(0,X.c)(function*(){return yield Gi(()=>e.disposed||e.isQueryAvailable(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const r=this.gl;return r.getQueryParameter(t,r.QUERY_RESULT)/1e6}{const r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const r=this.gl,s=this.getQueryTimerExtensionWebGL2(),o=r.getQueryParameter(t,r.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const r=this.getQueryTimerExtensionWebGL1(),s=r.getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),s&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function f4(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:r}=this.itemsToPoll[e];r()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let r;"setTimeoutCustom"in z().platform&&(r=z().platform.setTimeoutCustom.bind(z().platform)),Gi(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,r)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),np(this.gl,t,this.framebuffer),this.debug&&$l(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(np(this.gl,this.outputTexture,this.framebuffer),this.debug&&$l(this.gl)):Dx(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const r=e();return this.unbindTextureToFrameBuffer(),r}setOutputMatrixTextureDriver(t,e,r){this.throwIfDisposed();const s=this.gl;np(s,t,this.framebuffer),this.debug&&$l(s),this.outputTexture=t,de(s,()=>s.viewport(0,0,e,r)),de(s,()=>s.scissor(0,0,e,r))}setOutputMatrixWriteRegionDriver(t,e,r,s){this.throwIfDisposed(),de(this.gl,()=>this.gl.scissor(t,e,r,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:m4,bincountImpl:Xx,bincountReduceImpl:g4,bitwiseAndImpl:y4,castImpl:x4,ceilImpl:b4,concatImpl:w4,equalImpl:v4,expImpl:C4,expm1Impl:S4,floorImpl:I4,gatherNdImpl:k4,gatherV2Impl:N4,greaterImpl:$4,greaterEqualImpl:_4,lessImpl:T4,lessEqualImpl:E4,linSpaceImpl:R4,logImpl:A4,maxImpl:D4,maximumImpl:P4,minimumImpl:O4,multiplyImpl:F4,negImpl:L4,notEqualImpl:B4,prodImpl:M4,raggedGatherImpl:z4,raggedRangeImpl:V4,raggedTensorToTensorImpl:W4,rangeImpl:U4,rsqrtImpl:G4,scatterImpl:H4,sigmoidImpl:j4,simpleAbsImpl:qx,sliceImpl:K4,sparseFillEmptyRowsImpl:X4,sparseReshapeImpl:q4,sparseSegmentReductionImpl:Yx,sqrtImpl:Y4,staticRegexReplaceImpl:Q4,stridedSliceImpl:Z4,stringNGramsImpl:J4,stringSplitImpl:ez,stringToHashBucketFastImpl:tz,subImpl:nz,tileImpl:rz,topKImpl:sz,transposeImpl:up,uniqueImpl:oz}=D;function Qx(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function an(n,t){return 1===t?[n]:Qx(n,t)}class az{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=Zt(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=an("rc",this.rank),r=xt(this.rank),s=this.getOutOfBoundsCondition(e),o=this.getSetup(e),i=this.getOutput(e);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${o}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}getSourceCoordsArr(t){const e=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let o=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let i=2;i<this.rank;i++)o=`${t[t.length-1-i]},`+o;e.push(o)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let r=this.rank-2;r<this.rank;r++)e+=`${t[r]} >= ${this.enableShapeUniforms?`outShape[${r}]`:this.outputShape[r]}`,r<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(t){const e=this.getSourceCoordsArr(t);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class Zx{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length);let r="";for(let s=0;s<4;s++){let o="thisRC = rc;";s%2==1&&(o+="thisRC.z += 1;"),s>1&&(o+="thisRC.y += 1;"),r+=`\n        ${o}\n        ${s>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${s}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${s>0?"}":""}\n      `}this.userCode=`\n      ${function uz(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function iM(n,t,e="index"){const s=function oM(n,t){const e=n.length,r=n.map(o=>`${t}[${o}]`),s=new Array(e-1);s[e-2]=r[e-1];for(let o=e-3;o>=0;--o)s[o]=`(${s[o+1]} * ${r[o+1]})`;return s}(n.map((o,i)=>i),t);return s.map((o,i)=>`int ${n[i]} = ${e} / ${s[i]}; ${i===s.length-1?`int ${n[i+1]} = ${e} - ${n[i]} * ${s[i]}`:`index -= ${n[i]} * ${s[i]}`};`).join("")}(["r","c","d"],"inputShape"):No(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":sp(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${r}\n\n        setOutput(result);\n      }\n    `}}class lz{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,r){const s=e0(e,r),o=t0(t,s,r);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const i=Jx(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const u=this.freeTextures[o].pop();return this.usedTextures[o].push(u),u}let a;return s===Qt.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):s===Qt.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):s===Qt.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):s===Qt.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):s===Qt.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,r,s){if(null==this.freeTextures)return;const o=e0(r,s),i=t0(e,o,s);i in this.freeTextures||(this.freeTextures[i]=[]);const a=Jx(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,s),u=z().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;const l=this.usedTextures[i],c=l&&l.indexOf(t);if(null==c||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[c]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Jx(n,t,e,r,s){const o=function dz(n,t){switch(n){case Qt.PACKED_2X2_FLOAT32:return jx(t);case Qt.PACKED_2X2_FLOAT16:return Kx(t);case Qt.UNPACKED_FLOAT32:return Ux(t);case Qt.UNPACKED_FLOAT16:return Gx(t);case Qt.PACKED_4X1_UNSIGNED_BYTE:return Hx(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,r);let i;if(s){const[u,l]=Ai(n[0],n[1]);i=u*l}else{const[u,l]=su(n[0],n[1]);i=u*l}const a=function cz(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(e,o);return i*a}function e0(n,t){if(n===Qn.UPLOAD)return Qt.PACKED_2X2_FLOAT32;if(n===Qn.RENDER||null==n)return function hz(n){return z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?Qt.PACKED_2X2_FLOAT32:Qt.UNPACKED_FLOAT32:n?Qt.PACKED_2X2_FLOAT16:Qt.UNPACKED_FLOAT16}(t);if(n===Qn.DOWNLOAD||n===Qn.PIXELS)return Qt.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function t0(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class vr{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Mn="if (isnan(x)) return x;",pz="return x;",n0="return abs(x);",fz="return (x >= 0.0) ? x : (exp(x) - 1.0);",mz=Mn+"\n  return (x < 0.0) ? 0.0 : x;\n",gz=Mn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ks="return x;",yz="return 1.0 / (1.0 + exp(-1.0 * x));",xz="return x;",bz="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",wz="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",vz="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Cz="return 1.0 / (1.0 + exp(-1.0 * x));";class Ns{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Sz{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length);const e=t.length,r=an("rc",e),s=xt(e),o=function iz(n,t){if(1===n)return"rc";let e="";for(let r=0;r<n;r++)e+=t[r],r<n-1&&(e+=",");return e}(e,r),i=r.slice(-2),a=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${a}));\n      }\n    `}}const Iz=$m,Ol={},_z=z().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let Rz=(()=>{class n extends It{nextDataId(){return n.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!z().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let r;if(null!=e){if(e instanceof ap)r=e;else{const s=cr(z().getNumber("WEBGL_VERSION"),e);r=new ap(s)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const s=cr(z().getNumber("WEBGL_VERSION"));r=new ap(s),this.binaryCache=function $z(n){return n in Ol||(Ol[n]={}),Ol[n]}(z().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=r,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new lz(this.gpgpu),this.numMBBeforeWarning=function Ez(){return null==z().global.screen?1024:z().global.screen.height*z().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new Wt(this,Sn())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,r,s,o,i,a){const u=this.makeTensorInfo(r,s),l=this.texData.get(u.dataId);l.isPacked=!1,l.texture={texture:e,texShape:[o,i]},l.texShape=[o,i];const c=_l(r),d=new Wx(c,!1,a),h=this.runWebGLProgram(d,[u],s,[[o,i]]);return h.shape=r,l.texture=null,this.disposeIntermediateTensorInfo(u),h.dataId}write(e,r,s){if((z().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||z().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===s&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:r,dtype:s,values:e,usage:Qn.UPLOAD,refCount:1}),o}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,r,s,o,i){if(z().getBool("DEBUG")&&this.checkNumericalProblems(r),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:s,dtype:o,values:r,usage:Qn.UPLOAD,refCount:i})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const r=this.texData.get(e),{values:s,dtype:o,complexTensorInfos:i,slice:a,shape:u,isPacked:l}=r;if(null!=a){let p;p=l?new Ns(u,ks):new vr(u,ks);const m=this.runWebGLProgram(p,[{dataId:e,shape:u,dtype:o}],o),y=this.readSync(m.dataId);return this.disposeIntermediateTensorInfo(m),y}if(null!=s)return this.convertAndCacheOnCPU(e);if("string"===o)return s;const c=null!=this.activeTimers;let d,h;return c&&(d=or()),h="complex64"===o?mo(this.readSync(i.real.dataId),this.readSync(i.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=or()-d),this.convertAndCacheOnCPU(e,h)}read(e){var r=this;return(0,X.c)(function*(){if(r.pendingRead.has(e)){const g=r.pendingRead.get(e);return new Promise(x=>g.push(x))}const s=r.texData.get(e),{values:o,shape:i,slice:a,dtype:u,complexTensorInfos:l,isPacked:c}=s;if(null!=a){let g;g=c?new Ns(i,ks):new vr(i,ks);const x=r.runWebGLProgram(g,[{dataId:e,shape:i,dtype:u}],u),w=r.read(x.dataId);return r.disposeIntermediateTensorInfo(x),w}if(null!=o)return r.convertAndCacheOnCPU(e);if(z().getBool("DEBUG")&&!z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===z().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let h,p,d=null;if("complex64"!==u&&z().get("WEBGL_BUFFER_SUPPORTED")){h=r.decode(e);const g=r.texData.get(h.dataId);d=r.gpgpu.createBufferFromTexture(g.texture.texture,...kl(i))}if(r.pendingRead.set(e,[]),"complex64"!==u&&(yield r.gpgpu.createAndWaitForFence()),"complex64"===u){const g=yield Promise.all([r.read(l.real.dataId),r.read(l.imag.dataId)]);p=mo(g[0],g[1])}else if(null==d)p=r.getValuesFromTexture(e);else{const g=j(i);p=r.gpgpu.downloadFloat32MatrixFromBuffer(d,g)}if(null!=h&&r.disposeIntermediateTensorInfo(h),null!=d){const g=r.gpgpu.gl;de(g,()=>g.deleteBuffer(d))}const m=r.convertAndCacheOnCPU(e,p),y=r.pendingRead.get(e);return r.pendingRead.delete(e),y.forEach(g=>g(m)),r.pendingDisposal.has(e)&&(r.pendingDisposal.delete(e),r.disposeData(e)&&Sn().removeDataId(e,r),r.pendingDeletes--),m})()}readToGPU(e,r={}){const s=this.texData.get(e),{values:o,shape:i,slice:a,dtype:u,isPacked:l,texture:c}=s;if("complex64"===u)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let m;m=l?new Ns(i,ks):new vr(i,ks);const y=this.runWebGLProgram(m,[{dataId:e,shape:i,dtype:u}],u),g=this.readToGPU(y,r);return this.disposeIntermediateTensorInfo(y),g}if(null==c)throw null!=o?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const d=this.decode(e,r.customTexShape),h=Sn().makeTensorFromTensorInfo(d),p=this.texData.get(d.dataId);return Object.assign({tensorRef:h},p.texture)}bufferSync(e){const r=this.readSync(e.dataId);if("string"===e.dtype)try{const s=r.map(o=>Fr(o));return dt(e.shape,e.dtype,s)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return dt(e.shape,e.dtype,r)}checkNumericalProblems(e){if(null!=e)for(let r=0;r<e.length;r++){const s=e[r];if(!PB(s))throw z().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${s} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:r,dtype:s,isPacked:o}=this.texData.get(e),i=j(r);if(z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),m=this.texData.get(p.dataId),y=this.gpgpu.downloadMatrixFromPackedTexture(m.texture.texture,...kl(r)).subarray(0,i);return this.disposeIntermediateTensorInfo(p),y}const a=z().getBool("WEBGL_PACK")&&!0===o,u=a?_l(r):r,l=a?new qM(u):new XM(u),c=this.runWebGLProgram(l,[{shape:u,dtype:s,dataId:e}],"float32"),d=this.texData.get(c.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(d.texture.texture,d.texShape[0],d.texShape[1]).subarray(0,i);return this.disposeIntermediateTensorInfo(c),h}timerAvailable(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var r=this;const s=this.activeTimers,o=[];let i=!1;null==this.programTimersStack?(this.programTimersStack=o,i=!0):this.activeTimers.push(o),this.activeTimers=o,e();const a=Lr(this.activeTimers.map(c=>c.query)).filter(c=>null!=c),u=Lr(this.activeTimers.map(c=>c.name)).filter(c=>null!=c);this.activeTimers=s,i&&(this.programTimersStack=null);const l={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(0,X.c)(function*(){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(a);l.kernelMs=Oo(c),l.getExtraProfileInfo=()=>c.map((d,h)=>({name:u[h],ms:d})).map(d=>`${d.name}: ${d.ms}`).join(", ")}else l.kernelMs={error:"WebGL query timers are not supported in this environment."};return r.uploadWaitMs=0,r.downloadWaitMs=0,l})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:or(),endMs:null}}endTimer(e){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=or(),e)}getQueryTime(e){var r=this;return(0,X.c)(function*(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?r.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,r=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(r?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!r&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:s}=this.texData.get(e);return null!=s&&(this.disposeData(s.real.dataId,r),this.disposeData(s.imag.dataId,r)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:r,dtype:s,texShape:o,usage:i,isPacked:a,slice:u}=this.texData.get(e),l=u&&u.origDataId||e,c=this.dataRefCount.get(l);c>1?this.dataRefCount.set(l,c-1):(this.dataRefCount.delete(l),null!=r&&(this.numBytesInGPU-=this.computeBytes(o,s),this.textureManager.releaseTexture(r,o,i,a)));const d=this.texData.get(e);d.texture=null,d.texShape=null,d.isPacked=!1,d.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,r=_z){return z().getBool("WEBGL_CPU_FORWARD")&&e.every(s=>null==this.texData.get(s.dataId).texture&&j(s.shape)<r)}getGPGPUContext(){return this.gpgpu}where(e){sr("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const r=e.dataSync();return Iz(e.shape,r)}packedUnaryOp(e,r,s){const o=new Ns(e.shape,r),i=this.compileAndRun(o,[e],s);return Sn().makeTensorFromTensorInfo(i)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const o=qx(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,o)}if(z().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,n0,e.dtype);const r=new vr(e.shape,n0),s=this.compileAndRun(r,[e]);return Sn().makeTensorFromTensorInfo(s)}makeTensorInfo(e,r,s){let o;if("string"===r&&null!=s&&s.length>0&&As(s[0])){const i=s.map(a=>us(a));o=this.write(i,e,r)}else o=this.write(s,e,r);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:r}}makeOutput(e,r,s){return Sn().makeTensorFromTensorInfo(this.makeTensorInfo(e,r,s),this)}unpackTensor(e){const r=new Sz(e.shape);return this.runWebGLProgram(r,[e],e.dtype)}packTensor(e){const r=new az(e.shape);return this.runWebGLProgram(r,[e],e.dtype,null,!0)}packedReshape(e,r){const s=[Di(e.shape),...Pi(e.shape)],o={dtype:e.dtype,shape:s,dataId:e.dataId},i=[Di(r),...Pi(r)],a=new Zx(i,s),c=this.runWebGLProgram(a,[o],e.dtype,[s],!0);return{dataId:c.dataId,shape:r,dtype:c.dtype}}decode(e,r){const s=this.texData.get(e),{isPacked:o,shape:i,dtype:a}=s;null!=r&&N(j(i)<=r[0]*r[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const u=_l(i);let l;l=o?new KM(u):new jM(u);const d=[null!=r?r:kl(u)];return{dtype:a,shape:i,dataId:this.runWebGLProgram(l,[{shape:u,dtype:a,dataId:e}],a,d,!0,r).dataId}}runWebGLProgram(e,r,s,o,i=!1,a){const u=this.makeTensorInfo(e.outputShape,s),l=this.texData.get(u.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===Il.DENSE){const w=null!=a?a:kl(e.outputShape);l.texShape=w.map(S=>2*S)}if(null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===j(u.shape))return l.values=dn(u.dtype,0),u;const c=[],d=r.map(w=>{if("complex64"===w.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let S=this.texData.get(w.dataId);if(null==S.texture){if(!e.packedInputs&&j(w.shape)<=z().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:w.shape,texData:null,isUniform:!0,uniformValues:S.values};e.packedInputs&&(S.isPacked=!0,S.shape=w.shape)}if(this.uploadToGPU(w.dataId),!!S.isPacked!=!!e.packedInputs)w=S.isPacked?this.unpackTensor(w):this.packTensor(w),c.push(w),S=this.texData.get(w.dataId);else if(S.isPacked&&!El(S.shape,w.shape)){const k=w,_=w.shape;w.shape=S.shape,w=this.packedReshape(w,_),c.push(w),S=this.texData.get(w.dataId),k.shape=_}return{shape:w.shape,texData:S,isUniform:!1}});this.uploadToGPU(u.dataId);const h={shape:u.shape,texData:l,isUniform:!1},p=function HM(n,t,e){let r="";t.concat(e).forEach(i=>{const a=null!=i.texData&&null!=i.texData.slice&&i.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!i.isUniform){const u=i.texData.texShape,{useSqueezeShape:l,uniformShape:c,keptDims:d}=ip(n.packedInputs,i.shape,u);let h="",p="",m="";if(1===c.length&&n.packedInputs){const _=[Math.ceil(u[0]/2),Math.ceil(u[1]/2)];h=`${_[0]>1}_${_[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const _=pt(c);m=`${_[0]===u[1]}_${_[_.length-1]===u[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const y=i.shape.length,g=2===c.length&&ot(i.shape,u),x=1===j(i.shape),w=ms(i.shape,e.shape),S=!n.packedInputs&&y===e.shape.length&&ot(u,e.texData.texShape);r+=`${y}_${S}_${l?d:""}_${c.length}_${x}_${w}_${g}_${h}_${p}_${m}_${n.packedInputs||c.length>2?"":`${u[0]>1}_${u[1]>1}`}_${a}`}else r+=`${i.shape}_${i.isUniform?"uniform":i.texData.texShape}_${a}`});let o=n.constructor.name;return o+="_"+r+"_"+n.userCode+`${z().getNumber("WEBGL_VERSION")}`,o}(e,d,h),m=this.getAndSaveBinary(p,()=>function UM(n,t,e,r){const s=e.map((c,d)=>{const h={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:!c.isUniform&&c.texData.isPacked,flatOffset:null};return null!=c.texData&&null!=c.texData.slice&&c.texData.slice.flatOffset>0&&(h.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[d],shapeInfo:h}}),o=s.map(c=>c.shapeInfo),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},a=aM(s,i,t),u=function LB(n,t){const e=Qr(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(de(n,()=>n.shaderSource(e,t)),de(n,()=>n.compileShader(e)),z().get("ENGINE_COMPILE_ONLY"))return e;if(!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw Rx(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(n.gl,a),l=n.createProgram(u);return z().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:u,source:a,webGLProgram:l,inShapeInfos:o,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(n.buildVao(l),Object.assign({program:t,fragmentShader:u,source:a,webGLProgram:l,inShapeInfos:o,outShapeInfo:i},zx(n,t,l)))}(this.gpgpu,e,d,h)),y=null!=this.activeTimers;let g;y&&(g=this.startTimer()),z().get("ENGINE_COMPILE_ONLY")||function GM(n,t,e,r,s){t.program.enableShapeUniforms||(Vx(t.inShapeInfos,e),Vx([t.outShapeInfo],[r]));const o=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?n.setOutputPackedMatrixTexture(o.texture,i[0],i[1]):n.setOutputMatrixTexture(o.texture,i[0],i[1]),n.setProgram(t.webGLProgram),n.bindVertexArray(t.webGLProgram.vao),1===z().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN);for(let u=0;u<e.length;++u){const l=e[u],{uniform:c,offset:d,shape:h,texShape:p}=t.variablesLocations[u];if(h){const{uniformShape:m}=ip(t.program.packedInputs,l.shape,l.texData.texShape);switch(m.length){case 1:n.gl.uniform1iv(h,new Int32Array(m));break;case 2:n.gl.uniform2iv(h,new Int32Array(m));break;case 3:n.gl.uniform3iv(h,new Int32Array(m));break;case 4:n.gl.uniform4iv(h,new Int32Array(m))}}if(p&&n.gl.uniform2i(p,l.texData.texShape[0],l.texData.texShape[1]),null!=c){if(l.isUniform){if(j(l.shape)<2)n.gl.uniform1f(c,l.uniformValues[0]);else{let m=l.uniformValues;m instanceof Float32Array||(m=new Float32Array(m)),n.gl.uniform1fv(c,m)}continue}null!=l.texData.slice&&null!=d&&n.gl.uniform1i(d,l.texData.slice.flatOffset),n.setInputMatrixTexture(l.texData.texture.texture,c,u)}}const a=t.outShapeLocation;if(a)switch(r.shape.length){case 1:n.gl.uniform1iv(a,new Int32Array(r.shape));break;case 2:n.gl.uniform2iv(a,new Int32Array(r.shape));break;case 3:n.gl.uniform3iv(a,new Int32Array(r.shape));break;case 4:n.gl.uniform4iv(a,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const u=pt(r.shape);switch(r.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(u));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(u));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(u))}}if(t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s)for(let u=0;u<t.program.customUniforms.length;++u){const l=t.program.customUniforms[u],c=t.customUniformLocations[u],d=s[u];if("float"===l.type)n.gl.uniform1fv(c,d);else if("vec2"===l.type)n.gl.uniform2fv(c,d);else if("vec3"===l.type)n.gl.uniform3fv(c,d);else if("vec4"===l.type)n.gl.uniform4fv(c,d);else if("int"===l.type)n.gl.uniform1iv(c,d);else if("ivec2"===l.type)n.gl.uniform2iv(c,d);else if("ivec3"===l.type)n.gl.uniform3iv(c,d);else{if("ivec4"!==l.type)throw Error(`uniform type ${l.type} is not supported yet.`);n.gl.uniform4iv(c,d)}}n.executeProgram()}(this.gpgpu,m,d,h,o),c.forEach(w=>this.disposeIntermediateTensorInfo(w)),y&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const x=z().getNumber("WEBGL_FLUSH_THRESHOLD");if(x>0){const w=or();w-this.lastGlFlushTime>x&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=w)}if(!z().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===i){const w=this.unpackTensor(u);return this.disposeIntermediateTensorInfo(u),w}return u}compileAndRun(e,r,s,o,i=!1){return this.runWebGLProgram(e,r,s=s||r[0].dtype,o,i)}getAndSaveBinary(e,r){return e in this.binaryCache||(this.binaryCache[e]=r()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(z().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(r=>{this.gpgpu.deleteProgram(this.binaryCache[r].webGLProgram),delete this.binaryCache[r]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ae(()=>{if(!z().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=z().getBool("DEBUG");z().set("DEBUG",!1);const r=this.abs(We(1e-8)).dataSync()[0];if(z().set("DEBUG",e),r>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const r=this.texData.get(e),{shape:s,dtype:o,values:i,texture:a,usage:u,isPacked:l}=r;if(null!=a)return;const c=null!=this.activeTimers;let d;c&&(d=or());let h=r.texShape;if(null==h&&(h=function QB(n,t=!1){let e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=z().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");r===1/0&&z().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=e/2),t&&(e*=2,r*=2,1===(n=n.map((a,u)=>u>=n.length-2?Po(n[u]):n[u])).length&&(n=[2,n[0]])),2!==n.length&&(n=dr(n).newShape);let s=j(n),o=null;n.length<=1&&s<=e?o=[1,s]:2===n.length&&n[0]<=e&&n[1]<=e?o=n:3===n.length&&n[0]*n[1]<=e&&n[2]<=e?o=[n[0]*n[1],n[2]]:3===n.length&&n[0]<=e&&n[1]*n[2]<=e?o=[n[0],n[1]*n[2]]:4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e?o=[n[0]*n[1]*n[2],n[3]]:4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e&&(o=[n[0],n[1]*n[2]*n[3]]);const i=null!=o&&Math.max(...o)>r&&Math.min(...o)<=(t?2:1)&&Math.min(...o)>0;if(null==o||i)if(t){const a=Di(n);let u=2,l=2;n.length&&([u,l]=Pi(n)),s=a*(u/2)*(l/2),o=Es(s).map(c=>2*c)}else o=Es(s);return o}(s,l),r.texShape=h),null!=i){const p=_l(s);let m,y=h[1],g=h[0];const x=i instanceof Uint8Array||i instanceof Uint8ClampedArray;(l||!x)&&([y,g]=Ai(h[0],h[1])),m=l?new QM(p,x):new Wx(p,x);const w=x?[g,y]:h,S=this.makeTensorInfo(w,o),k=this.texData.get(S.dataId);k.usage=x?Qn.PIXELS:Qn.UPLOAD,k.texShape=w,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(S.dataId),y,g,i);const P=this.runWebGLProgram(m,[S],o,[[g,y]],!0),L=this.texData.get(P.dataId);r.texShape=L.texShape,r.isPacked=L.isPacked,r.usage=L.usage,z().get("ENGINE_COMPILE_ONLY")?this.disposeData(P.dataId):(r.texture=L.texture,r.values=null,this.texData.delete(P.dataId)),this.disposeIntermediateTensorInfo(S),c&&(this.uploadWaitMs+=or()-d)}else{const p=this.acquireTexture(h,u,o,l);r.texture=p}}convertAndCacheOnCPU(e,r){const s=this.texData.get(e),{dtype:o}=s;return null!=r&&(s.values=function Az(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let r=0;r<e.length;++r)e[r]=Math.round(n[r]);return e}throw new Error(`Unknown dtype ${t}`)}(r,o)),s.values}acquireTexture(e,r,s,o){if(this.numBytesInGPU+=this.computeBytes(e,s),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const i=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${i} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,r,o)}computeBytes(e,r){return e[0]*e[1]*Zr(r)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return(0,X.c)(function*(){const r=[];if(e.gpgpu.parallelCompilationExtension){for(const[,s]of Object.entries(e.binaryCache))r.push(e.checkCompletionAsync_(s));return Promise.all(r)}for(const[,s]of Object.entries(e.binaryCache)){const o=new Promise(i=>{try{e.checkCompletion_(s),i(!0)}catch(a){throw a}});r.push(o)}return Promise.all(r)})()}checkCompletionAsync_(e){var r=this;return(0,X.c)(function*(){return r.gpgpu.gl.getProgramParameter(e.webGLProgram,r.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?r.checkCompletion_(e):(yield function kN(){return new Promise(n=>IN(()=>n()))}(),r.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(Rx(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:r,customUniformLocations:s,infLoc:o,nanLoc:i,outShapeLocation:a,outShapeStridesLocation:u,outTexShapeLocation:l}=zx(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=r,e.customUniformLocations=s,e.infLoc=o,e.nanLoc=i,e.outShapeLocation=a,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}createTensorFromGPUData(e,r,s){e.channels=e.channels||"RGBA";const{texture:o,height:i,width:a,channels:u}=e,l=Sn().backend;if(!l.gpgpu.gl.isTexture(o))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=l.writeTexture(o,r,s,i,a,u);return Sn().makeTensorFromDataId(c,r,s,l)}}return n.nextDataId=0,n})();ef()&&of("webgl",()=>new Rz,2);const lp="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class _o{constructor(t,e,r){this.variableNames=["A","B"],this.outputShape=Be(e,r),this.enableShapeUniforms=Zt(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const To="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class Mi{constructor(t,e,r,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Be(e,r);const o=this.outputShape.length;this.enableShapeUniforms=Zt(o);let i="";if(s)if(0===o||1===j(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${xt(o)} coords = getOutputCoords();\n        `,1===o)i+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const u=an("coords",o);i+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${u[o-2]} + 1) >= outShape[${o} - 2];\n            bool nextColOutOfBounds =\n              (${u[o-1]} + 1) >= outShape[${o} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${u[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${u[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function Tn(n){const{inputs:t,backend:e}=n,{x:r}=t;return e.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Pz={kernelName:ss,backendName:"webgl",kernelFunc:Tn};function $s(n){const{inputs:t,backend:e}=n,{real:r,imag:s}=t,o=e.makeTensorInfo(r.shape,"complex64"),i=e.texData.get(o.dataId),a=Tn({inputs:{x:r},backend:e}),u=Tn({inputs:{x:s},backend:e});return i.complexTensorInfos={real:a,imag:u},o}const Oz={kernelName:Rr,backendName:"webgl",kernelFunc:$s},r0="return (a < 0.) ? b * a : a;",s0="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Lz={kernelName:qs,backendName:"webgl",kernelFunc:function Fz(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{alpha:o}=r,i=e.makeTensorInfo([],"float32",pi(o,"float32")),a=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi(s0,s.shape,i.shape):new _o(r0,s.shape,i.shape),u=e.runWebGLProgram(a,[s,i],"float32");return e.disposeIntermediateTensorInfo(i),u}},o0="return (a < 0.) ? b * a : a;",i0="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Mz={kernelName:Qe,backendName:"webgl",kernelFunc:function Bz(n){const{inputs:t,backend:e}=n,{x:r,alpha:s}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi(i0,r.shape,s.shape):new _o(o0,r.shape,s.shape);return e.runWebGLProgram(o,[r,s],"float32")}},zi="if (isnan(x)) return x;";function nt({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:r}){return({inputs:s,backend:o})=>{const{x:i}=s,a=o,u=r||i.dtype;if(a.shouldExecuteOnCPU([i])&&null!=e){const d=a.texData.get(i.dataId),h=e(d.values,u);return a.makeTensorInfo(i.shape,u,h)}let c;return c=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Ns(i.shape,t):new vr(i.shape,n),a.runWebGLProgram(c,[i],u)}}function qt({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:o}){return({inputs:i,backend:a})=>{const{a:u,b:l}=i,c=a;if(r&&"complex64"===u.dtype){const m=c.texData.get(u.dataId),y=c.texData.get(l.dataId),[g,x]=[[m.complexTensorInfos.real,y.complexTensorInfos.real],[m.complexTensorInfos.imag,y.complexTensorInfos.imag]].map(S=>{const[k,_]=S,A={dataId:k.dataId,dtype:k.dtype,shape:u.shape},P={dataId:_.dataId,dtype:_.dtype,shape:l.shape},L=new _o(n,u.shape,l.shape);return c.runWebGLProgram(L,[A,P],pn(k.dtype,_.dtype))}),w=$s({inputs:{real:g,imag:x},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(x),w}const d=o||pn(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=s){const m=c.texData.get(u.dataId).values,y=c.texData.get(l.dataId).values,g="string"===u.dtype?lr(m):m,x="string"===u.dtype?lr(y):y,[w,S]=s(u.shape,l.shape,g,x,d),k=c.makeTensorInfo(S,d);return c.texData.get(k.dataId).values=w,k}let p;return p=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Mi(t,u.shape,l.shape,e):new _o(n,u.shape,l.shape),c.runWebGLProgram(p,[u,l],d)}}function au(n,t=!1){if("linear"===n)return t?xz:pz;if("relu"===n)return t?wz:mz;if("elu"===n)return t?bz:fz;if("relu6"===n)return t?vz:gz;if("prelu"===n)return t?i0:o0;if("leakyrelu"===n)return t?s0:r0;if("sigmoid"===n)return t?Cz:yz;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class a0{constructor(t,e,r,s=!1,o=!1,i=!1,a=null,u=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r,this.enableShapeUniforms=Zt(this.outputShape.length);const d=Math.ceil((s?t[1]:t[2])/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",m=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],y=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let g="",x="";a&&(g=u?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,x="result = activation(result);");const w=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),u&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let S="rc.x",k="rc.x";t[0]<e[0]?S=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(k=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${g}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${d}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${S};\n        int batchB = ${k};\n        for (int i = 0; i < ${d}; i++) {\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${m[0]} * ${y[0]});\n          result += (${m[1]} * ${y[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${w}\n\n        ${x}\n\n        setOutput(result);\n      }\n    `}}const u0={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class l0{constructor(t,e,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Be(e,r),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const c0="return a * b;";function cp(n){const{inputs:t,backend:e}=n,{a:r,b:s}=t,o=pn(r.dtype,s.dtype);if("complex64"===r.dtype){const a=e.texData.get(r.dataId),u=e.texData.get(s.dataId),l=new l0(u0.REAL,r.shape,s.shape),c=new l0(u0.IMAG,r.shape,s.shape),d=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:r.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:u.complexTensorInfos.real.dataId,dtype:u.complexTensorInfos.real.dtype,shape:s.shape},{dataId:u.complexTensorInfos.imag.dataId,dtype:u.complexTensorInfos.imag.dtype,shape:s.shape}],h=e.runWebGLProgram(l,d,"float32"),p=e.runWebGLProgram(c,d,"float32"),m=$s({inputs:{real:h,imag:p},backend:e});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),m}if(e.shouldExecuteOnCPU([r,s])){const a=e.texData.get(r.dataId),u=e.texData.get(s.dataId),[l,c]=F4(r.shape,s.shape,a.values,u.values,o),d=e.makeTensorInfo(c,o);return e.texData.get(d.dataId).values=l,d}let i;return i=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi(c0,r.shape,s.shape):new _o(c0,r.shape,s.shape),e.runWebGLProgram(i,[r,s],o)}const zz={kernelName:Z,backendName:"webgl",kernelFunc:cp};function le(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{shape:o}=r,i=e,a=j(s.shape),u=Rs(o,a),l=j(u);N(a===l,()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);const c=i.texData.get(s.dataId);return!c.isPacked||El(s.shape,u)||null!==c.texture&&El(c.shape,u)?(i.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):function Vz(n,t,e){const r=[Di(n.shape),...Pi(n.shape)],s={dtype:n.dtype,shape:r,dataId:n.dataId},o=[Di(t),...Pi(t)],i=new Zx(o,r),l=e.runWebGLProgram(i,[s],n.dtype,[r],!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(s,u,i)}const Wz={kernelName:ql,backendName:"webgl",kernelFunc:le};class d0{constructor(t,e){this.variableNames=["x"];const{windowSize:r,batchSize:s,inSize:o,outSize:i}=t;this.outputShape=[s,i];const a=4*Math.floor(r/4),u=r%4;let l="sumValue += dot(values, ones);";if(null!=e){const d=1/e;l=`sumValue += dot(values * ${Ir(d)?d.toPrecision(2):d}, ones);`}let c="";o%r>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${a}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${a};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Uz{constructor(t,e){this.variableNames=["x"];const{windowSize:r,batchSize:s,inSize:o,outSize:i}=t;this.outputShape=[s,i];let a="0.0",u="";"prod"===e?a="1.0":"min"===e?(a="1.0 / 1e-20",u="min"):"max"===e&&(a="-1.0 / 1e-20",u="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const c=4*Math.floor(r/4),d=r%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${u}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${u}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(a="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(a="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let m="";o%r>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${a};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${m}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        vec4 minMaxValue = vec4(${a});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===d}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===d}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===d}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function Eo(n,t,e,r){const s=function Gz(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],r=il(e);t.push({inSize:e,windowSize:r,outSize:Math.ceil(e/r)})}return t}(n.shape);let o=n;for(let i=0;i<s.length;i++){const{inSize:a,windowSize:u,outSize:l}=s[i];let c,d;c="mean"===e?0===i?new d0({windowSize:u,inSize:a,batchSize:n.shape[0],outSize:l},a):new d0({windowSize:u,inSize:a,batchSize:n.shape[0],outSize:l}):new Uz({windowSize:u,inSize:a,batchSize:n.shape[0],outSize:l},e),d=o,o=r.runWebGLProgram(c,[o],t),d.dataId!==n.dataId&&r.disposeIntermediateTensorInfo(d)}return o}class Hz{constructor(t,e){this.variableNames=["A"];const r=new Array(t.length);for(let i=0;i<r.length;i++)r[i]=t[e[i]];this.outputShape=r,this.rank=r.length;const s=xt(this.rank),o=function jz(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let s=0;s<n.length;s++)r[n[s]]=e[s];return r.join()}(e);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class Kz{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const r=new Array(t.length);for(let c=0;c<r.length;c++)r[c]=t[e[c]];if(this.outputShape=r,this.rank=r.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=xt(this.rank),o=Qx("rc",this.rank),i=new Array(this.rank);for(let c=0;c<e.length;c++)i[e[c]]=o[c];const a=`vec2(${i.slice(-2).join()})`,u=`++${o[this.rank-1]} < ${r[this.rank-1]}`,l=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${u}) {\n        result[1] = ${l};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${r[this.rank-2]}) {\n        result[2] = ${l};\n        if(${u}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Fl(n,t,e){const r=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Kz(n.shape,t):new Hz(n.shape,t);return e.runWebGLProgram(r,[n],n.dtype)}function Ll(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,keepDims:i}=r;return function Xz(n,t,e,r){const o=n.shape.length,i=at(t,n.shape);let a=i;const u=jt(a,o),l=null!=u;let c=n;l&&(c=Fl(n,u,r),a=Kt(a.length,o)),In("sum",a,o);const[d,h]=Pn(c.shape,a);let p=d;e&&(p=mn(d,i));const m=j(h),x=le({inputs:{x:c},attrs:{shape:[j(n.shape)/m,m]},backend:r}),S=Eo(x,Mu(n.dtype),"sum",r),k=le({inputs:{x:S},attrs:{shape:p},backend:r});return r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(S),l&&r.disposeIntermediateTensorInfo(c),k}(s,o,i,e)}const qz={kernelName:"Sum",backendName:"webgl",kernelFunc:Ll};function un(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{perm:o}=r,i=e,u=new Array(s.shape.length);for(let c=0;c<u.length;c++)u[c]=s.shape[o[c]];let l;if(i.shouldExecuteOnCPU([s])){const d=i.texData.get(s.dataId).values,h=up(d,s.shape,s.dtype,o,u);l=i.makeTensorInfo(u,s.dtype),i.texData.get(l.dataId).values=h}else l=Fl(s,o,i);return l}const Yz={kernelName:di,backendName:"webgl",kernelFunc:un},h0=1e3;function Bl({a:n,b:t,transposeA:e,transposeB:r,backend:s,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:u=null}){const l=n.shape.length,c=t.shape.length,d=e?n.shape[l-2]:n.shape[l-1],h=r?t.shape[c-1]:t.shape[c-2],p=e?n.shape[l-1]:n.shape[l-2],m=r?t.shape[c-2]:t.shape[c-1],y=n.shape.slice(0,-2),g=t.shape.slice(0,-2),x=j(y),w=j(g),k=Be(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,m]);N(d===h,()=>`Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${r} must match.`);const _=e?[x,d,p]:[x,p,d],A=r?[w,m,h]:[w,h,m],P=le({inputs:{x:n},backend:s,attrs:{shape:_}}),L=le({inputs:{x:t},backend:s,attrs:{shape:A}}),M=[P,L],W=Math.max(x,w),q=e?P.shape[1]:P.shape[2],re=null!=o,oe=null!=i,ge="leakyrelu"===u,Ie=null!=u?au(u,!0):null;let qe;if((1===p||1===m)&&q>h0&&!1===(re||oe||ge||null!=Ie)){let bt=P,Jt=L;e&&(bt=un({inputs:{x:P},backend:s,attrs:{perm:[0,2,1]}}),M.push(bt)),r&&(Jt=un({inputs:{x:L},backend:s,attrs:{perm:[0,2,1]}}),M.push(Jt));const Ao=1===m;let hu=bt;1!==m&&(hu=le({inputs:{x:bt},backend:s,attrs:{shape:[W,q,1]}}),M.push(hu));const bp=1===m?2:1;let wp=Jt;Ao&&(wp=le({inputs:{x:Jt},backend:s,attrs:{shape:[W,1,q]}}),M.push(wp));const Q0=cp({inputs:{a:hu,b:wp},backend:s});qe=Ll({inputs:{x:Q0},backend:s,attrs:{axis:bp,keepDims:!0}}),M.push(Q0)}else{const bt=pn(n.dtype,t.dtype),Jt=new a0(_,A,[W,p,m],e,r,re,Ie,oe,ge),ln=[P,L];if(null!=o&&ln.push(o),oe&&ln.push(i),ge){const Ao=s.makeTensorInfo([],"float32",pi(a,"float32"));ln.push(Ao),M.push(Ao)}qe=s.runWebGLProgram(Jt,ln,bt)}const Ye=le({inputs:{x:qe},backend:s,attrs:{shape:k}});M.push(qe);for(const bt of M)s.disposeIntermediateTensorInfo(bt);return Ye}const Zz={kernelName:Eu,backendName:"webgl",kernelFunc:function Qz(n){const{inputs:t,backend:e,attrs:r}=n,{a:s,b:o,bias:i,preluActivationWeights:a}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=r;return Bl({a:s,b:o,transposeA:u,transposeB:l,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:d,activation:c})}},p0="return abs(x);",eV={kernelName:"Abs",backendName:"webgl",kernelFunc:function Jz(n){const{inputs:t,backend:e}=n,{x:r}=t;if(e.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const o=e.texData.get(r.dataId),i=qx(o.values);return e.makeTensorInfo(r.shape,r.dtype,i)}let s;return s=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Ns(r.shape,p0):new vr(r.shape,p0),e.runWebGLProgram(s,[r],r.dtype)}},nV=nt({opSnippet:Mn+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),rV={kernelName:Ls,backendName:"webgl",kernelFunc:nV},oV=nt({opSnippet:Mn+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),iV={kernelName:Wo,backendName:"webgl",kernelFunc:oV},f0="return a + b;",aV=qt({opSnippet:f0,packedOpSnippet:f0,supportsComplex:!0,cpuKernelImpl:m4}),uV={kernelName:Gt,backendName:"webgl",kernelFunc:aV};class lV{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((o,i)=>`T${i}`);const r=[];this.variableNames.forEach(o=>{r.push(`float v${o} = get${o}AtOutCoords();`)});const s=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${r.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class cV{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((o,i)=>`T${i}`);const r=[];this.variableNames.forEach(o=>{r.push(`vec4 v${o} = get${o}AtOutCoords();`)});const s=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${r.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const dV={kernelName:wn,backendName:"webgl",kernelFunc:function Ml(n){const{inputs:t,backend:e}=n,r=t;if(1===r.length)return Tn({inputs:{x:r[0]},backend:e});if(r.length>z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const u=Math.floor(r.length/2),l=Ml({inputs:r.slice(0,u),backend:e}),c=Ml({inputs:r.slice(u),backend:e});return Ml({inputs:[l,c],backend:e})}const s=r.map(u=>u.dtype).reduce((u,l)=>pn(u,l)),o=r.map(u=>u.shape),a=z().getBool("WEBGL_PACK")?new cV(r[0].shape,o):new lV(r[0].shape,o);return e.runWebGLProgram(a,r,s)}},pV={kernelName:"All",backendName:"webgl",kernelFunc:function hV(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,keepDims:i}=r,a=s.shape.length,u=at(o,s.shape);let l=u;const c=jt(l,a);let d=s;null!=c&&(d=un({inputs:{x:s},backend:e,attrs:{perm:c}}),l=Kt(l.length,a)),In("all",l,a);const[h,p]=Pn(d.shape,l),y=le({inputs:{x:d},backend:e,attrs:{shape:[-1,j(p)]}}),g=Eo(y,y.dtype,"all",e);let x;return x=le(i?{inputs:{x:g},backend:e,attrs:{shape:mn(h,u)}}:{inputs:{x:g},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(d),x}},mV={kernelName:"Any",backendName:"webgl",kernelFunc:function fV(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,keepDims:i}=r,a=s.shape.length,u=at(o,s.shape);let l=u;const c=jt(l,a);let d=s;null!=c&&(d=un({inputs:{x:s},backend:e,attrs:{perm:c}}),l=Kt(l.length,a)),In("any",l,a);const[h,p]=Pn(d.shape,l),y=le({inputs:{x:d},backend:e,attrs:{shape:[-1,j(p)]}}),g=Eo(y,y.dtype,"any",e);let x;return x=le(i?{inputs:{x:g},backend:e,attrs:{shape:mn(h,u)}}:{inputs:{x:g},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(d),x}};class gV{constructor(t,e,r){this.variableNames=["A"];const{windowSize:s,batchSize:o,outSize:i}=t;r||this.variableNames.push("bestIndicesA"),this.outputShape=[o,i],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${r?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class yV{constructor(t,e,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,N(t.length>2,()=>`Packed arg${r.charAt(0).toUpperCase()+r.slice(1)} supports only inputs with rank above 2.`);const i=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),s||this.variableNames.push("bestIndicesA");const a=this.outputShape,u=a.length,l=xt(u),c=an("coords",u);let d,h;if(1===i){h=u+1;const L=xt(h);d=`\n        ${L} sourceLocR = ${L}(${c.join()}, 0);\n        ++${c[u-1]};\n        ${L} sourceLocG = ${L}(${c.join()}, 0);\n        ++${c[u-2]};\n        ${L} sourceLocA = ${L}(${c.join()}, 0);\n        --${c[u-1]};\n        ${L} sourceLocB = ${L}(${c.join()}, 0);\n        --${c[u-2]};`}else h=u,d=`\n        ${l} sourceLocR = coords;\n        ++${c[u-1]};\n        ${l} sourceLocG = coords;\n        ++${c[u-2]};\n        ${l} sourceLocA = coords;\n        --${c[u-1]};\n        ${l} sourceLocB = coords;\n        --${c[u-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),m="."+p[h-1],y=p.map(L=>"int "+L),g=an("sourceLocR",h-1).concat("inIdx.r"),x=an("sourceLocG",h-1).concat("inIdx.g"),w=an("sourceLocB",h-1).concat("inIdx.b"),S=an("sourceLocA",h-1).concat("inIdx.a"),k="max"===r?"greaterThan":"lessThan",_=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${w.join()}),\n                             getBestIndicesAChannel(${S.join()})));`,A=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${x.join()}) : 0.,\n            hasNextRow ? getAChannel(${w.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${S.join()}) : 0.)`,P=s?"":`\n      float getBestIndicesAChannel(${y.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${y.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${P}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[u-1]} < ${a[u-1]-1};\n        bool hasNextRow = ${c[u-2]} < ${a[u-2]-1};\n        ${d}\n        ivec4 srcIdx = ivec4(sourceLocR${m}, sourceLocG${m},\n          sourceLocB${m}, sourceLocA${m}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${A};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${_}\n          vec4 candidate = ${A};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${k}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function m0(n,t,e,r=null){let s=t.shape[0],o=t.shape[1];null!=r&&(s=r.shape[0],o=r.shape[1]);const i=il(o),a={windowSize:i,inSize:o,batchSize:s,outSize:Math.ceil(o/i)},u=new gV(a,e,null==r),l=[t];null!=r&&l.push(r);const c=n.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const d=m0(n,t,e,c);return n.disposeIntermediateTensorInfo(c),d}function g0(n,t,e,r=null){const s=null!=r?r.shape:t.shape,i=il(s[s.length-1]),a=new yV(s,i,e,null==r),l=n.runWebGLProgram(a,null==r?[t]:[t,r],"int32");if(l.shape.length===t.shape.length){const c=g0(n,t,e,l);return n.disposeIntermediateTensorInfo(l),c}return l}function y0(n,t,e,r){const s=[e];if(In("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!z().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const o=[],i=n.texData.get(t.dataId);let u=t;null!==i&&i.isPacked&&(u=n.unpackTensor(t),o.push(u));const[l,c]=Pn(u.shape,s),d=j(c),h=le({inputs:{x:u},backend:n,attrs:{shape:[-1,d]}});o.push(h);const p=m0(n,h,r);o.push(p);const m=le({inputs:{x:p},backend:n,attrs:{shape:l}});return o.forEach(y=>n.disposeIntermediateTensorInfo(y)),m}return g0(n,t,r)}const bV={kernelName:Ms,backendName:"webgl",kernelFunc:function xV(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o}=r;let i=at(o,s.shape);const a=jt(i,s.shape.length);let u=s;const l=[];null!=a&&(u=un({inputs:{x:s},backend:e,attrs:{perm:a}}),l.push(u),i=Kt(i.length,u.shape.length)),In("argMax",[i[0]],u.shape.length);const c=y0(e,u,i[0],"max");return l.forEach(d=>e.disposeIntermediateTensorInfo(d)),c}},vV={kernelName:Uo,backendName:"webgl",kernelFunc:function wV(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o}=r;let i=at(o,s.shape);const a=jt(i,s.shape.length);let u=s;const l=[];null!=a&&(u=un({inputs:{x:s},backend:e,attrs:{perm:a}}),l.push(u),i=Kt(i.length,u.shape.length)),In("argMin",[i[0]],u.shape.length);const c=y0(e,u,i[0],"min");return l.forEach(d=>e.disposeIntermediateTensorInfo(d)),c}},SV=nt({opSnippet:Mn+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),IV={kernelName:zs,backendName:"webgl",kernelFunc:SV},NV=nt({opSnippet:Mn+"return log(x + sqrt(x * x + 1.0));"}),$V={kernelName:vn,backendName:"webgl",kernelFunc:NV},TV=nt({opSnippet:Mn+"\n  return atan(x);\n"}),EV={kernelName:Go,backendName:"webgl",kernelFunc:TV},DV=qt({opSnippet:lp+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+To+"\n  return result;\n"}),PV={kernelName:Cn,backendName:"webgl",kernelFunc:DV},FV=nt({opSnippet:Mn+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),LV={kernelName:es,backendName:"webgl",kernelFunc:FV};class uu{constructor(t,e,r,s=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&r)throw new Error("Cannot compute positions for average pool.");const i=t.filterWidth,a=t.strideHeight,u=t.strideWidth,l=t.dilationHeight,c=t.dilationWidth,d=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;const y="avg"===e;let w="0.0";if(y||(w="-1.0 / 1e-20"),r)return void(this.userCode=`\n        const ivec2 strides = ivec2(${a}, ${u});\n        const ivec2 pads = ivec2(${p}, ${m});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${d};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?o?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let k=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(k="avgValue / max(count, 1.0)");const _=4*Math.floor(i/4),A=i%4,P=`\n      if (${y}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${u});\n      const ivec2 pads = ivec2(${p}, ${m});\n      const float initializationValue = ${w};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${w});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${d};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${_}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${P}\n          }\n\n          int xC = xCCorner + ${_};\n          if (${1===A}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${P}\n          } else if (${2===A}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${P}\n          } else if (${3===A}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${P}\n          }\n        }\n        setOutput(${k});\n      }\n    `}}class dp{constructor(t,e,r,s=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&r)throw new Error("Cannot compute positions for average pool.");const i=t.filterWidth,a=t.strideDepth,u=t.strideHeight,l=t.strideWidth,c=t.dilationDepth,d=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,m=t.effectiveFilterHeight,y=t.effectiveFilterWidth,g=t.padInfo.front,x=t.padInfo.top,w=t.padInfo.left;this.outputShape=t.outShape;const S="avg"===e;let k="0.0";if(S||(k="-1.0 / 1e-20"),r)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${a}, ${u}, ${l});\n        const ivec3 pads = ivec3(${g}, ${x}, ${w});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${m};\n                wR += ${d}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${y};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${m} * ${y} +\n                      wR * ${y} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let A=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(A="avgValue / max(count, 1.0)");const P=4*Math.floor(i/4),L=i%4,M=`\n      if (${S}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${a}, ${u}, ${l});\n      const ivec3 pads = ivec3(${g}, ${x}, ${w});\n      const float initializationValue = ${k};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${k});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${m};\n            wR += ${d}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${P}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${M}\n            }\n\n            int xC = xCCorner + ${P};\n            if (${1===L}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${M}\n            } else if (${2===L}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${M}\n            } else if (${3===L}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${M}\n            }\n          }\n        }\n        setOutput(${A});\n      }\n    `}}const MV={kernelName:ts,backendName:"webgl",kernelFunc:function BV(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t;ou(s,"avgPool");const{filterSize:o,strides:i,pad:a,dimRoundingMode:u}=r;N(nn(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=Hn(s.shape,o,i,1,a,u);if(1===c.filterWidth&&1===c.filterHeight&&ot(c.inShape,c.outShape))return Tn({inputs:{x:s},backend:e});const d=new uu(c,"avg",!1);return e.runWebGLProgram(d,[s],"float32")}},VV={kernelName:Ho,backendName:"webgl",kernelFunc:function zV(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{filterSize:o,strides:i,pad:a,dimRoundingMode:u,dataFormat:l}=r,d=zr(s.shape,o,i,[1,1,1],a,u,l),h=new dp(d,"avg",!1);return e.runWebGLProgram(h,[s],"float32")}};class WV{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const u=t.effectiveFilterHeight,l=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${u-1-t.padInfo.top}, ${l-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${u};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class UV{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const d=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${d-1-t.padInfo.front}, ${h-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const HV={kernelName:jo,backendName:"webgl",kernelFunc:function GV(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,input:o}=t,i=o,{filterSize:a,strides:u,pad:l,dimRoundingMode:c}=r,h=zr(i.shape,a,u,[1,1,1],l,c),p=new UV(h);return e.runWebGLProgram(p,[s],i.dtype)}},KV={kernelName:wu,backendName:"webgl",kernelFunc:function jV(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,input:o}=t,i=o;ou([s,o],"avgPoolGrad");const{filterSize:a,strides:u,pad:l}=r,c=Hn(i.shape,a,u,1,l),d=new WV(c);return e.runWebGLProgram(d,[s],i.dtype)}},qV={kernelName:Ki,backendName:"webgl",kernelFunc:function XV(n){const{inputs:t,backend:e,attrs:r}=n,{a:s,b:o}=t,{transposeA:i,transposeB:a}=r;return Bl({a:s,b:o,transposeA:i,transposeB:a,backend:e})}};class YV{constructor(t,e,r,s,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],Be(t,e),Be(t,r);let a="0.0";null!=s&&(Be(t,s),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let u="1.0";null!=o&&(Be(t,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${a};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class QV{constructor(t,e,r,s,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Be(t,e),Be(t,r);let a="vec4(0.0)";null!=s&&(Be(t,s),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=o&&(Be(t,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${a};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const ZV={kernelName:oi,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:r,mean:s,variance:o,offset:i,scale:a}=n;N(s.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),N(null==i||s.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),N(null==a||s.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:u}=e;null==u&&(u=.001);const l=[r,s,o];let c=null;null!=i&&(c=i.shape,l.push(i));let d=null;null!=a&&(d=a.shape,l.push(a));const h=z().getBool("WEBGL_PACK_NORMALIZATION")?new QV(r.shape,s.shape,o.shape,c,d,u):new YV(r.shape,s.shape,o.shape,c,d,u);return t.runWebGLProgram(h,l,l[0].dtype)}};class JV{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=xt(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const r=function eW(n){if(1===n)return"sourceLoc";if(n<=6)return hp.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((i,a)=>`sourceLoc.${hp[a]} = start[${a}] + coords.${hp[a]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}}const hp=["x","y","z","w","u","v"];class tW{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=xt(this.rank),r=an("coords",this.rank),s=an("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,i=`getChannel(getSource(${s.join()}), ${o})`,a=`\n      result.x = ${i};\n      if (++${r[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${i};\n        --${s[this.rank-1]};\n      }\n    `,u=1===this.rank?"":`\n      --${r[this.rank-1]};\n      if (++${r[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${i};\n        if (++${r[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${i};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,d)=>`start[${d}]`).join()});`:t.map((c,d)=>`${s[d]} = ${r[d]} + start[${d}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${a}\n        ${u}\n        setOutput(result);\n      }\n    `}}function Vi(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{begin:o,size:i}=r,[a,u]=Hu(s,o,i);if(Gu(s,a,u),0===j(u))return e.makeTensorInfo(u,s.dtype,[]);if(e.shouldExecuteOnCPU([s])||"string"===s.dtype){const d=e.texData.get(s.dataId),h=K4(d.values,a,u,s.shape,s.dtype);return e.makeTensorInfo(u,s.dtype,h)}const{isPacked:l}=e.texData.get(s.dataId),c=dd(s.shape,a,u);if(l||!c){const d=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tW(u):new JV(u);return e.runWebGLProgram(d,[s],s.dtype,[a])}return e.uploadToGPU(s.dataId),function nW(n,t,e,r){const s=r.texData.get(n.dataId),o=r.makeTensorInfo(e,n.dtype),i=r.texData.get(o.dataId);Object.assign(i,s),i.refCount=1,i.shape=e,i.dtype=n.dtype;let a=hd(t,pt(n.shape));s.slice&&(a+=s.slice.flatOffset),i.slice={flatOffset:a,origDataId:s.slice&&s.slice.origDataId||n.dataId};const u=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,u+1),o}(s,a,u,e)}const rW={kernelName:Nu,backendName:"webgl",kernelFunc:Vi},sW={kernelName:Xi,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{blockShape:o,crops:i}=r;N(s.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const a=o.reduce((w,S)=>w*S),u=Ha(s.shape,o,a),l=ja(u.length,o.length),c=Ka(s.shape,o,a),d=Hd(i,o.length),h=jd(c,i,o.length),p=[],m=le({inputs:{x:s},backend:e,attrs:{shape:u}}),y=un({inputs:{x:m},backend:e,attrs:{perm:l}}),g=le({inputs:{x:y},backend:e,attrs:{shape:c}}),x=Vi({inputs:{x:g},backend:e,attrs:{begin:d,size:h}});return p.push(m),p.push(y),p.push(g),p.forEach(w=>e.disposeIntermediateTensorInfo(w)),x}},iW={kernelName:Ko,backendName:"webgl",kernelFunc:function oW(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,weights:o}=t,{size:i}=r,a=e.readSync(s.dataId),u=e.readSync(o.dataId),l=Xx(a,u,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,l)}},cW={kernelName:Vs,backendName:"webgl",kernelFunc:function lW(n){const{inputs:t,backend:e}=n,{a:r,b:s}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS"),i=z().getNumber("WEBGL_VERSION");if(e.shouldExecuteOnCPU([r,s])||1===i){const u=e.texData.get(r.dataId).values,l=e.texData.get(s.dataId).values,[c,d]=y4(r.shape,s.shape,u,l,r.dtype),h=e.makeTensorInfo(d,r.dtype);return e.texData.get(h.dataId).values=c,h}let a;return a=o?new Mi("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",r.shape,s.shape,!1):new _o("\n  return float(int(a.r) & int(b.r));\n",r.shape,s.shape),e.runWebGLProgram(a,[r,s],r.dtype)}},hW={kernelName:Xo,backendName:"webgl",kernelFunc:function dW(n){const{inputs:t,backend:e}=n,{s0:r,s1:s}=t,o=e.readSync(r.dataId),i=e.readSync(s.dataId),a=Be(Array.from(o),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}},x0=qt({opSnippet:"return float(a != b);",cpuKernelImpl:B4,dtype:"bool"}),pW={kernelName:$e,backendName:"webgl",kernelFunc:x0};function lu(n){const{inputs:t,backend:e}=n,{input:r}=t;return Tn({inputs:{x:e.texData.get(r.dataId).complexTensorInfos.real},backend:e})}const fW={kernelName:ci,backendName:"webgl",kernelFunc:lu},yW={kernelName:Bt,backendName:"webgl",kernelFunc:function pp(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{dtype:o}=r;if("complex64"===o){if("complex64"===s.dtype)return Tn({inputs:{x:s},backend:e});const i=Ur(s.shape),a=pp({inputs:{x:s},backend:e,attrs:{dtype:"float32"}}),u=$s({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeIntermediateTensorInfo(a),u}if("complex64"===s.dtype){const i=lu({inputs:{input:s},backend:e}),a=pp({inputs:{x:i},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(i),a}if(!kr(s.dtype,o)){const i=Tn({inputs:{x:s},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:o}}if(e.shouldExecuteOnCPU([s])){const i=e.texData.get(s.dataId).values,[a,u,l]=x4(i,s.shape,s.dtype,o);return e.makeTensorInfo(a,u,l)}if("int32"===o)return function gW(n,t){const e=new vr(n.shape,"return float(int(x));"),r=t.runWebGLProgram(e,[n],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(s,e);if("bool"===o){const i=e.makeTensorInfo([],"bool",dn("bool",1)),u=x0({inputs:{a:s,b:i},backend:e});return e.disposeIntermediateTensorInfo(i),u}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${o}`)}},b0="return ceil(x);",xW=nt({opSnippet:b0,packedOpSnippet:b0,cpuKernelImpl:b4}),bW={kernelName:ns,backendName:"webgl",kernelFunc:xW};class wW{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class vW{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const SW={kernelName:qo,backendName:"webgl",kernelFunc:function CW(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{clipValueMin:o,clipValueMax:i}=r;let a;return a=z().getBool("WEBGL_PACK_CLIP")?new vW(s.shape):new wW(s.shape),e.runWebGLProgram(a,[s],s.dtype,[[o],[i]])}};class IW{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function w0(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const NW={kernelName:Yo,backendName:"webgl",kernelFunc:function kW(n){const{inputs:t,backend:e}=n,{x:r}=t,s=e.texData.get(r.dataId),o=new IW(r.shape),i=[w0(r,s.complexTensorInfos.real),w0(r,s.complexTensorInfos.imag)];return e.runWebGLProgram(o,i,i[0].dtype)}};class $W{constructor(t){this.outputShape=[],this.outputShape=Xn(t,1),this.variableNames=t.map((i,a)=>`T${a}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+t[i][1];const r=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++)r.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${e[i-1]}));`);r.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${r.join("\n        ")}\n      }\n    `}}class _W{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Xn(t,e);const r=this.outputShape,s=r.length,o=xt(s),i=an("coords",s),a=["x","y","z","w","u","v"].slice(0,s);this.variableNames=t.map((y,g)=>`T${g}`);const u=new Array(t.length-1);u[0]=t[0][e];for(let y=1;y<u.length;y++)u[y]=u[y-1]+t[y][e];const l=a[e],c=a.slice(-2),d=a.join();let h=`if (${l} < ${u[0]}) {\n        return getChannel(\n            getT0(${d}), vec2(${c.join()}));\n        }`;for(let y=1;y<u.length;y++){const g=u[y-1];h+=`\n        if (${l} < ${u[y]}  && ${l} >= ${u[y-1]}) {\n          return getChannel(\n            getT${y}(${zl(a,l,g)}),\n            vec2(${zl(c,l,g)}));\n        }`}const m=u[u.length-1];h+=`\n        return getChannel(\n          getT${u.length}(${zl(a,l,m)}),\n          vec2(${zl(c,l,m)}));`,this.userCode=`\n      float getValue(${a.map(y=>"int "+y)}) {\n        ${h}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[s-1]} = ${i[s-1]} + 1;\n        if (${i[s-1]} < ${r[s-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[s-2]} = ${i[s-2]} + 1;\n        if (${i[s-2]} < ${r[s-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[s-1]} = ${i[s-1]} - 1;\n        if (${i[s-2]} < ${r[s-2]} &&\n            ${i[s-1]} < ${r[s-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function zl(n,t,e){const r=n.indexOf(t);return n.map((o,i)=>i===r?`${o} - ${e}`:o).join()}function Vl(n){const{inputs:t,backend:e}=n,{input:r}=t;return Tn({inputs:{x:e.texData.get(r.dataId).complexTensorInfos.imag},backend:e})}const TW={kernelName:ai,backendName:"webgl",kernelFunc:Vl};function cu(n,t,e){const r=n[0].dtype;if("complex64"===r){const p=n.map(w=>lu({inputs:{input:w},backend:e})),m=n.map(w=>Vl({inputs:{input:w},backend:e})),y=cu(p,t,e),g=cu(m,t,e),x=$s({inputs:{real:y,imag:g},backend:e});return p.forEach(w=>e.disposeIntermediateTensorInfo(w)),m.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),x}let s=e.shouldExecuteOnCPU(n);if("string"===r&&(s=!0),s){const p=n.map(k=>{const A=[-1,j(k.shape.slice(t))];return le({inputs:{x:k},backend:e,attrs:{shape:A}})}),m=p.map(k=>({vals:e.readSync(k.dataId),shape:k.shape})),y=Xn(p.map(k=>k.shape),1),x=w4(m,y,r,1===p[0].shape[0]),w=Xn(n.map(k=>k.shape),t),S=e.makeTensorInfo(w,r,x);return p.forEach(k=>e.disposeIntermediateTensorInfo(k)),S}const o=n.filter(p=>j(p.shape)>0),i=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&o[0].shape.length>1;if(1===o.length){const p=i?new vr(n[0].shape,ks):new Ns(n[0].shape,ks);return e.runWebGLProgram(p,n,r)}const a=z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(o.length>a){const p=[];for(let y=0;y<o.length;y+=a){const g=o.slice(y,y+a);p.push(cu(g,t,e))}const m=cu(p,t,e);for(const y of p)e.disposeIntermediateTensorInfo(y);return m}if(i){const p=new _W(o.map(m=>m.shape),t);return e.runWebGLProgram(p,o,r)}const{tensors2D:u,outShape:l}=function EW(n,t,e){const r=Xn(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>le({inputs:{x:o},attrs:{shape:[-1,j(o.shape.slice(t))]},backend:e})),outShape:r}}(o,t,e),c=new $W(u.map(p=>p.shape)),d=e.runWebGLProgram(c,u,r);u.forEach(p=>e.disposeIntermediateTensorInfo(p));const h=le({inputs:{x:d},attrs:{shape:l},backend:e});return e.disposeIntermediateTensorInfo(d),h}function v0(n){const{inputs:t,backend:e,attrs:r}=n,{axis:s}=r,o=at(s,t[0].shape)[0];Wd(t.map(l=>l.shape),o);const a=Xn(t.map(l=>l.shape),o);if(0===j(a))return e.makeTensorInfo(a,t[0].dtype,[]);const u=t.filter(l=>j(l.shape)>0);return 1===u.length?Tn({inputs:{x:u[0]},backend:e}):cu(u,o,e)}const RW={kernelName:Qo,backendName:"webgl",kernelFunc:v0};class C0{constructor(t,e=!1,r=null,s=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const i=t.padInfo.top,a=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,d=t.dilationWidth,h=t.filterHeight,p=t.filterWidth,m=4*Math.floor(t.inChannels/4),y=t.inChannels%4,g="channelsLast"===t.dataFormat,x=g?1:2,w=g?2:3,S=g?3:1;let k="",_="";r&&(k=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${r}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${r}\n        }`:`\n          float activation(float x) {\n            ${r}\n          }\n        `,_="result = activation(result);");const A=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${k}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${S}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${x}], coords[${w}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${d};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${m}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${g}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===y}) {\n\n              if (${g}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${m}) *\n                    getW(wR, wC, ${m}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${m}, xR, xC) *\n                    getW(wR, wC, ${m}, d2);\n              }\n\n            } else if (${2===y}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${m}, d2),\n                getW(wR, wC, ${m} + 1, d2)\n              );\n\n              if (${g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${m}),\n                  getX(batch, xR, xC, ${m} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${m}, xR, xC),\n                  getX(batch, ${m} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===y}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${m}, d2),\n                getW(wR, wC, ${m} + 1, d2),\n                getW(wR, wC, ${m} + 2, d2)\n              );\n\n              if (${g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${m}),\n                  getX(batch, xR, xC, ${m} + 1),\n                  getX(batch, xR, xC, ${m} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${m}, xR, xC),\n                  getX(batch, ${m} + 1, xR, xC),\n                  getX(batch, ${m} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${A}\n        ${_}\n        setOutput(result);\n      }\n    `}}class AW{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,r=t.padInfo.top,s=t.padInfo.left,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,u=t.dilationDepth,l=t.dilationHeight,c=t.dilationWidth,d=t.filterDepth,h=t.filterHeight,p=t.filterWidth,m=4*Math.floor(t.inChannels/4),y=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${i}, ${a});\n      const ivec3 pads = ivec3(${e}, ${r}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${d}; wF++) {\n          int xF = xFCorner + wF * ${u};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${m}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===y}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${m}) *\n                  getW(wF, wR, wC, ${m}, d2);\n              } else if (${2===y}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${m}),\n                  getX(batch, xF, xR, xC, ${m} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${m}, d2),\n                  getW(wF, wR, wC, ${m} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===y}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${m}),\n                  getX(batch, xF, xR, xC, ${m} + 1),\n                  getX(batch, xF, xR, xC, ${m} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${m}, d2),\n                  getW(wF, wR, wC, ${m} + 1, d2),\n                  getW(wF, wR, wC, ${m} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class S0{constructor(t,e=!1,r=null,s=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Zt(this.outputShape.length);const i=t.padInfo.left,a=t.strideWidth,u=t.dilationWidth,l=t.filterHeight,c=t.filterWidth,d=c;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let g=0;g<c;g++)h+=`\n           vec4 xTexelC${2*g};\n           int xTexelC${2*g}Ready;\n           vec4 xTexelC${2*g+1};\n           int xTexelC${2*g+1}Ready;\n           vec4 xC${g};`;h+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {\n       `;for(let g=0;g<c;g++)h+=`\n           xTexelC${2*g} = vec4(0.0);\n           xTexelC${2*g}Ready = 0;\n           xTexelC${2*g+1} = vec4(0.0);\n           xTexelC${2*g+1}Ready = 0;\n           xC${g} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let g=0;g<(d+1)/2;g++){const x=2*g;if(h+=`\n           xC = xCCorner + ${x*u};\n           `,1===a){if(x<c&&(i%2==1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                   xTexelC${x} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${x}.zw = vec2(0.0);\n                   }\n                   xTexelC${x}Ready = 1;\n                 }\n               `,h+=1===u&&x>0?`\n                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);\n                   } else {\n                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                   xTexelC${x} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${x}.zw = vec2(0.0);\n                   }\n                   xTexelC${x}Ready = 1;\n                 }\n\n                 xC${x} = xTexelC${x};\n                 `,x+1<c)){const w=i%2==0?Po(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${w};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${x+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${x+1}Ready = 1;\n                   }\n                   `,h+=u>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);\n                     } else {\n                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);\n                     }\n                     `:`\n                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);\n                     `):h+=1===w?`\n                     xC${x+1} = xTexelC${x};\n                     `:`\n                     xCOffset = xC + ${w};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${x+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${x+1}Ready = 1;\n                     }\n\n                     xC${x+1} = xTexelC${x+1};\n                     `}}else x<c&&(i%2==1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                   xTexelC${x} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${x}.zw = vec2(0.0);\n                   }\n                   xTexelC${x}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {\n                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${x+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${x+1}Ready = 1;\n                 }\n\n                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n               `,x+1<c&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                   xTexelC${x} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${x}.zw = vec2(0.0);\n                   }\n                   xTexelC${x}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${x+1}.zw = vec2(0.);\n                   }\n                   xTexelC${x+1}Ready = 1;\n                 }\n\n                 xC${x} = vec4(\n                   xTexelC${x}.xy, xTexelC${x+1}.xy);\n               `,x+1<c&&(h+=`\n                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n                 `)));x<c&&(h+=`\n             wTexel = getW(r, ${x}, d1, d2);\n             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${t.inChannels}) {\n               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,x+1<c&&(h+=`\n               wTexel = getW(r, ${x+1}, d1, d2);\n               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${t.inChannels}) {\n                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let p="",m="";r&&(p=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${r}\n         }`:o?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${r}\n         }`:`vec4 activation(vec4 x) {\n           ${r}\n         }`,m="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${y}\n         ${m}\n         setOutput(result);\n       }\n     `}}class DW{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=Zt(this.outputShape.length);const{dataFormat:r}=e,s=on(),o="channelsLast"===r,i=o?1:2,a=o?2:3,u=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;let l="";for(let c=0;c<=1;c++)for(let d=0;d<=1;d++)l+=`\n          blockIndex = rc.z + ${d};\n          pos = rc.y + ${c};\n\n          ${u}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${i}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${a}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+d}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+d}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function Wl(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function I0({x:n,filter:t,convInfo:e,backend:r,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:a=null}){const u=n.shape,l=r.texData.get(n.dataId),c=e.inChannels,d=u[0]*u[1]*u[2],h=e.outChannels,p="channelsLast"===e.dataFormat;let g;const x=[];if(null!=o){const k=Wl(o.shape,p);null!=k&&(o=le({inputs:{x:o},backend:r,attrs:{shape:k}}),x.push(o))}if(null!=s){const k=Wl(s.shape,p);null!=k&&(s=le({inputs:{x:s},backend:r,attrs:{shape:k}}),x.push(s))}if((1!==d&&1!==h||!(c>h0))&&l.isPacked&&p&&null!=l.texture&&u[2]%2!=0&&ot(l.shape.slice(-3),u.slice(-3))){const _={dataId:n.dataId,shape:[1,u[0]*u[1]*(u[2]+1),e.inChannels],dtype:n.dtype},A=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,N(El(l.shape,_.shape),()=>`packed reshape ${l.shape} to ${_.shape} isn't free`);const P=le({inputs:{x:t},backend:r,attrs:{shape:[1,e.inChannels,e.outChannels]}});x.push(P);const L=Bl({a:_,b:P,backend:r,transposeA:!1,transposeB:!1,bias:s,activation:a,preluActivationWeights:o,leakyreluAlpha:i}),M=r.texData.get(L.dataId);N(M.isPacked,()=>"batchMatMul result is expected to be packed"),l.shape=A,M.shape=e.outShape,g=Tn({inputs:{x:L},backend:r}),g.shape=e.outShape,x.push(L)}else{const k=e.outHeight*e.outWidth,_=le({inputs:{x:n},backend:r,attrs:{shape:p?[e.batchSize,k,e.inChannels]:[e.batchSize,e.inChannels,k]}}),A=le({inputs:{x:t},backend:r,attrs:{shape:[1,e.inChannels,e.outChannels]}}),P=Bl({a:p?_:A,b:p?A:_,transposeA:!p,transposeB:!1,backend:r,bias:s,activation:a,preluActivationWeights:o,leakyreluAlpha:i});g=le({inputs:{x:P},backend:r,attrs:{shape:e.outShape}}),x.push(_),x.push(A),x.push(P)}for(const k of x)r.disposeIntermediateTensorInfo(k);return g}function k0({x:n,filter:t,convInfo:e,backend:r,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:a=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:d,outHeight:h,dataFormat:p}=e,m="channelsLast"===p,y=u*l*c,g=h*d,x=[e.batchSize,y,g],k=[];if(null!=o){const Ye=Wl(o.shape,m);null!=Ye&&(o=le({inputs:{x:o},backend:r,attrs:{shape:Ye}}),k.push(o))}if(null!=s){const Ye=Wl(s.shape,m);null!=Ye&&(s=le({inputs:{x:s},backend:r,attrs:{shape:Ye}}),k.push(s))}const _=le({inputs:{x:t},backend:r,attrs:{shape:[1,y,j(t.shape)/y]}});k.push(_);const A=new DW(x,e),L=r.runWebGLProgram(A,[n],"float32",[n.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),M=le({inputs:{x:L},backend:r,attrs:{shape:x}});k.push(L),k.push(M);const W=null!=s,q=null!=o,re="leakyrelu"===a,oe=a?au(a,!0):null,ge=new a0(m?M.shape:_.shape,m?_.shape:M.shape,m?[e.batchSize,g,e.outChannels]:[e.batchSize,e.outChannels,g],!0,!1,W,oe,q,re),Ie=m?[M,_]:[_,M];if(s&&Ie.push(s),q&&Ie.push(o),re){const Ye=r.makeTensorInfo([],"float32",pi(i,"float32"));Ie.push(Ye),k.push(Ye)}const ve=r.runWebGLProgram(ge,Ie,"float32"),qe=le({inputs:{x:ve},backend:r,attrs:{shape:e.outShape}});k.push(ve);for(const Ye of k)r.disposeIntermediateTensorInfo(Ye);return qe}const OW={kernelName:qi,backendName:"webgl",kernelFunc:function PW(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o}=t,{strides:i,pad:a,dataFormat:u,dilations:l,dimRoundingMode:c}=r,d=ur(u),h=Ft(s.shape,o.shape,i,l,a,c,!1,d);let p;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===d&&z().getBool("WEBGL_EXP_CONV")){const y=new S0(h);p=e.runWebGLProgram(y,[s,o],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}else if(z().getBool("WEBGL_CONV_IM2COL"))p=k0({x:s,filter:o,convInfo:h,backend:e});else{const y=new C0(h);p=e.runWebGLProgram(y,[s,o],"float32")}else p=I0({x:s,filter:o,convInfo:h,backend:e});const m=le({inputs:{x:p},backend:e,attrs:{shape:h.outShape}});return e.disposeIntermediateTensorInfo(p),m}};class FW{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              ${"channelsLast"===t.dataFormat?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LW{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,r=t.filterWidth,i="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${i?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${i?1:2}], coords[${i?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${r} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${i}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class BW{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class MW{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,r=t.filterHeight,s=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${r-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${r}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${r} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const VW={kernelName:Yi,backendName:"webgl",kernelFunc:function zW(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,dy:o}=t,{strides:i,pad:a,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,d=ur(u),h=Ft(s.shape,c,i,1,a,l,!1,d),p=new FW(h);return e.runWebGLProgram(p,[s,o],"float32")}};class WW{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=Zt(this.outputShape.length);const e=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            int wCPerm = ${r} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const GW={kernelName:Zo,backendName:"webgl",kernelFunc:function UW(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,filter:o}=t,{inputShape:i,strides:a,pad:u,dataFormat:l,dimRoundingMode:c}=r,d=ur(l),h=Ft(i,o.shape,a,1,u,c,!1,d);if(z().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===d){const p=[[h.strideHeight,h.strideWidth]],m=new WW(h);return e.runWebGLProgram(m,[s,o],"float32",p)}{const p=new LW(h);return e.runWebGLProgram(p,[s,o],"float32")}}},jW={kernelName:Jo,backendName:"webgl",kernelFunc:function HW(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o}=t,{strides:i,pad:a,dilations:u}=r,l=gs(s.shape,o.shape,i,u,a),c=new AW(l);return e.runWebGLProgram(c,[s,o],"float32")}},XW={kernelName:Ws,backendName:"webgl",kernelFunc:function KW(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,dy:o}=t,{strides:i,pad:a,filterShape:u}=r,l=gs(s.shape,u,i,1,a),c=new BW(l);return e.runWebGLProgram(c,[s,o],"float32")}},YW={kernelName:ei,backendName:"webgl",kernelFunc:function qW(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,filter:o}=t,{pad:i,strides:a,inputShape:u}=r,l=gs(u,o.shape,a,1,i),c=new MW(l);return e.runWebGLProgram(c,[s,o],"float32")}},eU={kernelName:"Cos",backendName:"webgl",kernelFunc:nt({opSnippet:zi+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${To}\n  return result;\n`})},tU=nt({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),nU={kernelName:Ar,backendName:"webgl",kernelFunc:tU};class rU{constructor(t,e,r,s,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[i,a,u,l]=t,[c]=e,[d,h]=r;this.outputShape=[c,d,h,l];const p="bilinear"===s?1:0,[m,y]=[a-1+".0",u-1+".0"],[g,x,w]=d>1?[""+(a-1)/(d-1),"(y2-y1) * height_ratio",`y1*${m} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${m}`],[S,k,_]=h>1?[""+(u-1)/(h-1),"(x2-x1) * width_ratio",`x1*${y} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${y}`];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${S});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${i}) {\n          return;\n        }\n\n        float height_scale = ${x};\n        float width_scale = ${k};\n\n        float in_y = ${w};\n        if( in_y < 0.0 || in_y > ${m} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${_};\n        if( in_x < 0.0 || in_x > ${y} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const sU={kernelName:Ji,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{image:s,boxes:o,boxInd:i}=t,{cropSize:a,method:u,extrapolationValue:l}=r,c=new rU(s.shape,o.shape,a,u,l);return e.runWebGLProgram(c,[s,o,i],"float32")}};var Ul=function(n){return n.Prod="*",n.Sum="+",n}(Ul||{});class N0{constructor(t,e,r,s){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,a=r?this.op===Ul.Prod?"1.0":"0.0":`getX(${$0(o,"coords",this.op)})`,u=this.outputShape[this.outputShape.length-1];let l="",c="";r?(l=s?"end != "+(u-1):"end != 0",c=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${u}`:"end >= pow2",c=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${xt(o)} coords = getOutputCoords();\n        int end = ${_0(o,"coords",this.op)};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${c};\n          ${_0(o,"coords",this.op)} = idx;\n          val ${this.op}= getX(${$0(o,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function $0(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function _0(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function T0(n,t,e,r,s,o){const i=t.shape.length,a=jt([r],i);let u=t;null!=a&&(u=un({inputs:{x:t},backend:e,attrs:{perm:a}}));const l=Kt(1,i)[0];if(l!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const c=u.shape[l];let d=Tn({inputs:{x:u},backend:e});for(let h=0;h<=Math.ceil(Math.log2(c))-1;h++){const p=new N0(n,u.shape,!1,o),y=d;d=e.runWebGLProgram(p,[d],d.dtype,[[h]]),e.disposeIntermediateTensorInfo(y)}if(s){const h=new N0(n,u.shape,s,o),p=d;d=e.runWebGLProgram(h,[d],d.dtype),e.disposeIntermediateTensorInfo(p)}if(null!=a){const p=un({inputs:{x:d},backend:e,attrs:{perm:Ba(a)}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(u),p}return d}const iU={kernelName:Qi,backendName:"webgl",kernelFunc:function oU(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,exclusive:i,reverse:a}=r;return T0(Ul.Prod,s,e,o,i,a)}},uU={kernelName:Zi,backendName:"webgl",kernelFunc:function aU(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,exclusive:i,reverse:a}=r;return T0(Ul.Sum,s,e,o,i,a)}},cU={kernelName:ea,backendName:"webgl",kernelFunc:function lU(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,weights:o}=t,{size:i,binaryOutput:a}=r;if(1===s.shape.length){const u=e.readSync(s.dataId),l=e.readSync(o.dataId),c=Xx(u,l,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,c)}if(2===s.shape.length){const u=e.bufferSync(s),l=e.bufferSync(o),c=g4(u,l,i,a);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class dU{constructor(t,e,r){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=r,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const pU={kernelName:Us,backendName:"webgl",kernelFunc:function hU(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{blockSize:o,dataFormat:i}=r,a=s.shape[0],d=("NHWC"===i?s.shape[1]:s.shape[2])*o,h=("NHWC"===i?s.shape[2]:s.shape[3])*o,p=("NHWC"===i?s.shape[3]:s.shape[1])/(o*o),y=new dU("NHWC"===i?[a,d,h,p]:[a,p,d,h],o,i);return e.runWebGLProgram(y,[s],s.dtype)}};class E0{constructor(t,e=!1,r=null,s=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Zt(this.outputShape.length);const i=t.filterHeight,a=t.filterWidth,u=t.outChannels/t.inChannels;let l="",c="";r&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${r}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${r}\n        }`:`\n          float activation(float x) {\n            ${r}\n          }\n        `,c="result = activation(result);");const d=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${u};\n        int q = d2 - d1 * ${u};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${i}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${d}\n        ${c}\n        setOutput(result);\n      }\n    `}}class R0{constructor(t,e=!1,r=null,s=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Zt(this.outputShape.length);const i=t.outChannels/t.inChannels,a=t.padInfo.left,u=t.strideWidth,l=t.dilationWidth,c=t.filterHeight,d=t.filterWidth,h=d;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let x=0;x<d;x++)p+=`\n          vec4 xTexelC${2*x};\n          int xTexelC${2*x}Ready;\n          vec4 xTexelC${2*x+1};\n          int xTexelC${2*x+1}Ready;\n          vec4 xC${x};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let x=0;x<d;x++)p+=`\n          xTexelC${2*x} = vec4(0.0);\n          xTexelC${2*x}Ready = 0;\n          xTexelC${2*x+1} = vec4(0.0);\n          xTexelC${2*x+1}Ready = 0;\n          xC${x} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let x=0;x<(h+1)/2;x++){const w=2*x;if(p+=`\n          xC = xCCorner + ${w*l};\n          `,1===u){if(w<d&&(a%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w}Ready == 0) {\n                  xTexelC${w} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${w}.zw = vec2(0.0);\n                  }\n                  xTexelC${w}Ready = 1;\n                }\n              `,p+=1===l&&w>0?`\n                xC${w} = vec4(xTexelC${w-2}.zw, xTexelC${w}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${w} = vec4(previous.zw, xTexelC${w}.xy);\n                  } else {\n                    xC${w} = vec4(0.0, 0.0, xTexelC${w}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${w}Ready == 0) {\n                  xTexelC${w} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${w}.zw = vec2(0.0);\n                  }\n                  xTexelC${w}Ready = 1;\n                }\n\n                xC${w} = xTexelC${w};\n                `,w+1<d)){const S=a%2==0?Po(l):l;l%2==0&&a%2==1||l%2!=0&&a%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${S};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w+1}Ready == 0) {\n                    xTexelC${w+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${w+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${w+1}Ready = 1;\n                  }\n                  `,p+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${w+1} = vec4(previous.zw, xTexelC${w+1}.xy);\n                    } else {\n                     xC${w+1} = vec4(0.0, 0.0, xTexelC${w+1}.xy);\n                    }\n                    `:`\n                    xC${w+1} = vec4(xTexelC${w}.zw, xTexelC${w+1}.xy);\n                    `):p+=1===S?`\n                    xC${w+1} = xTexelC${w};\n                    `:`\n                    xCOffset = xC + ${S};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w+1}Ready == 0) {\n                      xTexelC${w+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${w+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${w+1}Ready = 1;\n                    }\n\n                    xC${w+1} = xTexelC${w+1};\n                    `}}else w<d&&(a%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w}Ready == 0) {\n                  xTexelC${w} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${w}.zw = vec2(0.0);\n                  }\n                  xTexelC${w}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${w+1}Ready == 0) {\n                  xTexelC${w+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${w+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${w+1}Ready = 1;\n                }\n\n                xC${w} = vec4(xTexelC${w}.zw, xTexelC${w+1}.zw);\n              `,w+1<d&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${w+1} = vec4(xTexelC${w+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${w}Ready == 0) {\n                  xTexelC${w} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${w}.zw = vec2(0.0);\n                  }\n                  xTexelC${w}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${w+1}Ready == 0) {\n                  xTexelC${w+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${w+1}.zw = vec2(0.);\n                  }\n                  xTexelC${w+1}Ready = 1;\n                }\n\n                xC${w} = vec4(\n                  xTexelC${w}.xy, xTexelC${w+1}.xy);\n              `,w+1<d&&(p+=`\n                  xC${w+1} = vec4(xTexelC${w}.zw, xTexelC${w+1}.zw);\n                `)));w<d&&(p+=`\n            wTexel = getW(r, ${w}, d1, q);\n            dotProd += xC${w} * vec4(wTexel.xz, wTexel.xz);\n          `,w+1<d&&(p+=`\n              wTexel = getW(r, ${w+1}, d1, q);\n              dotProd += xC${w+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let m="",y="";r&&(m=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${r}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${r}\n        }`:`vec4 activation(vec4 x) {\n          ${r}\n        }`,y="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${m}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${y}\n        setOutput(result);\n      }\n    `}}const mU={kernelName:Dr,backendName:"webgl",kernelFunc:function fU(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o}=t,{strides:i,pad:a,dilations:u,dimRoundingMode:l}=r;let c=u;null==c&&(c=[1,1]),N(nn(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const d=Ft(s.shape,o.shape,i,c,a,l,!0);let h;return h=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new R0(d):new E0(d),e.runWebGLProgram(h,[s,o],"float32",[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]])}};class gU{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yU{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,r=t.filterWidth,u=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${r} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${u}; dm++) {\n              int d2 = d1 * ${u} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const bU={kernelName:ta,backendName:"webgl",kernelFunc:function xU(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,dy:o}=t,{strides:i,dilations:a,pad:u,dimRoundingMode:l,filterShape:c}=r,d=Ft(s.shape,c,i,a,u,l,!0),h=new gU(d);return e.runWebGLProgram(h,[s,o],"float32")}},vU={kernelName:na,backendName:"webgl",kernelFunc:function wU(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,filter:o}=t,{strides:i,dilations:a,pad:u,dimRoundingMode:l,inputShape:c}=r,d=Ft(c,o.shape,i,a,u,l,!0),h=new yU(d);return e.runWebGLProgram(h,[s,o],"float32")}};class CU{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const IU={kernelName:ra,backendName:"webgl",kernelFunc:function SU(n){const{inputs:t,backend:e}=n,{x:r}=t,s=[...r.shape,...r.shape],o=j(r.shape),i=le({inputs:{x:r},backend:e,attrs:{shape:[o]}}),a=new CU(o),u=e.runWebGLProgram(a,[i],i.dtype),l=le({inputs:{x:u},backend:e,attrs:{shape:s}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),l}};class kU{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:r,padInfo:s,strideHeight:o,strideWidth:i,filterHeight:a,filterWidth:u,dilationHeight:l,dilationWidth:c}=t,{top:d,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${d}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${a}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${u}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${r}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const $U={kernelName:sa,backendName:"webgl",kernelFunc:function NU(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o}=t,{strides:i,pad:a,dilations:u}=r,l=Da(s.shape,o.shape,i,a,"NHWC",u);let c;const d=new kU(l);c=e.runWebGLProgram(d,[s,o],"float32");const h=le({inputs:{x:c},backend:e,attrs:{shape:l.outShape}});return e.disposeIntermediateTensorInfo(c),h}},TU={kernelName:hn,backendName:"webgl",kernelFunc:function _U(n){const{inputs:t,backend:e,attrs:r}=n,{equation:s}=r,o=t,{allDims:i,summedDims:a,idDims:u}=rh(s,o.length);oh(i.length,u,o);const{path:l,steps:c}=ih(a,u),d=c.length;let h=null,p=i.length;const m=[];for(let y=0;y<d;++y){for(const g of c[y]){const{permutationIndices:x,expandDims:w}=sh(p,u[g]);let S;ah(x)?S=o[g]:(S=un({inputs:{x:o[g]},backend:e,attrs:{perm:x}}),m.push(S));const k=S.shape.slice();for(let _=0;_<w.length;++_)k.splice(w[_],0,1);ot(S.shape,k)||(S=le({inputs:{x:S},backend:e,attrs:{shape:k}}),m.push(S)),null===h?h=S:(h=cp({inputs:{a:S,b:h},backend:e}),m.push(h))}y<d-1&&(l[y]>=0&&(h=Ll({inputs:{x:h},backend:e,attrs:{axis:l[y]-(i.length-p),keepDims:!1}}),m.push(h)),p--)}for(const y of m)y!==h&&e.disposeIntermediateTensorInfo(y);return h}},RU={kernelName:"Elu",backendName:"webgl",kernelFunc:nt({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},PU={kernelName:Cu,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:r,y:s}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new _o("return (b >= 0.0) ? a : a * (b + 1.0);",r.shape,s.shape);return e.runWebGLProgram(o,[r,s],r.dtype)}},OU=qt({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:v4}),FU={kernelName:rs,backendName:"webgl",kernelFunc:OU},MU={kernelName:"Erf",backendName:"webgl",kernelFunc:nt({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Yd};\n  float a1 = ${Qd};\n  float a2 = ${Zd};\n  float a3 = ${Jd};\n  float a4 = ${eh};\n  float a5 = ${th};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`})},A0=nt({opSnippet:zi+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:C4,dtype:"float32"}),VU={kernelName:Or,backendName:"webgl",kernelFunc:A0};function fp(n){const{inputs:t,attrs:e,backend:r}=n,{dim:s}=e,{input:o}=t,i=o.shape.length,a=o.shape.slice();let u=s;return s<0&&(N(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+s+1),a.splice(u,0,1),le({inputs:{x:o},backend:r,attrs:{shape:a}})}const WU={kernelName:Gs,backendName:"webgl",kernelFunc:fp},D0="return exp(x) - 1.0;",UU=nt({opSnippet:D0,packedOpSnippet:D0,cpuKernelImpl:S4}),GU={kernelName:Wn,backendName:"webgl",kernelFunc:UU};class P0{constructor(t,e,r){this.variableNames=["real","imag"];const s=e[1];this.outputShape=e;const o=r?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=r?`${s}.0`:"1.0";let a;if("real"===t)a="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);a="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${a}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${i};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function O0(n,t,e){const r=e.texData.get(n.dataId),s=j(n.shape),o=n.shape[n.shape.length-1],a=le({inputs:{x:n},backend:e,attrs:{shape:[s/o,o]}}),u=a.shape,l=new P0("real",u,t),c=new P0("imag",u,t),d=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],h=e.runWebGLProgram(l,d,"float32"),p=e.runWebGLProgram(c,d,"float32"),m=$s({inputs:{real:h,imag:p},backend:e});e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p);const y=le({inputs:{x:m},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(m),y}const jU={kernelName:"FFT",backendName:"webgl",kernelFunc:function HU(n){const{inputs:t,backend:e}=n,{input:r}=t;return O0(r,!1,e)}};class KU{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function du(n){const{backend:t,attrs:e}=n,{shape:r,value:s}=e;let{dtype:o}=e;if(o=o||bn(s),"string"===o){const i=At(o,j(r));return i.fill(s),t.makeTensorInfo(r,o,i)}{const i=new KU(r,s);return t.runWebGLProgram(i,[],o,[[s]])}}const XU={kernelName:Hs,backendName:"webgl",kernelFunc:du};class qU{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const YU={kernelName:aa,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,r=t,s=new qU(e.shape);return r.runWebGLProgram(s,[e],e.dtype)}},F0="return floor(x);",QU=nt({opSnippet:F0,packedOpSnippet:F0,cpuKernelImpl:I4}),ZU={kernelName:js,backendName:"webgl",kernelFunc:QU},JU=qt({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),eG={kernelName:nr,backendName:"webgl",kernelFunc:JU};class tG{constructor(t){this.variableNames=["A"];const e=on(),[r,s]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${r}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class nG{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=on(),[r,s]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${r}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const rG={kernelName:Tu,backendName:"webgl",kernelFunc:function sG(n){const{inputs:t,backend:e,attrs:r}=n;let{pixels:s}=t;const{numChannels:o}=r,i=typeof HTMLVideoElement<"u"&&s instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],d=[l,u,o];if(a||i){const y=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==Wi||y!==mp)&&(mp=y,Wi=document.createElement("canvas").getContext("2d",{willReadFrequently:mp})),Wi.canvas.width=u,Wi.canvas.height=l,Wi.drawImage(s,0,0,u,l),s=Wi.canvas}const h=e.makeTensorInfo(c,"int32");e.texData.get(h.dataId).usage=Qn.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(h.dataId),s);const p=z().getBool("WEBGL_PACK")?new nG(d):new tG(d),m=e.runWebGLProgram(p,[h],"int32");return e.disposeData(h.dataId),m}};let Wi,mp=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const iG={kernelName:Ru,backendName:"webgl",kernelFunc:function oG(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o,bias:i,preluActivationWeights:a}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:h,activation:p,leakyreluAlpha:m}=r,y=ur(c),g=Ft(s.shape,o.shape,u,d,l,h,!1,y);let x;const w=[],S=null!=i,k=null!=a,_="leakyrelu"===p,A=()=>{const L=[s,o],M=(W,q)=>{if("NCHW"===q&&1===W.shape.length&&1!==W.shape[0]){const re=le({inputs:{x:W},backend:e,attrs:{shape:[W.shape[0],1,1]}});return w.push(re),re}return W};if(S&&L.push(M(i,c)),k&&L.push(M(a,c)),_){const W=e.makeTensorInfo([],"float32",pi(m,"float32"));L.push(W),w.push(W)}return L};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===y&&z().getBool("WEBGL_EXP_CONV")){const L=p?au(p,!0):null,M=new S0(g,S,L,k,_),W=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],q=A();x=e.runWebGLProgram(M,q,"float32",W)}else if(z().getBool("WEBGL_CONV_IM2COL"))x=k0({x:s,filter:o,convInfo:g,backend:e,bias:i,activation:p,preluActivationWeights:a,leakyreluAlpha:m});else{const L=p?au(p,!1):null,M=new C0(g,S,L,k,_),W=A();x=e.runWebGLProgram(M,W,"float32")}else x=I0({x:s,filter:o,convInfo:g,backend:e,bias:i,activation:p,preluActivationWeights:a,leakyreluAlpha:m});const P=le({inputs:{x},backend:e,attrs:{shape:g.outShape}});return w.push(x),w.forEach(L=>e.disposeIntermediateTensorInfo(L)),P}},uG={kernelName:Au,backendName:"webgl",kernelFunc:function aG(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,filter:o,bias:i,preluActivationWeights:a}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:d,activation:h,leakyreluAlpha:p}=r,m=[];let y=c;null==y&&(y=[1,1]),N(nn(u,y),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${y}'`);const g=Ft(s.shape,o.shape,u,y,l,d,!0),x=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,w=h?au(h,x):null,S=[s,o],k=null!=i,_=null!=a,A="leakyrelu"===h;if(k&&S.push(i),_&&S.push(a),A){const W=e.makeTensorInfo([],"float32",pi(p,"float32"));S.push(W),m.push(W)}let P;P=x?new R0(g,k,w,_,A):new E0(g,k,w,_,A);const M=e.runWebGLProgram(P,S,"float32",[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]]);return m.forEach(W=>e.disposeIntermediateTensorInfo(W)),M}};class lG{constructor(t,e,r,s){this.sliceDim=t,this.strides=e,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=r;const o=xt(r.length);let i="\n    int index;";for(let a=0;a<this.sliceDim;a++)i+=`\n          index = round(getIndices(coords[0], ${a}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};\n          flattenIndex += index * ${this.strides[a]};`;this.userCode=`\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${i}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const dG={kernelName:ua,backendName:"webgl",kernelFunc:function cG(n){const{inputs:t,backend:e}=n,{params:r,indices:s}=t,o=s.shape,i=o[o.length-1],a=j(r.shape),[u,l,c,d]=Kd(r,s),h=le({inputs:{x:s},backend:e,attrs:{shape:[l,i]}}),p=le({inputs:{x:r},backend:e,attrs:{shape:[j(r.shape)/c,c]}});if(e.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const x=e.readSync(s.dataId),w=e.bufferSync(r),S=k4(x,w,r.dtype,l,i,c,d,r.shape,a);return e.makeTensorInfo(u,r.dtype,S.values)}const m=new lG(i,d,[l,c],r.shape),y=e.runWebGLProgram(m,[p,h],p.dtype),g=le({inputs:{x:y},backend:e,attrs:{shape:u}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(y),g}};class hG{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const r=xt(this.rank),s=function pG(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<n.length;s++)r.push(2===s?"index":`${e[s]}`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function L0(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,indices:o}=t,{axis:i,batchDims:a}=r,u=at(i,s.shape)[0];if(z().get("DEBUG")){const w=e.readSync(o.dataId),S=s.shape[u];for(let k=0;k<w.length;++k){const _=w[k];N(_<=S-1&&_>=0,()=>`GatherV2: the index value ${_} is not in [0, ${S-1}]`)}}const l=dh(s,o,u,a),c=j(o.shape),d=[],h=le({inputs:{x:s},backend:e,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=le({inputs:{x:o},backend:e,attrs:{shape:[l.batchSize,c/l.batchSize]}});d.push(h),d.push(p);const m=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize];if(e.shouldExecuteOnCPU([s,o])||"string"===s.dtype){const w=e.bufferSync(p),S=e.bufferSync(h),k=N4(S,w,m);return d.forEach(_=>e.disposeIntermediateTensorInfo(_)),e.makeTensorInfo(l.outputShape,k.dtype,k.values)}const y=new hG(h.shape,m),g=e.runWebGLProgram(y,[h,p],h.dtype);d.push(g);const x=le({inputs:{x:g},backend:e,attrs:{shape:l.outputShape}});return d.forEach(w=>e.disposeIntermediateTensorInfo(w)),x}const fG={kernelName:ii,backendName:"webgl",kernelFunc:L0},mG=qt({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:$4,dtype:"bool"}),gG={kernelName:Ks,backendName:"webgl",kernelFunc:mG},yG=qt({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:_4}),xG={kernelName:hr,backendName:"webgl",kernelFunc:yG},wG={kernelName:la,backendName:"webgl",kernelFunc:function bG(n){const{inputs:t,backend:e}=n,{input:r}=t;return O0(r,!0,e)}},vG=nt({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),CG={kernelName:ca,backendName:"webgl",kernelFunc:vG},SG=nt({opSnippet:"return float(isinf(x));",dtype:"bool"}),IG={kernelName:da,backendName:"webgl",kernelFunc:SG},kG=nt({opSnippet:"return float(isnan(x));",dtype:"bool"}),NG={kernelName:Xs,backendName:"webgl",kernelFunc:kG},$G=qt({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:T4,dtype:"bool"}),_G={kernelName:os,backendName:"webgl",kernelFunc:$G},TG=qt({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:E4,dtype:"bool"}),EG={kernelName:Ys,backendName:"webgl",kernelFunc:TG},AG={kernelName:ha,backendName:"webgl",kernelFunc:function RG(n){const{backend:t,attrs:e}=n,{start:r,stop:s,num:o}=e,i=R4(r,s,o);return t.makeTensorInfo([i.length],"float32",i)}},PG=nt({opSnippet:zi+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:A4}),OG={kernelName:Qs,backendName:"webgl",kernelFunc:PG},LG=nt({opSnippet:zi+"\n  return log(1.0 + x);\n"}),BG={kernelName:pa,backendName:"webgl",kernelFunc:LG},MG=qt({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),zG={kernelName:ui,backendName:"webgl",kernelFunc:MG},VG=nt({opSnippet:"return float(!(x >= 1.0));"}),WG={kernelName:fa,backendName:"webgl",kernelFunc:VG},UG=qt({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),GG={kernelName:ma,backendName:"webgl",kernelFunc:UG};class HG{constructor(t,e,r,s,o){this.variableNames=["x"],this.outputShape=[];const i=e,a=t[3]-1;let u;this.outputShape=t;const l=`float(${r}) + float(${s}) * sum`;u=.5===o?`inversesqrt(${l})`:1===o?`1.0/(${l})`:`exp(log(${l}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${i}; j <= ${i}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${a}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${u};\n        setOutput(val);\n      }\n    `}}class jG{constructor(t,e,r,s,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const i=e,a=t[3]-1;let u;this.outputShape=t;const l=`float(${r}) + float(${s}) * sum`;u=.5===o?`inversesqrt(${l})`:1===o?`1.0/(${l})`:`exp(log(${l}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${i};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${i}; j <= ${i}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${u};\n        setOutput(result);\n      }\n    `}}const KG={kernelName:"LRN",backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{depthRadius:o,bias:i,alpha:a,beta:u}=r,l=z().getBool("WEBGL_PACK_NORMALIZATION")?new jG(s.shape,o,i,a,u):new HG(s.shape,o,i,a,u);return e.runWebGLProgram(l,[s],s.dtype)}};class XG{constructor(t,e,r,s,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=r,this.alpha=s,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${r});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${o})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const qG={kernelName:Zs,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{x:s,y:o,dy:i}=t,{depthRadius:a,bias:u,alpha:l,beta:c}=r,d=new XG(s.shape,a,u,l,c);return e.runWebGLProgram(d,[s,o,i],s.dtype)}};function B0(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{reductionIndices:o,keepDims:i}=r,a=s.shape.length,u=at(o,s.shape);let l=u;const c=jt(l,a),d=null!=c,h=e.shouldExecuteOnCPU([s]);let p=s;if(d){if(h){const S=e.texData.get(p.dataId).values,k=new Array(a);for(let P=0;P<k.length;P++)k[P]=s.shape[c[P]];const _=up(S,s.shape,s.dtype,c,k);p=e.makeTensorInfo(k,s.dtype),e.texData.get(p.dataId).values=_}else p=Fl(s,c,e);l=Kt(l.length,a)}In("max",l,a);const[m,y]=Pn(p.shape,l);let x,g=m;if(i&&(g=mn(m,u)),h){const S=e.texData.get(p.dataId).values,k=D4(S,j(y),g,s.dtype);x=e.makeTensorInfo(g,s.dtype),e.texData.get(x.dataId).values=k}else x=function YG(n,t,e,r){const s=j(t),a=le({inputs:{x:n},attrs:{shape:[j(n.shape)/s,s]},backend:r}),u=Eo(a,n.dtype,"max",r),l=le({inputs:{x:u},attrs:{shape:e},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(u),l}(p,y,g,e);return d&&e.disposeIntermediateTensorInfo(p),x}const QG={kernelName:"Max",backendName:"webgl",kernelFunc:B0},eH=qt({opSnippet:lp+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+To+"\n  return result;\n",cpuKernelImpl:P4}),tH={kernelName:Js,backendName:"webgl",kernelFunc:eH},rH={kernelName:li,backendName:"webgl",kernelFunc:function nH(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t;ou(s,"maxPool");const{filterSize:o,strides:i,pad:a,dimRoundingMode:u}=r;N(nn(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=Hn(s.shape,o,i,1,a,u);if(1===c.filterWidth&&1===c.filterHeight&&ot(c.inShape,c.outShape))return Tn({inputs:{x:s},backend:e});const d=new uu(c,"max",!1);return e.runWebGLProgram(d,[s],s.dtype)}},oH={kernelName:f,backendName:"webgl",kernelFunc:function sH(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{filterSize:o,strides:i,pad:a,dataFormat:u,dimRoundingMode:l}=r,d=zr(s.shape,o,i,[1,1,1],a,l,u),h=new dp(d,"max",!1);return e.runWebGLProgram(h,[s],s.dtype)}};class iH{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const o=t.effectiveFilterHeight,i=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-t.padInfo.top}, ${i-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*i-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${i} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class aH{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const u=t.effectiveFilterDepth,l=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${u-1-t.padInfo.front}, ${l-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${u};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${u*l*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const lH={kernelName:b,backendName:"webgl",kernelFunc:function uH(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,input:o}=t,i=o,{filterSize:a,strides:u,pad:l,dimRoundingMode:c}=r,h=zr(i.shape,a,u,[1,1,1],l,c),p=new dp(h,"max",!0),m=e.runWebGLProgram(p,[i],i.dtype),y=new aH(h),g=e.runWebGLProgram(y,[s,m],i.dtype);return e.disposeIntermediateTensorInfo(m),g}},dH={kernelName:xa,backendName:"webgl",kernelFunc:function cH(n){const{inputs:t,backend:e,attrs:r}=n,{dy:s,input:o,output:i}=t,a=o;ou([o,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,h=Hn(a.shape,u,l,1,c,d),m=new uu(h,"max",!0),y=e.runWebGLProgram(m,[a],a.dtype),g=new iH(h),x=e.runWebGLProgram(g,[s,y],a.dtype);return e.disposeIntermediateTensorInfo(y),x}},pH={kernelName:C,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:r}=n,{filterSize:s,strides:o,pad:i,includeBatchInIndex:a}=t,u=e;N(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const l=[1,1];N(nn(o,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${l}'`);const c=Hn(r.shape,s,o,l,i),[d,h]=function hH(n,t,e,r){let s=new uu(e,"max",!1);const o=r.runWebGLProgram(s,[n],"float32");return s=new uu(e,"max",!0,!0,t),[o,r.runWebGLProgram(s,[n],"float32")]}(r,a,c,u);return[d,h]}},mH={kernelName:I,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:r}=n,{keepDims:s,axis:o}=t,i=e,a=r.shape.length,u=at(o,r.shape);let l=u;const c=jt(l,a),d=null!=c,h=i.shouldExecuteOnCPU([r]),p=[];let m=r;if(d){if(h){const k=i.texData.get(m.dataId).values,_=new Array(a);for(let L=0;L<_.length;L++)_[L]=r.shape[c[L]];const A=up(k,r.shape,r.dtype,c,_);m=i.makeTensorInfo(_,r.dtype),i.texData.get(m.dataId).values=A}else m=Fl(r,c,i);p.push(m),l=Kt(l.length,a)}In("sum",l,a);const[y,g]=Pn(m.shape,l);let x=y;s&&(x=mn(y,u));const w=function fH(n,t,e,r){const s=j(t),a=le({inputs:{x:n},attrs:{shape:[j(n.shape)/s,s]},backend:r}),u=Eo(a,"float32","mean",r),l=le({inputs:{x:u},attrs:{shape:e},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(u),l}(m,g,x,i);for(const S of p)i.disposeIntermediateTensorInfo(S);return w}},yH={kernelName:T,backendName:"webgl",kernelFunc:function gH(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,keepDims:i}=r,a=s.shape.length,u=at(o,s.shape);let l=u;const c=jt(l,a);let d=s;null!=c&&(d=un({inputs:{x:s},backend:e,attrs:{perm:c}}),l=Kt(l.length,s.shape.length)),In("min",l,a);const[h,p]=Pn(d.shape,l),y=le({inputs:{x:d},backend:e,attrs:{shape:[-1,j(p)]}}),g=Eo(y,y.dtype,"min",e);let x;return x=le(i?{inputs:{x:g},backend:e,attrs:{shape:mn(h,u)}}:{inputs:{x:g},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(d),x}},wH=qt({opSnippet:lp+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+To+"\n  return result;\n",cpuKernelImpl:O4}),vH={kernelName:R,backendName:"webgl",kernelFunc:wH};class CH{constructor(t,e,r){this.variableNames=["x"],this.outputShape=e.map((c,d)=>c[0]+t[d]+c[1]);const s=t.length,o=xt(s),i=e.map(c=>c[0]).join(","),a=e.map((c,d)=>c[0]+t[d]).join(","),u=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===r?0:1;this.userCode=1!==s?`\n      ${o} start = ${o}(${i});\n      ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${u}));\n      }\n    `:`\n        int start = ${i};\n        int end = ${a};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class SH{constructor(t,e,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((m,y)=>m[0]+t[y]+m[1]);const s=t.length,o=xt(s),i=e.map(m=>m[0]).join(","),a=e.map((m,y)=>m[0]+t[y]).join(","),u=an("rc",s),l=an("source",s),c=`${u[s-1]} < ${this.outputShape[s-1]}`,d=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===r?0:1;let p="";if(1===s){const m=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${m}\n        result[0] = getChannel(getX(${l.join()}), ${d});\n        ${u[s-1]} += 1;\n        if(${c}) {\n          ${m}\n          result[1] = getChannel(getX(${l.join()}), ${d});\n        }\n      `}else{const m=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${m}\n        result[0] = getChannel(getX(${l.join()}), ${d});\n        ${u[s-1]} += 1;\n        if(${c}) {\n          ${m}\n          result[1] = getChannel(getX(${l.join()}), ${d});\n        }\n        rc = outputLoc;\n        ${u[s-2]} += 1;\n        if(${u[s-2]} < ${this.outputShape[s-2]}) {\n          ${m}\n          result[2] = getChannel(getX(${l.join()}), ${d});\n          ${u[s-1]} += 1;\n          if(${c}) {\n            ${m}\n            result[3] = getChannel(getX(${l.join()}), ${d});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${i});\n      const ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const IH={kernelName:E,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:r}=n,{paddings:s,mode:o}=e,i=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new SH(r.shape,s,o):new CH(r.shape,s,o);return t.runWebGLProgram(i,[r],r.dtype)}},$H=qt({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+To+"\n  return result;\n"}),_H={kernelName:B,backendName:"webgl",kernelFunc:$H};class TH{constructor(t,e,r){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,r],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const M0=qt({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),EH={kernelName:Pr,backendName:"webgl",kernelFunc:M0},z0="return a - b;",V0=qt({opSnippet:z0,packedOpSnippet:z0,supportsComplex:!0,cpuKernelImpl:nz}),RH={kernelName:Ia,backendName:"webgl",kernelFunc:V0};function W0(n){const{inputs:t,backend:e,attrs:r}=n,{logits:s}=t,{dim:o}=r,i=at([o],s.shape),a=B0({inputs:{x:s},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),u=mn(a.shape,i),l=le({inputs:{x:a},backend:e,attrs:{shape:u}}),c=V0({inputs:{a:s,b:l},backend:e}),d=A0({inputs:{x:c},backend:e}),h=Ll({inputs:{x:d},backend:e,attrs:{axis:i,keepDims:!1}}),p=le({inputs:{x:h},backend:e,attrs:{shape:u}}),m=M0({inputs:{a:d,b:p},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),m}const AH={kernelName:pc,backendName:"webgl",kernelFunc:W0},PH={kernelName:G,backendName:"webgl",kernelFunc:function DH(n){const{inputs:t,backend:e,attrs:r}=n,{logits:s}=t,{numSamples:o,seed:i,normalized:a}=r,u=a?s:W0({inputs:{logits:s},backend:e,attrs:{dim:s.shape.length-1}}),d=new TH(u.shape[0],u.shape[1],o),p=e.runWebGLProgram(d,[u],"int32",[[i]]);return a||e.disposeIntermediateTensorInfo(u),p}},OH=Mn+"\n  return -x;\n",BH={kernelName:"Neg",backendName:"webgl",kernelFunc:function LH(n){const{inputs:t,backend:e}=n,{x:r}=t;if(e.shouldExecuteOnCPU([r])){const o=e.texData.get(r.dataId),[i,a]=L4(o.values,r.shape,r.dtype);return e.makeTensorInfo(a,r.dtype,i)}let s;return s=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Ns(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new vr(r.shape,OH),e.runWebGLProgram(s,[r],r.dtype)}},MH=Fd,VH={kernelName:Se,backendName:"webgl",kernelFunc:function zH(n){sr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:r}=n,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:u}=r,l=e.readSync(s.dataId),c=e.readSync(o.dataId),{selectedIndices:d}=MH(l,c,i,a,u);return e.makeTensorInfo([d.length],"int32",new Int32Array(d))}},WH=Am,GH={kernelName:pe,backendName:"webgl",kernelFunc:function UH(n){sr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:r}=n,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:u,padToMaxOutputSize:l}=r,c=e.readSync(s.dataId),d=e.readSync(o.dataId),{selectedIndices:h,validOutputs:p}=WH(c,d,i,a,u,l);return[e.makeTensorInfo([h.length],"int32",new Int32Array(h)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},HH=Ld,KH={kernelName:Te,backendName:"webgl",kernelFunc:function jH(n){sr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:r}=n,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:u,softNmsSigma:l}=r,c=e.readSync(s.dataId),d=e.readSync(o.dataId),h=i,p=a,m=u,y=l,{selectedIndices:g,selectedScores:x}=HH(c,d,h,p,m,y);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class XH{constructor(t,e,r,s){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${r}),\n                      float(index == coords.y)));\n      }\n    `}}const qH={kernelName:ft,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{indices:s}=t,{dtype:o,depth:i,onValue:a,offValue:u}=r,l=j(s.shape),c=new XH(l,i,a,u),d=le({inputs:{x:s},backend:e,attrs:{shape:[l]}}),h=e.runWebGLProgram(c,[d],o);e.disposeIntermediateTensorInfo(d);const m=le({inputs:{x:h},backend:e,attrs:{shape:[...s.shape,i]}});return e.disposeIntermediateTensorInfo(h),m}};function Gl(n){const{inputs:t,backend:e}=n,{x:r}=t;if("complex64"===r.dtype){const s=lu({inputs:{input:r},backend:e}),o=Gl({inputs:{x:s},backend:e}),i=Vl({inputs:{input:r},backend:e}),a=Gl({inputs:{x:i},backend:e}),u=$s({inputs:{real:o,imag:a},backend:e});return e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),u}return du({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:e})}const YH={kernelName:Nc,backendName:"webgl",kernelFunc:Gl},QH={kernelName:Le,backendName:"webgl",kernelFunc:function U0(n){const{inputs:t,backend:e}=n,{x:r}=t;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const s=lu({inputs:{input:r},backend:e}),o=U0({inputs:{x:s},backend:e}),i=Vl({inputs:{input:r},backend:e}),a=Gl({inputs:{x:i},backend:e}),u=$s({inputs:{real:o,imag:a},backend:e});return e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),u}return du({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:e})}},JH={kernelName:lt,backendName:"webgl",kernelFunc:function ZH(n){const{inputs:t,backend:e,attrs:r}=n,{axis:s}=r;if(1===t.length)return fp({inputs:{input:t[0]},backend:e,attrs:{dim:s}});const o=t[0].shape,i=t[0].dtype;t.forEach(c=>{ut(o,c.shape,"All tensors passed to stack must have matching shapes"),N(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const a=[],l=v0({inputs:t.map(c=>{const d=fp({inputs:{input:c},backend:e,attrs:{dim:s}});return a.push(d),d}),backend:e,attrs:{axis:s}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),l}};class e6{constructor(t,e,r){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((l,c)=>l[0]+t[c]+l[1]);const s=t.length,o=xt(s),i=e.map(l=>l[0]).join(","),a=e.map((l,c)=>l[0]+t[c]).join(","),u=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${o} start = ${o}(${i});\n      ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${u}));\n        }\n      }\n    `:`\n        int start = ${i};\n        int end = ${a};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class t6{constructor(t,e,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((y,g)=>y[0]+t[g]+y[1]);const s=t.length,o=xt(s),i=e.map(y=>y[0]).join(","),a=e.map((y,g)=>y[0]+t[g]).join(","),u=an("rc",s),l=an("source",s),c=`${u[s-1]} < ${this.outputShape[s-1]}`,d=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${o} rc = outputLoc;`,`${u[s-1]} += 1;\n       if(${c}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${u[s-2]} += 1;\n       if(${u[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${u[s-1]} += 1;\n         if(${c}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let m="";for(let y=0,g=1===s?2:4;y<g;y++)m+=`\n        ${h[y]}\n        if (${p}) {\n          result[${y}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${y}] = getChannel(getX(${l.join()}), ${d});\n        }\n      `;m+=1===s?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${i});\n      const ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${m}\n        setOutput(result);\n      }\n    `}}const G0=n=>{const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{paddings:o,constantValue:i}=r;if(0===j(s.shape))return du({backend:e,attrs:{shape:o.map((c,d)=>c[0]+s.shape[d]+c[1]),value:i,dtype:s.dtype}});const a=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new t6(s.shape,o,i):new e6(s.shape,o,i);return e.runWebGLProgram(a,[s],s.dtype,[[i]])},n6={kernelName:Ot,backendName:"webgl",kernelFunc:G0},i6={kernelName:"Pow",backendName:"webgl",kernelFunc:qt({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+To+"\n  return result;\n"})},u6={kernelName:Dt,backendName:"webgl",kernelFunc:function a6(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{axis:o,keepDims:i}=r,a=s.shape.length,u=[],l=at(o,s.shape);let c=l;const d=jt(c,a);let p,h=s;if(null!=d&&(h=un({inputs:{x:s},backend:e,attrs:{perm:d}}),c=Kt(c.length,a),u.push(h)),In("prod",c,a),e.shouldExecuteOnCPU([h])){const m=e.texData.get(h.dataId).values,{outVals:y,outShape:g,outDtype:x}=M4(h.shape,h.dtype,m,c);p=e.makeTensorInfo(g,x,y)}else{const[m,y]=Pn(h.shape,c),g=j(y),x=le({inputs:{x:h},backend:e,attrs:{shape:[-1,g]}}),S=Eo(x,Mu(s.dtype),"prod",e);p=le({inputs:{x:S},backend:e,attrs:{shape:m}}),u.push(x),u.push(S)}if(i){u.push(p);const m=mn(p.shape,l);p=le({inputs:{x:p},backend:e,attrs:{shape:m}})}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),p}},c6={kernelName:rr,backendName:"webgl",kernelFunc:function l6(n){const{inputs:t,backend:e,attrs:r}=n,{paramsNestedSplits:s,paramsDenseValues:o,indices:i}=t,{outputRaggedRank:a}=r,u=s.map(x=>e.readSync(x.dataId)),l=s.map(x=>x.shape),c=e.readSync(o.dataId),d=e.readSync(i.dataId),[h,p,m]=z4(u,l,c,o.shape,o.dtype,d,i.shape,a),y=h.map(x=>e.makeTensorInfo([x.length],"int32",x)),g=e.makeTensorInfo(m,o.dtype,p);return y.concat([g])}},h6={kernelName:Iu,backendName:"webgl",kernelFunc:function d6(n){const{inputs:t,backend:e}=n,{starts:r,limits:s,deltas:o}=t,i=e.readSync(r.dataId),a=e.readSync(s.dataId),u=e.readSync(o.dataId),[l,c]=V4(i,r.shape,r.dtype,a,s.shape,u,o.shape);return[e.makeTensorInfo([l.length],"int32",l),e.makeTensorInfo([c.length],r.dtype,c)]}},f6={kernelName:ku,backendName:"webgl",kernelFunc:function p6(n){const{inputs:t,backend:e,attrs:r}=n,{shape:s,values:o,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:u}=r,l=e.readSync(s.dataId),c=e.readSync(o.dataId),d=e.readSync(i.dataId),h=a.map(g=>e.readSync(g.dataId)),p=a.map(g=>g.shape),[m,y]=W4(l,s.shape,c,o.shape,o.dtype,d,i.shape,h,p,u);return e.makeTensorInfo(m,o.dtype,y)}},H0=n=>{const{backend:t,attrs:e}=n,{start:r,stop:s,step:o,dtype:i}=e,a=U4(r,s,o,i);return t.makeTensorInfo([a.length],i,a)},m6={kernelName:ba,backendName:"webgl",kernelFunc:H0},g6=nt({opSnippet:"return 1.0 / x;"}),y6={kernelName:wa,backendName:"webgl",kernelFunc:g6},b6=nt({opSnippet:Mn+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),w6={kernelName:is,backendName:"webgl",kernelFunc:b6},C6=nt({opSnippet:Mn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),S6={kernelName:Zl,backendName:"webgl",kernelFunc:C6};class I6{constructor(t,e,r,s,o){this.variableNames=["A"],this.outputShape=[];const[i,a,u,l]=t;this.outputShape=[i,e,r,l];const c=[s&&e>1?a-1:a,s&&r>1?u-1:u],d=[s&&e>1?e-1:e,s&&r>1?r-1:r];let h;h=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/d[0]},\n          ${c[1]/d[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${u}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class k6{constructor(t,e,r,s,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,a,u,l]=t;this.outputShape=[i,e,r,l];const c=[s&&e>1?a-1:a,s&&r>1?u-1:u],d=[s&&e>1?e-1:e,s&&r>1?r-1:r];let h;h=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/d[0]},\n          ${c[1]/d[1]},\n          ${c[1]/d[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${u}.0,\n                                     ${u}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${r-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const $6={kernelName:Ql,backendName:"webgl",kernelFunc:function N6(n){const{inputs:t,backend:e,attrs:r}=n,{images:s}=t,{alignCorners:o,halfPixelCenters:i,size:a}=r,[u,l]=a,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new k6(s.shape,u,l,o,i):new I6(s.shape,u,l,o,i);return e.runWebGLProgram(c,[s],"float32")}};class _6{constructor(t,e,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,s,o]=e,[,i,a]=t,u=[r&&i>1?s-1:s,r&&a>1?o-1:o],l=[r&&i>1?i-1:i,r&&a>1?a-1:a],c=u[0]/l[0],d=u[1]/l[1],h=1/c,p=1/d,m=2*Math.ceil(h)+2,y=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${d});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${m});\n        const int winWidth = int(${y});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${a}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const E6={kernelName:Np,backendName:"webgl",kernelFunc:function T6(n){const{inputs:t,backend:e,attrs:r}=n,{images:s,dy:o}=t,{alignCorners:i}=r,a=new _6(o.shape,s.shape,i);return e.runWebGLProgram(a,[o],o.dtype)}};class R6{constructor(t,e,r,s,o){this.variableNames=["A"],this.outputShape=[];const[i,a,u,l]=t;this.outputShape=[i,e,r,l];const c=[s&&e>1?a-1:a,s&&r>1?u-1:u],d=[s&&e>1?e-1:e,s&&r>1?r-1:r];let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/d[0]},\n          ${c[1]/d[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${u}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${s?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class A6{constructor(t,e,r,s,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,a,u,l]=t;this.outputShape=[i,e,r,l];const c=[s&&e>1?a-1:a,s&&r>1?u-1:u],d=[s&&e>1?e-1:e,s&&r>1?r-1:r];let p;p=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/d[0]},\n          ${c[1]/d[1]},\n          ${c[1]/d[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${u}.0,\n                                     ${u}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${s?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${r-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const P6={kernelName:Yl,backendName:"webgl",kernelFunc:function D6(n){const{inputs:t,backend:e,attrs:r}=n,{images:s}=t,{alignCorners:o,halfPixelCenters:i,size:a}=r,[u,l]=a,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new A6(s.shape,u,l,o,i):new R6(s.shape,u,l,o,i);return e.runWebGLProgram(c,[s],s.dtype)}};class O6{constructor(t,e,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,s,o]=e,[,i,a]=t,u=[r&&i>1?s-1:s,r&&a>1?o-1:o],l=[r&&i>1?i-1:i,r&&a>1?a-1:a],c=u[0]/l[0],d=u[1]/l[1],h=1/c,p=1/d,m=2*Math.ceil(h)+2,y=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${d});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${m});\n        const int winWidth = int(${y});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${a}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${u[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${u[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${r} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${r} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const L6={kernelName:kp,backendName:"webgl",kernelFunc:function F6(n){const{inputs:t,backend:e,attrs:r}=n,{images:s,dy:o}=t,{alignCorners:i}=r,a=new O6(o.shape,s.shape,i);return e.runWebGLProgram(a,[o],o.dtype)}};class B6{constructor(t,e){this.variableNames=["x"];const r=t.length;if(r>4)throw new Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);if(this.outputShape=t,1===r)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const o=t.map((a,u)=>(a=>-1!==e.indexOf(a)&&1!==t[a]?`${t[a]} - coords[${a}] - 1`:`coords[${a}]`)(u)).join(","),i=xt(r);this.userCode=`\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class M6{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const r=t.length;if(r>4)throw new Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);this.outputShape=t;const s=an("rc",r),o=`${s[r-1]} + 1 < ${this.outputShape[r-1]}`,i=`${s[r-2]} + 1 < ${this.outputShape[r-2]}`,a=xt(r);function h(m){const y=t.map((w,S)=>function p(m,y){return-1!==e.indexOf(m)&&1!==t[m]?`${t[m]} - ${y[m]} - 1`:`${y[m]}`}(S,m));return`getChannel(getX(${y.join(",")}), vec2(${y.slice(-2).join(",")}))`}this.userCode=1===r?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${a} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function u(m){return h(m)}(s.slice())};\n          if(${o}){\n            result.g = ${function l(m){return m[r-1]="("+m[r-1]+" + 1)",h(m)}(s.slice())};\n          }\n          if(${i}) {\n            result.b = ${function c(m){return m[r-2]="("+m[r-2]+" + 1)",h(m)}(s.slice())};\n            if(${o}) {\n              result.a = ${function d(m){return m[r-1]="("+m[r-1]+" + 1)",m[r-2]="("+m[r-2]+" + 1)",h(m)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const V6={kernelName:Jl,backendName:"webgl",kernelFunc:function z6(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{dims:o}=r,i=s.shape.length,a=at(o,s.shape);if(0===i)return Tn({inputs:{x:s},backend:e});const u=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new M6(s.shape,a):new B6(s.shape,a);return e.runWebGLProgram(u,[s],s.dtype)}};class W6{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const r=t[1],s=t[2];this.outputShape=t;let o="";o="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${r}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const U6={kernelName:_c,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:r}=n,{radians:s,fillValue:o,center:i}=t,a=e,u=new W6(r.shape,o),[l,c]=Gd(i,r.shape[1],r.shape[2]),d=[[l,c,Math.sin(s),Math.cos(s)]];return a.runWebGLProgram(u,[r],r.dtype,d)}},G6=nt({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),H6={kernelName:ec,backendName:"webgl",kernelFunc:G6},j6=nt({opSnippet:"return inversesqrt(x);",cpuKernelImpl:G4}),K6={kernelName:va,backendName:"webgl",kernelFunc:j6};class gp{constructor(t,e,r,s,o,i,a=!0,u=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;const l=xt(o.length),c=xt(i.length);let d="";1===r?d="i":2===r&&(d="i, j");let p="";1===s?p="i":2===s&&(p="i, coords[1]");let y="";u&&(y="coords[0], coords[1]"),this.userCode=`\n        ${l} strides = ${l}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${d}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${p});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(${y}), sum, float(found)));\n        }\n      `}}class X6{constructor(t,e,r,s,o,i,a=!0,u=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=i;const l=xt(o.length),c=xt(i.length);let d="";1===r?d="i":2===r&&(d="i, j");let p="";1===s?p="i":2===s&&(p="i, coords[1]");let y="";u&&(y="coords[0], coords[1]"),this.userCode=`\n        ${l} strides = ${l}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${t}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${e}; j+=2) {\n              ivec4 index = round(getIndices(${d}));\n              flattenedIndex += index.xz * ${e>1?"strides[j]":"strides"};\n              if (j + 1 < ${e}) {\n                flattenedIndex += index.yw * ${e>1?"strides[j + 1]":"strides"};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = getUpdates(${p});\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(getDefaultValue(${y}), sum, found));\n        }\n      `}}const Y6={kernelName:tc,backendName:"webgl",kernelFunc:function q6(n){const{inputs:t,backend:e,attrs:r}=n,{indices:s,updates:o}=t,{shape:i}=r,{sliceRank:a,numUpdates:u,sliceSize:l,strides:c,outputSize:d}=po(0,s,i),h=[d/l,l];if(0===d)return e.makeTensorInfo(i,s.dtype);const p=le({inputs:{x:s},backend:e,attrs:{shape:[u,a]}}),m=le({inputs:{x:o},backend:e,attrs:{shape:[u,l]}}),y=e.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=z().getBool("WEBGL_PACK")?new X6(u,a,p.shape.length,m.shape.length,c,h):new gp(u,a,p.shape.length,m.shape.length,c,h);const x=e.runWebGLProgram(g,[m,p,y],m.dtype),w=le({inputs:{x},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(y),w}};class Q6{constructor(t,e,r,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,r];const i=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,a=2===z().getNumber("WEBGL_VERSION")?"while (left < right) {":i;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===s?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const J6={kernelName:rc,backendName:"webgl",kernelFunc:function Z6(n){const{inputs:t,backend:e,attrs:r}=n,{sortedSequence:s,values:o}=t,{side:i}=r,a=new Q6(s.shape[0],s.shape[1],o.shape[1],i);return e.runWebGLProgram(a,[s,o],"int32",[[s.shape[1]]])}};class ej{constructor(t,e,r){let s,o;if(this.variableNames=["c","a","b"],this.outputShape=e,r>4)throw Error(`Where for rank ${r} is not yet supported`);if(1===r)o="resRC",s="resRC";else{const a=["resRC.x","resRC.y","resRC.z","resRC.w"],u=[],l=[];for(let c=0;c<e.length;c++)l.push(`${a[c]}`),c<t&&u.push(`${a[c]}`);s=u.join(),o=l.join()}const i=xt(r);this.userCode=`\n      void main() {\n        ${i} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const nj={kernelName:sc,backendName:"webgl",kernelFunc:function tj(n){const{inputs:t,backend:e}=n,{condition:r,t:s,e:o}=t,i=new ej(r.shape.length,s.shape,s.shape.length);return e.runWebGLProgram(i,[r,s,o],pn(s.dtype,o.dtype))}},sj=nt({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Xd};\n  float scale = ${qd};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),oj={kernelName:oc,backendName:"webgl",kernelFunc:sj},aj=nt({opSnippet:zi+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:j4}),uj={kernelName:Ca,backendName:"webgl",kernelFunc:aj},lj=nt({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),cj={kernelName:uc,backendName:"webgl",kernelFunc:lj},fj={kernelName:"Sin",backendName:"webgl",kernelFunc:nt({opSnippet:zi+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${To}\n  return result;\n`})},mj=nt({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),gj={kernelName:ac,backendName:"webgl",kernelFunc:mj},yj=nt({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),xj={kernelName:lc,backendName:"webgl",kernelFunc:yj},bj={kernelName:dc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{blockShape:o,paddings:i}=r;N(s.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const a=o.reduce((x,w)=>x*w),u=[[0,0]];u.push(...i);for(let x=1+o.length;x<s.shape.length;++x)u.push([0,0]);const l=[],c=G0({inputs:{x:s},backend:e,attrs:{paddings:u,constantValue:0}}),d=Ha(c.shape,o,a,!1),h=ja(d.length,o.length,!1),p=Ka(c.shape,o,a,!1),m=le({inputs:{x:c},backend:e,attrs:{shape:d}}),y=un({inputs:{x:m},backend:e,attrs:{perm:h}}),g=le({inputs:{x:y},backend:e,attrs:{shape:p}});return l.push(c),l.push(m),l.push(y),l.forEach(x=>e.disposeIntermediateTensorInfo(x)),g}},vj={kernelName:$p,backendName:"webgl",kernelFunc:function wj(n){const{inputs:t,backend:e}=n,{indices:r,values:s,denseShape:o,defaultValue:i}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const a=e.readSync(r.dataId),u=e.readSync(s.dataId),l=e.readSync(o.dataId),c=e.readSync(i.dataId)[0],[d,h,p,m,y]=X4(a,r.shape,r.dtype,u,s.dtype,l,c);return[e.makeTensorInfo(h,r.dtype,d),e.makeTensorInfo([h[0]],s.dtype,p),e.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(g=>Number(g)))),e.makeTensorInfo([y.length],r.dtype,new Int32Array(y))]}},Sj={kernelName:_p,backendName:"webgl",kernelFunc:function Cj(n){const{inputs:t,backend:e}=n,{inputIndices:r,inputShape:s,newShape:o}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const i=Array.from(e.readSync(s.dataId)),a=e.readSync(r.dataId),u=Array.from(e.readSync(o.dataId)),[l,c,d]=q4(a,r.shape,r.dtype,i,u);return[e.makeTensorInfo(c,r.dtype,l),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}},kj={kernelName:fc,backendName:"webgl",kernelFunc:function Ij(n){const{inputs:t,backend:e}=n,{data:r,indices:s,segmentIds:o}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const i=e.readSync(r.dataId),a=e.readSync(s.dataId),u=e.readSync(o.dataId),[l,c]=Yx(i,r.shape,r.dtype,a,u,!0);return e.makeTensorInfo(c,r.dtype,l)}},$j={kernelName:mc,backendName:"webgl",kernelFunc:function Nj(n){const{inputs:t,backend:e}=n,{data:r,indices:s,segmentIds:o}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const i=e.readSync(r.dataId),a=e.readSync(s.dataId),u=e.readSync(o.dataId),[l,c]=Yx(i,r.shape,r.dtype,a,u);return e.makeTensorInfo(c,r.dtype,l)}},Tj={kernelName:gc,backendName:"webgl",kernelFunc:function _j(n){const{inputs:t,backend:e,attrs:r}=n,{sparseIndices:s,sparseValues:o,defaultValue:i}=t,{outputShape:a}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:d,outputSize:h}=po(0,s,a);if("string"===o.dtype){const x=e.bufferSync(s),w=e.bufferSync(o),S=Fr(e.readSync(i.dataId)[0]),k=H4(x,w,a,h,c,l,u,d,S,!1);return e.makeTensorInfo(a,k.dtype,k.values)}const m=new gp(l,u,s.shape.length,o.shape.length,d,[h,1],!1),y=e.runWebGLProgram(m,[o,s,i],o.dtype),g=le({inputs:{x:y},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(y),g}},Rj={kernelName:hc,backendName:"webgl",kernelFunc:function Ej(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{numOrSizeSplits:o,axis:i}=r,a=at(i,s.shape)[0],u=uh(s,o,a),c=new Array(s.shape.length).fill(0),d=s.shape.slice();return u.map(h=>{const p=[...d];p[a]=h;const m=Vi({inputs:{x:s},backend:e,attrs:{begin:c,size:p}});return c[a]+=h,m})}},j0="return sqrt(x);",Aj=nt({opSnippet:j0,packedOpSnippet:j0,cpuKernelImpl:Y4}),Dj={kernelName:Sa,backendName:"webgl",kernelFunc:Aj},Oj={kernelName:"Square",backendName:"webgl",kernelFunc:nt({opSnippet:"return x * x;"})},K0="return (a - b) * (a - b);",Fj=qt({opSnippet:K0,packedOpSnippet:K0}),Lj={kernelName:yc,backendName:"webgl",kernelFunc:Fj},Mj={kernelName:$u,backendName:"webgl",kernelFunc:function Bj(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");const i=lr(e.readSync(s.dataId)),a=Q4(i,"string",r);return e.makeTensorInfo(s.shape,"string",a)}},Vj={kernelName:$c,backendName:"webgl",kernelFunc:function zj({inputs:n,attrs:t,backend:e}){const{x:r}=n,o=new vr(r.shape,Mn+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(o,[r],r.dtype)}};class Wj{constructor(t,e,r){this.variableNames=["x"],this.outputShape=r;const s=r.length,o=xt(r.length),i=xt(r.length);let a="";if(1===s)a="coords * strides + begin";else{let u=0;a=r.map((l,c)=>(u++,1===r.length?`coords * strides[${c}] + begin[${c}]`:`coords[${u-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}const Gj={kernelName:xc,backendName:"webgl",kernelFunc:function Uj(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{begin:o,end:i,strides:a,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:h}=r,{finalShapeSparse:p,finalShape:m,isIdentity:y,sliceDim0:g,isSimpleSlice:x,begin:w,end:S,strides:k}=pd(s.shape,o,i,a,u,l,c,d,h);let _;if(y)_=le({inputs:{x:s},backend:e,attrs:{shape:m}});else if(g||x){N(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);const P=cd(w,S,k),L=Vi({inputs:{x:s},backend:e,attrs:{begin:w,size:P}});_=le({inputs:{x:L},backend:e,attrs:{shape:m}}),e.disposeIntermediateTensorInfo(L)}else if(e.shouldExecuteOnCPU([s])){const L=e.readSync(s.dataId),M=dt(s.shape,s.dtype,L),W=Z4(p,M,k,w);_=e.makeTensorInfo(m,s.dtype,W.values)}else{const L=new Wj(w,k,p);_=e.runWebGLProgram(L,[s],s.dtype)}const A=le({inputs:{x:_},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(_),A}},jj={kernelName:bc,backendName:"webgl",kernelFunc:function Hj(n){const{inputs:t,backend:e,attrs:r}=n,{separator:s,nGramWidths:o,leftPad:i,rightPad:a,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:d}=t,h=e.readSync(c.dataId),p=e.readSync(d.dataId),[m,y]=J4(h,p,s,o,i,a,u,l);return[e.makeTensorInfo([m.length],"string",m),e.makeTensorInfo(d.shape,"int32",y)]}},Xj={kernelName:Ep,backendName:"webgl",kernelFunc:function Kj(n){const{inputs:t,backend:e,attrs:r}=n,{skipEmpty:s}=r,{input:o,delimiter:i}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const a=e.readSync(o.dataId),u=e.readSync(i.dataId)[0],[l,c,d]=ez(a,u,s),h=c.length;return[e.makeTensorInfo([h,2],"int32",l),e.makeTensorInfo([h],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(d))]}},Yj={kernelName:Rp,backendName:"webgl",kernelFunc:function qj(n){const{inputs:t,backend:e,attrs:r}=n,{numBuckets:s}=r,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=e.readSync(o.dataId),a=tz(i,s);return e.makeTensorInfo(o.shape,"int32",a)}},Zj={kernelName:"Tan",backendName:"webgl",kernelFunc:nt({opSnippet:"return tan(x);"})},Jj=nt({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),eK={kernelName:vc,backendName:"webgl",kernelFunc:Jj},nK={kernelName:nc,backendName:"webgl",kernelFunc:function tK(n){const{inputs:t,backend:e}=n,{tensor:s,indices:o,updates:i}=t,{sliceRank:a,numUpdates:u,sliceSize:l,strides:c,outputSize:d}=po(0,o,s.shape),h=[d/l,l];if(0===d)return e.makeTensorInfo(s.shape,o.dtype);const p=le({inputs:{x:o},backend:e,attrs:{shape:[u,a]}}),m=le({inputs:{x:i},backend:e,attrs:{shape:[u,l]}}),y=le({inputs:{x:s},backend:e,attrs:{shape:h}}),g=new gp(u,a,p.shape.length,m.shape.length,c,h,!1,!0),x=e.runWebGLProgram(g,[m,p,y],y.dtype),w=le({inputs:{x},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),w}};class rK{constructor(t,e){this.variableNames=["A"];const r=new Array(t.length);for(let i=0;i<r.length;i++)r[i]=t[i]*e[i];this.outputShape=r,this.rank=r.length;const s=xt(this.rank),o=function sK(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let s=0;s<n.length;s++)r.push(`imod(${e[s]}, ${n[s]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function X0(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{reps:o}=r;if("string"===s.dtype||s.shape.length>5){const u=e.readSync(s.dataId),l="string"===s.dtype?u.map(h=>Fr(h)):u,c=dt(s.shape,s.dtype,l),d=rz(c,o);return e.makeTensorInfo(d.shape,d.dtype,d.values)}const i=new rK(s.shape,o);return e.runWebGLProgram(i,[s],s.dtype)}const oK={kernelName:_u,backendName:"webgl",kernelFunc:X0};class iK{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class aK{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Ro(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function q0(n){let t=1;for(;t<n;)t*=2;return t}const lK={kernelName:Cc,backendName:"webgl",kernelFunc:function uK(n){const{inputs:t,backend:e,attrs:r}=n,{x:s}=t,{k:o,sorted:i}=r,a=z().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=z().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=s.shape,c=l[l.length-1];if(e.shouldExecuteOnCPU([s])||c<a||o>u){const W=e.readSync(s.dataId),[q,re]=sz(W,l,s.dtype,o,i);return[e.makeTensorInfo(q.shape,q.dtype,q.values),e.makeTensorInfo(re.shape,re.dtype,re.values)]}if(0===o)return l[l.length-1]=0,[e.makeTensorInfo(l,s.dtype,[]),e.makeTensorInfo(l,"int32",[])];if(1===c)return[s,du({attrs:{shape:l,dtype:"int32",value:0},backend:e})];const d=e.texData.get(s.dataId),h=null!==d&&d.isPacked,p=h?e.unpackTensor(s):s,y=j(l)/c,g=le({inputs:{x:p},attrs:{shape:[y,c]},backend:e});h&&Ro(e,p);const x=q0(o),w=q0(c);let S=null;const k=()=>null===S?[g,g]:[g,S],_=(W,q,re)=>{const oe=k(),ge=new iK(re),qe=S;S=e.runWebGLProgram(ge,oe,"int32",[[c],[null===S?1:0],[Number.NEGATIVE_INFINITY],[W],[q]]),Ro(e,qe)};for(let W=1;W<x;W*=2){const q=2*W;for(let re=W;re>=1;re/=2)_(q,re,[y,w])}for(let W=w;W>x;W/=2){const q=k(),re=new aK([y,W/2]),Ie=S;S=e.runWebGLProgram(re,q,"int32",[[c],[null===S?1:0],[x]]),Ro(e,Ie);const ve=x/2,qe=2*ve;for(let Ye=ve;Ye>=1;Ye/=2)_(qe,Ye,S.shape)}let A=S;S=Vi({inputs:{x:S},backend:e,attrs:{begin:0,size:[y,o]}}),Ro(e,A);let P=L0({inputs:{x:g,indices:S},backend:e,attrs:{axis:1,batchDims:1}});Ro(e,g);const L=l.slice(0,-1);L.push(o),A=S,S=le({inputs:{x:S},attrs:{shape:L},backend:e}),Ro(e,A);const M=P;return P=le({inputs:{x:P},attrs:{shape:L},backend:e}),Ro(e,M),[P,S]}};class cK{constructor(t,e,r,s,o,i){this.variableNames=["Image","Transforms"],this.outputShape=i;const a="nearest"===r?1:2;let u;switch(s){case"constant":default:u=1;break;case"reflect":u=2;break;case"wrap":u=3;break;case"nearest":u=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${u} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${u} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${u} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${a} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const hK={kernelName:Sc,backendName:"webgl",kernelFunc:function dK(n){const{inputs:t,backend:e,attrs:r}=n,{image:s,transforms:o}=t,{interpolation:i,fillMode:a,fillValue:u,outputShape:l}=r,[c,d,h,p]=s.shape,[m,y]=null!=l?l:[d,h],x=new cK(d,h,i,a,u,[c,m,y,p]);return e.runWebGLProgram(x,[s,o],"float32")}},fK={kernelName:"Unique",backendName:"webgl",kernelFunc:function pK(n){const{inputs:t,attrs:e,backend:r}=n,{axis:s}=e,{x:o}=t;ou(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(o.dataId),{outputValues:a,outputShape:u,indices:l}=oz(i,s,o.shape,o.dtype);return[r.makeTensorInfo(u,o.dtype,a),r.makeTensorInfo([l.length],"int32",l)]}},gK={kernelName:Ic,backendName:"webgl",kernelFunc:function mK(n){const{inputs:t,backend:e,attrs:r}=n,{value:s}=t;let{axis:o}=r;o<0&&(o+=s.shape.length);const i=s,a=i.shape.length,u=s.shape[o],l=new Array(a-1);let c=0;for(let y=0;y<a;y++)y!==o&&(l[c++]=i.shape[y]);const d=[],h=new Array(a).fill(0),p=i.shape.slice();p[o]=1;const m=new Array(u);for(let y=0;y<m.length;y++){h[o]=y;const g=Vi({inputs:{x:i},backend:e,attrs:{begin:h,size:p}}),x=le({inputs:{x:g},backend:e,attrs:{shape:l}});m[y]=x,d.push(g)}return d.forEach(y=>e.disposeIntermediateTensorInfo(y)),m}};class yK{constructor(t,e){this.variableNames=["x","segmentIds"];const r=t.windowSize,s=t.batchSize,o=t.inSize,i=t.numSegments,a=i*Math.ceil(o/r);this.outputShape=[s,a];const c=4*Math.floor(r/4),d=r%4,h="\n        sumValue += dot(values, segFilter);\n    ";let p="";o%r>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let m="";o%r>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${m}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${i})) * float(${r}));\n        int currentSeg = int(mod(float(outIdx), float(${i})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===d}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${h}\n        } else if (${2===d}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${h}\n        } else if (${3===d}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${h}\n        }\n        setOutput(sumValue);\n      }\n    `}}const bK={kernelName:kc,backendName:"webgl",kernelFunc:function xK(n){const{inputs:t,backend:e,attrs:r}=n,{x:s,segmentIds:o}=t,{numSegments:i}=r,a=s.shape.length,u=[];let l=0;const c=jt([l],a);let d=s;null!=c&&(d=un({inputs:{x:s},backend:e,attrs:{perm:c}}),u.push(d),l=Kt(1,a)[0]);const h=ch(d.shape,l,i),p=j([d.shape[l]]),m=le({inputs:{x:d},backend:e,attrs:{shape:[-1,p]}});u.push(m);const y=Mu(s.dtype),g=(k,_,A,P,L)=>{const M=k.shape[0],W=k.shape[1],q=Zm(W,L),oe=new yK({windowSize:q,inSize:W,batchSize:M,numSegments:L},_),ge=e.compileAndRun(oe,[k,A],P);if(u.push(ge),ge.shape[1]===L)return ge;const Ie=H0({backend:e,attrs:{start:0,stop:L,step:1,dtype:"float32"}}),ve=X0({inputs:{x:Ie},backend:e,attrs:{reps:[W/q]}});return u.push(Ie),u.push(ve),g(ge,_,ve,P,L)},w=le({inputs:{x:g(m,"unsortedSegmentSum",o,y,i)},backend:e,attrs:{shape:h}});let S=w;if(null!=c){u.push(w);const k=Ba(c);S=un({inputs:{x:S},backend:e,attrs:{perm:k}})}return u.forEach(k=>e.disposeIntermediateTensorInfo(k)),S}},wK=[Zz,eV,rV,iV,uV,dV,pV,mV,bV,vV,IV,$V,EV,PV,LV,MV,VV,HV,KV,qV,ZV,sW,iW,cW,hW,yW,bW,SW,Oz,NW,RW,OW,VW,GW,jW,XW,YW,eU,nU,sU,iU,uU,cU,pU,mU,bU,vU,IU,$U,TU,RU,PU,FU,MU,VU,WU,GU,jU,XU,YU,ZU,eG,rG,iG,uG,dG,fG,gG,xG,Pz,wG,TW,CG,IG,NG,Lz,_G,EG,AG,OG,BG,zG,WG,GG,KG,qG,QG,tH,rH,oH,lH,dH,pH,mH,yH,vH,IH,_H,PH,zz,BH,VH,GH,KH,pW,qH,QH,JH,n6,i6,Mz,u6,c6,h6,f6,m6,fW,EH,y6,w6,S6,Wz,$6,E6,P6,L6,V6,U6,H6,K6,Y6,J6,nj,oj,uj,cj,fj,gj,rW,AH,xj,bj,vj,Sj,kj,$j,Tj,Rj,Dj,Oj,Lj,Mj,Vj,Gj,jj,Xj,Yj,RH,qz,Zj,eK,nK,oK,lK,hK,Yz,fK,gK,bK,YH];for(const n of wK)Ec(n);const _s={"Bicep Curl":{states:{GOING_UP:0,GOING_DOWN:1},joints:[5,6,7,8,9,10,11,12],initial_reps:.5,initial_state:0,exercise_function:function NK(n,t,e,r){const[s,o,i,a]=t;return null===s||null===o||null===i||null===a||(s<45&&o<45&&i<40&&a<40&&e===r.GOING_UP?(e=r.GOING_DOWN,n+=.5):s>120&&o>120&&i<40&&a<40&&e===r.GOING_DOWN&&(e=r.GOING_UP,n+=.5)),[n,e]},angles_function:function SK(n){return xp(n).concat(yp(n))}},"Left Bicep Curl":{states:{GOING_UP:0,GOING_DOWN:1},joints:[5,7,9],initial_reps:.5,initial_state:0,exercise_function:Y0,angles_function:function vK(n){return Ts(n[5],n[7],n[9])}},"Right Bicep Curl":{states:{GOING_UP:0,GOING_DOWN:1},joints:[6,8,10],initial_reps:.5,initial_state:0,exercise_function:Y0,angles_function:function CK(n){return Ts(n[6],n[8],n[10])}},"Triceps Extension":{states:{GOING_UP:0,GOING_DOWN:1},joints:[5,6,7,8,9,10,11,12],initial_reps:.5,initial_state:1,exercise_function:function $K(n,t,e,r){const[s,o,i,a]=t;return null===s||null===o||null===i||null===a||(s<45&&o<45&&i<20&&a<20&&e===r.GOING_UP?(e=r.GOING_DOWN,n+=.5):s>145&&o>145&&i<20&&a<20&&e===r.GOING_DOWN&&(e=r.GOING_UP,n+=.5)),[n,e]},angles_function:function IK(n){return xp(n).concat(yp(n))}},"Shoulder Press":{states:{GOING_UP:0,GOING_DOWN:1},joints:[5,6,7,8,9,10],initial_reps:.5,initial_state:0,exercise_function:function _K(n,t,e,r){const[s,o,i,a]=t;return null===s||null===o||null===i||null===a||(i<145&&a<145&&s>140&&o>140&&e===r.GOING_UP?(e=r.GOING_DOWN,n+=.5):i>160&&a>160&&s<110&&o<110&&e===r.GOING_DOWN&&(e=r.GOING_UP,n+=.5)),[n,e]},angles_function:function kK(n){const[t,e]=xp(n),r=n[5],i=n[6],a=n[8];return[t,e,Ts(n[7],r,i),Ts(a,i,r)]}},"Shoulder Side Raise":{states:{GOING_UP:0,GOING_DOWN:1},joints:[5,6,7,8,9,10,11,12],initial_reps:.5,initial_state:0,exercise_function:function TK(n,t,e,r){const[s,o]=t;return console.log(t),null===s||null===o||(s>=85&&o>=85&&e===r.GOING_UP?(e=r.GOING_DOWN,n+=.5):s<20&&o<20&&e===r.GOING_DOWN&&(e=r.GOING_UP,n+=.5)),[n,e]},angles_function:yp}};function Ts(n,t,e){try{return Math.acos(((n.x-t.x)*(e.x-t.x)+(n.y-t.y)*(e.y-t.y))/(Math.sqrt(Math.pow(n.x-t.x,2)+Math.pow(n.y-t.y,2))*Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))))*(180/Math.PI)}catch{return null}}function yp(n){const s=n[6],o=n[8],i=n[12];return[Ts(n[11],n[5],n[7]),Ts(i,s,o)]}function xp(n){const s=n[6],o=n[8],i=n[10];return[Ts(n[5],n[7],n[9]),Ts(s,o,i)]}function Y0(n,t,e,r){return null===t||(t<45&&e===r.GOING_UP?(e=r.GOING_DOWN,n+=.5):t>140&&e===r.GOING_DOWN&&(e=r.GOING_UP,n+=.5)),[n,e]}var Xe=H(4496);const EK=["video"],RK=["canvas"],AK=["canvasRepetitions"];function DK(n,t){if(1&n&&(Xe.I0R(0,"ion-select-option",12),Xe.OEk(1),Xe.C$Y()),2&n){const e=t.$implicit;Xe.E7m("value",e),Xe.yG2(),Xe.cNF(e)}}const PK=[{path:"",component:(()=>{var n;class t{constructor(){this.currentExercise="Bicep Curl",this.stateWorkout=!1,this.EDGES=[[0,1],[0,2],[1,3],[2,4],[0,5],[0,6],[5,7],[7,9],[6,8],[8,10],[5,6],[5,11],[6,12],[11,12],[11,13],[13,15],[12,14],[14,16]],this.listExercises=["Triceps Extension","Bicep Curl","Left Bicep Curl","Right Bicep Curl","Shoulder Press","Shoulder Side Raise"]}ngAfterViewInit(){var r=this;return(0,X.c)(function*(){r.ctx=r.canvas.nativeElement.getContext("2d"),r.ctxRepetitions=r.canvasRepetitions.nativeElement.getContext("2d");const o=yield navigator.mediaDevices.getUserMedia({video:{}});r.video.nativeElement.srcObject=o,yield r.video.nativeElement.play(),console.log(r.ctxRepetitions),r.canvasRepetitions.nativeElement.width=r.video.nativeElement.videoWidth,r.canvasRepetitions.nativeElement.height=r.video.nativeElement.videoHeight,r.canvas.nativeElement.width=r.video.nativeElement.videoWidth,r.canvas.nativeElement.height=r.video.nativeElement.videoHeight,r.handleChange({detail:{value:"Bicep Curl"}}),yield sf(),r.init()})()}handleChange(r){this.currentExercise=r.detail.value,console.log("Current exercise: "+this.currentExercise),this.reps=_s[this.currentExercise].initial_reps,this.state=_s[this.currentExercise].initial_state,this.states=_s[this.currentExercise].states,this.joints=_s[this.currentExercise].joints,this.exerciseFunction=_s[this.currentExercise].exercise_function,this.anglesFunction=_s[this.currentExercise].angles_function}init(){var r=this;return(0,X.c)(function*(){yield sf();const s={modelType:kB_modelType_SINGLEPOSE_LIGHTNING,enableTracking:!0,trackerType:Ss.BoundingBox};r.detector=yield function IB(n,t){return Ze(this,void 0,void 0,function(){var e,r;return Je(this,function(s){switch(n){case sn.PoseNet:return[2,SB(t)];case sn.BlazePose:if(r=void 0,null!=(e=t)){if("tfjs"===e.runtime)return[2,JL(t)];if("mediapipe"===e.runtime)return[2,NL(t)];r=e.runtime}throw new Error("Expect modelConfig.runtime to be either 'tfjs' "+"or 'mediapipe', but got ".concat(r));case sn.MoveNet:return[2,oB(t)];default:throw new Error("".concat(n," is not a supported model name."))}})})}(sn.MoveNet,s),yield r.detectPose()})()}detectPose(){var r=this;return(0,X.c)(function*(){const s=yield r.detector.estimatePoses(r.video.nativeElement,{flipHorizontal:!1});r.ctx.clearRect(0,0,r.canvas.nativeElement.width,r.canvas.nativeElement.height),r.ctxRepetitions.clearRect(0,0,r.canvasRepetitions.nativeElement.width,r.canvasRepetitions.nativeElement.height),r.ctxRepetitions.font="50px Arial";let o=r.canvasRepetitions.nativeElement.width/100;r.ctxRepetitions.fillText(Math.trunc(r.reps).toString(),o,100),s&&s[0]?(r.ctx.globalAlpha=1,r.drawAllEdges(s[0].keypoints,r.EDGES,r.ctx),r.drawKeypoints(s[0].keypoints,r.ctx),r.exerciseJointsAreVisible(s[0].keypoints,r.joints)&&!r.stateWorkout&&([r.reps,r.state]=r.exerciseFunction(r.reps,r.anglesFunction(s[0].keypoints),r.state,r.states))):(r.reps=_s[r.currentExercise].initial_reps,r.state=_s[r.currentExercise].initial_state),requestAnimationFrame(r.detectPose.bind(r))})()}drawAllEdges(r,s,o){for(let i=0;i<s.length;i++){if(r[s[i][0]].score<.3||r[s[i][1]].score<.3)continue;const a=s[i],u=r[a[0]],l=r[a[1]];o.beginPath(),o.moveTo(u.x,u.y),o.lineTo(l.x,l.y),o.strokeStyle="white",o.stroke()}}drawKeypoints(r,s){for(let o=0;o<r.length;o++){const{x:i,y:a,score:u}=r[o];u>=.3&&(s.beginPath(),s.arc(i,a,5,0,6),s.fillStyle="red",s.fill(),s.stroke())}}exerciseJointsAreVisible(r,s){for(let o=0;o<s.length;o++)if(r[s[o]].score<.3)return!1;return!0}stopWorkout(){this.stateWorkout=!this.stateWorkout,console.log(this.stateWorkout)}}return(n=t).\u0275fac=function(r){return new(r||n)},n.\u0275cmp=Xe.In1({type:n,selectors:[["app-tab2"]],viewQuery:function(r,s){if(1&r&&(Xe.CC$(EK,5),Xe.CC$(RK,5),Xe.CC$(AK,5)),2&r){let o;Xe.wto(o=Xe.Gqi())&&(s.video=o.first),Xe.wto(o=Xe.Gqi())&&(s.canvas=o.first),Xe.wto(o=Xe.Gqi())&&(s.canvasRepetitions=o.first)}},decls:18,vars:3,consts:[[3,"translucent"],[1,"ion-padding","camera-content",3,"fullscreen"],[1,"video-container"],["id","webcam","autoplay","",1,"inverted"],["video",""],["id","canvas",1,"inverted"],["canvas",""],["id","canvasRepetitions"],["canvasRepetitions",""],["shape","round",3,"click"],["label","Default label","placeholder","Favorite Fruit",3,"ionChange"],[3,"value",4,"ngFor","ngForOf"],[3,"value"]],template:function(r,s){1&r&&(Xe.I0R(0,"ion-header",0)(1,"ion-toolbar")(2,"ion-title"),Xe.OEk(3," Tab 2 "),Xe.C$Y()()(),Xe.I0R(4,"ion-content",1)(5,"div",2),Xe.wR5(6,"video",3,4)(8,"canvas",5,6)(10,"canvas",7,8),Xe.C$Y(),Xe.I0R(12,"ion-button",9),Xe.qCj("click",function(){return s.stopWorkout()}),Xe.OEk(13,"Stop"),Xe.C$Y(),Xe.I0R(14,"ion-list")(15,"ion-item")(16,"ion-select",10),Xe.qCj("ionChange",function(i){return s.handleChange(i)}),Xe.yuY(17,DK,2,2,"ion-select-option",11),Xe.C$Y()()()()),2&r&&(Xe.E7m("translucent",!0),Xe.yG2(4),Xe.E7m("fullscreen",!0),Xe.yG2(13),Xe.E7m("ngForOf",s.listExercises))},dependencies:[te.sn,te._i,te.wB,te.Yb,te.OC,te.Cy,te.gd,te.tM,te.Md,te.IT,_e.ay],styles:['@charset "UTF-8";.inverted[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:auto;display:block;transform:rotateY(180deg)}canvas[_ngcontent-%COMP%]{aspect-ratio:attr(width)/attr(height)}#canvasRepetitions[_ngcontent-%COMP%]{position:absolute;top:0;left:0}']}),t})()}];let OK=(()=>{var n;class t{}return(n=t).\u0275fac=function(r){return new(r||n)},n.\u0275mod=Xe.a4G({type:n}),n.\u0275inj=Xe.s3X({imports:[st.qQ.forChild(PK),st.qQ]}),t})(),FK=(()=>{var n;class t{}return(n=t).\u0275fac=function(r){return new(r||n)},n.\u0275mod=Xe.a4G({type:n}),n.\u0275inj=Xe.s3X({imports:[te.wZ,_e.MD,Fe.y,Ve.C,OK]}),t})()},9476:Re=>{Re.exports=H;var Ge=null;try{Ge=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function H(U,D,te){this.low=0|U,this.high=0|D,this.unsigned=!!te}function Ee(U){return!0===(U&&U.__isLong__)}Object.defineProperty(H.prototype,"__isLong__",{value:!0}),H.isLong=Ee;var ht={},ye={};function vt(U,D){var te,_e,Fe;return D?(Fe=0<=(U>>>=0)&&U<256)&&(_e=ye[U])?_e:(te=Ne(U,(0|U)<0?-1:0,!0),Fe&&(ye[U]=te),te):(Fe=-128<=(U|=0)&&U<128)&&(_e=ht[U])?_e:(te=Ne(U,U<0?-1:0,!1),Fe&&(ht[U]=te),te)}function ke(U,D){if(isNaN(U))return D?Nt:rt;if(D){if(U<0)return Nt;if(U>=J)return Ke}else{if(U<=-me)return et;if(U+1>=me)return He}return U<0?ke(-U,D).neg():Ne(U%Y|0,U/Y|0,D)}function Ne(U,D,te){return new H(U,D,te)}H.fromInt=vt,H.fromNumber=ke,H.fromBits=Ne;var Oe=Math.pow;function fe(U,D,te){if(0===U.length)throw Error("empty string");if("NaN"===U||"Infinity"===U||"+Infinity"===U||"-Infinity"===U)return rt;if("number"==typeof D?(te=D,D=!1):D=!!D,(te=te||10)<2||36<te)throw RangeError("radix");var _e;if((_e=U.indexOf("-"))>0)throw Error("interior hyphen");if(0===_e)return fe(U.substring(1),D,te).neg();for(var Fe=ke(Oe(te,8)),Ve=rt,st=0;st<U.length;st+=8){var X=Math.min(8,U.length-st),St=parseInt(U.substring(st,st+X),te);if(X<8){var Lt=ke(Oe(te,X));Ve=Ve.mul(Lt).add(ke(St))}else Ve=(Ve=Ve.mul(Fe)).add(ke(St))}return Ve.unsigned=D,Ve}function V(U,D){return"number"==typeof U?ke(U,D):"string"==typeof U?fe(U,D):Ne(U.low,U.high,"boolean"==typeof D?D:U.unsigned)}H.fromString=fe,H.fromValue=V;var Y=4294967296,J=Y*Y,me=J/2,xe=vt(1<<24),rt=vt(0);H.ZERO=rt;var Nt=vt(0,!0);H.UZERO=Nt;var Me=vt(1);H.ONE=Me;var yn=vt(1,!0);H.UONE=yn;var cn=vt(-1);H.NEG_ONE=cn;var He=Ne(-1,2147483647,!1);H.MAX_VALUE=He;var Ke=Ne(-1,-1,!0);H.MAX_UNSIGNED_VALUE=Ke;var et=Ne(0,-2147483648,!1);H.MIN_VALUE=et;var Q=H.prototype;Q.toInt=function(){return this.unsigned?this.low>>>0:this.low},Q.toNumber=function(){return this.unsigned?(this.high>>>0)*Y+(this.low>>>0):this.high*Y+(this.low>>>0)},Q.toString=function(D){if((D=D||10)<2||36<D)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(et)){var te=ke(D),_e=this.div(te),Fe=_e.mul(te).sub(this);return _e.toString(D)+Fe.toInt().toString(D)}return"-"+this.neg().toString(D)}for(var Ve=ke(Oe(D,6),this.unsigned),st=this,X="";;){var St=st.div(Ve),$t=(st.sub(St.mul(Ve)).toInt()>>>0).toString(D);if((st=St).isZero())return $t+X;for(;$t.length<6;)$t="0"+$t;X=""+$t+X}},Q.getHighBits=function(){return this.high},Q.getHighBitsUnsigned=function(){return this.high>>>0},Q.getLowBits=function(){return this.low},Q.getLowBitsUnsigned=function(){return this.low>>>0},Q.getNumBitsAbs=function(){if(this.isNegative())return this.eq(et)?64:this.neg().getNumBitsAbs();for(var D=0!=this.high?this.high:this.low,te=31;te>0&&!(D&1<<te);te--);return 0!=this.high?te+33:te+1},Q.isZero=function(){return 0===this.high&&0===this.low},Q.eqz=Q.isZero,Q.isNegative=function(){return!this.unsigned&&this.high<0},Q.isPositive=function(){return this.unsigned||this.high>=0},Q.isOdd=function(){return 1==(1&this.low)},Q.isEven=function(){return 0==(1&this.low)},Q.equals=function(D){return Ee(D)||(D=V(D)),(this.unsigned===D.unsigned||this.high>>>31!=1||D.high>>>31!=1)&&this.high===D.high&&this.low===D.low},Q.eq=Q.equals,Q.notEquals=function(D){return!this.eq(D)},Q.neq=Q.notEquals,Q.ne=Q.notEquals,Q.lessThan=function(D){return this.comp(D)<0},Q.lt=Q.lessThan,Q.lessThanOrEqual=function(D){return this.comp(D)<=0},Q.lte=Q.lessThanOrEqual,Q.le=Q.lessThanOrEqual,Q.greaterThan=function(D){return this.comp(D)>0},Q.gt=Q.greaterThan,Q.greaterThanOrEqual=function(D){return this.comp(D)>=0},Q.gte=Q.greaterThanOrEqual,Q.ge=Q.greaterThanOrEqual,Q.compare=function(D){if(Ee(D)||(D=V(D)),this.eq(D))return 0;var te=this.isNegative(),_e=D.isNegative();return te&&!_e?-1:!te&&_e?1:this.unsigned?D.high>>>0>this.high>>>0||D.high===this.high&&D.low>>>0>this.low>>>0?-1:1:this.sub(D).isNegative()?-1:1},Q.comp=Q.compare,Q.negate=function(){return!this.unsigned&&this.eq(et)?et:this.not().add(Me)},Q.neg=Q.negate,Q.add=function(D){Ee(D)||(D=V(D));var $t=0,Wt=0,It=0,it=0;return It+=(it+=(65535&this.low)+(65535&D.low))>>>16,Wt+=(It+=(this.low>>>16)+(D.low>>>16))>>>16,$t+=(Wt+=(65535&this.high)+(65535&D.high))>>>16,$t+=(this.high>>>16)+(D.high>>>16),Ne((It&=65535)<<16|(it&=65535),($t&=65535)<<16|(Wt&=65535),this.unsigned)},Q.subtract=function(D){return Ee(D)||(D=V(D)),this.add(D.neg())},Q.sub=Q.subtract,Q.multiply=function(D){if(this.isZero())return rt;if(Ee(D)||(D=V(D)),Ge)return Ne(Ge.mul(this.low,this.high,D.low,D.high),Ge.get_high(),this.unsigned);if(D.isZero())return rt;if(this.eq(et))return D.isOdd()?et:rt;if(D.eq(et))return this.isOdd()?et:rt;if(this.isNegative())return D.isNegative()?this.neg().mul(D.neg()):this.neg().mul(D).neg();if(D.isNegative())return this.mul(D.neg()).neg();if(this.lt(xe)&&D.lt(xe))return ke(this.toNumber()*D.toNumber(),this.unsigned);var Fe=65535&this.high,Ve=this.low>>>16,st=65535&this.low,St=65535&D.high,Lt=D.low>>>16,$t=65535&D.low,Wt=0,It=0,it=0,Cr=0;return it+=(Cr+=st*$t)>>>16,It+=(it+=Ve*$t)>>>16,it&=65535,It+=(it+=st*Lt)>>>16,Wt+=(It+=Fe*$t)>>>16,It&=65535,Wt+=(It+=Ve*Lt)>>>16,It&=65535,Wt+=(It+=st*St)>>>16,Wt+=(this.high>>>16)*$t+Fe*Lt+Ve*St+st*(D.high>>>16),Ne((it&=65535)<<16|(Cr&=65535),(Wt&=65535)<<16|(It&=65535),this.unsigned)},Q.mul=Q.multiply,Q.divide=function(D){if(Ee(D)||(D=V(D)),D.isZero())throw Error("division by zero");var _e,Fe,Ve;if(Ge)return this.unsigned||-2147483648!==this.high||-1!==D.low||-1!==D.high?Ne((this.unsigned?Ge.div_u:Ge.div_s)(this.low,this.high,D.low,D.high),Ge.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Nt:rt;if(this.unsigned){if(D.unsigned||(D=D.toUnsigned()),D.gt(this))return Nt;if(D.gt(this.shru(1)))return yn;Ve=Nt}else{if(this.eq(et))return D.eq(Me)||D.eq(cn)?et:D.eq(et)?Me:(_e=this.shr(1).div(D).shl(1)).eq(rt)?D.isNegative()?Me:cn:(Fe=this.sub(D.mul(_e)),Ve=_e.add(Fe.div(D)));if(D.eq(et))return this.unsigned?Nt:rt;if(this.isNegative())return D.isNegative()?this.neg().div(D.neg()):this.neg().div(D).neg();if(D.isNegative())return this.div(D.neg()).neg();Ve=rt}for(Fe=this;Fe.gte(D);){_e=Math.max(1,Math.floor(Fe.toNumber()/D.toNumber()));for(var X=Math.ceil(Math.log(_e)/Math.LN2),St=X<=48?1:Oe(2,X-48),Lt=ke(_e),$t=Lt.mul(D);$t.isNegative()||$t.gt(Fe);)$t=(Lt=ke(_e-=St,this.unsigned)).mul(D);Lt.isZero()&&(Lt=Me),Ve=Ve.add(Lt),Fe=Fe.sub($t)}return Ve},Q.div=Q.divide,Q.modulo=function(D){return Ee(D)||(D=V(D)),Ge?Ne((this.unsigned?Ge.rem_u:Ge.rem_s)(this.low,this.high,D.low,D.high),Ge.get_high(),this.unsigned):this.sub(this.div(D).mul(D))},Q.mod=Q.modulo,Q.rem=Q.modulo,Q.not=function(){return Ne(~this.low,~this.high,this.unsigned)},Q.and=function(D){return Ee(D)||(D=V(D)),Ne(this.low&D.low,this.high&D.high,this.unsigned)},Q.or=function(D){return Ee(D)||(D=V(D)),Ne(this.low|D.low,this.high|D.high,this.unsigned)},Q.xor=function(D){return Ee(D)||(D=V(D)),Ne(this.low^D.low,this.high^D.high,this.unsigned)},Q.shiftLeft=function(D){return Ee(D)&&(D=D.toInt()),0==(D&=63)?this:D<32?Ne(this.low<<D,this.high<<D|this.low>>>32-D,this.unsigned):Ne(0,this.low<<D-32,this.unsigned)},Q.shl=Q.shiftLeft,Q.shiftRight=function(D){return Ee(D)&&(D=D.toInt()),0==(D&=63)?this:D<32?Ne(this.low>>>D|this.high<<32-D,this.high>>D,this.unsigned):Ne(this.high>>D-32,this.high>=0?0:-1,this.unsigned)},Q.shr=Q.shiftRight,Q.shiftRightUnsigned=function(D){if(Ee(D)&&(D=D.toInt()),0==(D&=63))return this;var te=this.high;return D<32?Ne(this.low>>>D|te<<32-D,te>>>D,this.unsigned):Ne(32===D?te:te>>>D-32,0,this.unsigned)},Q.shru=Q.shiftRightUnsigned,Q.shr_u=Q.shiftRightUnsigned,Q.toSigned=function(){return this.unsigned?Ne(this.low,this.high,!1):this},Q.toUnsigned=function(){return this.unsigned?this:Ne(this.low,this.high,!0)},Q.toBytes=function(D){return D?this.toBytesLE():this.toBytesBE()},Q.toBytesLE=function(){var D=this.high,te=this.low;return[255&te,te>>>8&255,te>>>16&255,te>>>24,255&D,D>>>8&255,D>>>16&255,D>>>24]},Q.toBytesBE=function(){var D=this.high,te=this.low;return[D>>>24,D>>>16&255,D>>>8&255,255&D,te>>>24,te>>>16&255,te>>>8&255,255&te]},H.fromBytes=function(D,te,_e){return _e?H.fromBytesLE(D,te):H.fromBytesBE(D,te)},H.fromBytesLE=function(D,te){return new H(D[0]|D[1]<<8|D[2]<<16|D[3]<<24,D[4]|D[5]<<8|D[6]<<16|D[7]<<24,te)},H.fromBytesBE=function(D,te){return new H(D[4]<<24|D[5]<<16|D[6]<<8|D[7],D[0]<<24|D[1]<<16|D[2]<<8|D[3],te)}},1276:(Re,Ge,H)=>{var Ee=H(128),ht=H(1376),ye=H(1096),vt=H(9400),ke=H(8016),Ne=H(3713),Oe=H(7908);Oe.alea=Ee,Oe.xor128=ht,Oe.xorwow=ye,Oe.xorshift7=vt,Oe.xor4096=ke,Oe.tychei=Ne,Re.exports=Oe},128:function(Re,Ge,H){var Ee;!function(ht,ye,vt){function ke(V){var ee=this,ce=function fe(){var V=4022871197;return function(ce){ce=String(ce);for(var Y=0;Y<ce.length;Y++){var J=.02519603282416938*(V+=ce.charCodeAt(Y));J-=V=J>>>0,V=(J*=V)>>>0,V+=4294967296*(J-=V)}return 2.3283064365386963e-10*(V>>>0)}}();ee.next=function(){var Y=2091639*ee.s0+2.3283064365386963e-10*ee.c;return ee.s0=ee.s1,ee.s1=ee.s2,ee.s2=Y-(ee.c=0|Y)},ee.c=1,ee.s0=ce(" "),ee.s1=ce(" "),ee.s2=ce(" "),ee.s0-=ce(V),ee.s0<0&&(ee.s0+=1),ee.s1-=ce(V),ee.s1<0&&(ee.s1+=1),ee.s2-=ce(V),ee.s2<0&&(ee.s2+=1),ce=null}function Ne(V,ee){return ee.c=V.c,ee.s0=V.s0,ee.s1=V.s1,ee.s2=V.s2,ee}function Oe(V,ee){var ce=new ke(V),Y=ee&&ee.state,J=ce.next;return J.int32=function(){return 4294967296*ce.next()|0},J.double=function(){return J()+11102230246251565e-32*(2097152*J()|0)},J.quick=J,Y&&("object"==typeof Y&&Ne(Y,ce),J.state=function(){return Ne(ce,{})}),J}ye&&ye.exports?ye.exports=Oe:H.amdD&&H.amdO?void 0!==(Ee=function(){return Oe}.call(Ge,H,Ge,ye))&&(ye.exports=Ee):this.alea=Oe}(0,Re=H.nmd(Re))},3713:function(Re,Ge,H){var Ee;!function(ht,ye,vt){function ke(fe){var V=this,ee="";V.next=function(){var Y=V.b,J=V.c,me=V.d,xe=V.a;return Y=Y<<25^Y>>>7^J,J=J-me|0,me=me<<24^me>>>8^xe,xe=xe-Y|0,V.b=Y=Y<<20^Y>>>12^J,V.c=J=J-me|0,V.d=me<<16^J>>>16^xe,V.a=xe-Y|0},V.a=0,V.b=0,V.c=-1640531527,V.d=1367130551,fe===Math.floor(fe)?(V.a=fe/4294967296|0,V.b=0|fe):ee+=fe;for(var ce=0;ce<ee.length+20;ce++)V.b^=0|ee.charCodeAt(ce),V.next()}function Ne(fe,V){return V.a=fe.a,V.b=fe.b,V.c=fe.c,V.d=fe.d,V}function Oe(fe,V){var ee=new ke(fe),ce=V&&V.state,Y=function(){return(ee.next()>>>0)/4294967296};return Y.double=function(){do{var xe=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===xe);return xe},Y.int32=ee.next,Y.quick=Y,ce&&("object"==typeof ce&&Ne(ce,ee),Y.state=function(){return Ne(ee,{})}),Y}ye&&ye.exports?ye.exports=Oe:H.amdD&&H.amdO?void 0!==(Ee=function(){return Oe}.call(Ge,H,Ge,ye))&&(ye.exports=Ee):this.tychei=Oe}(0,Re=H.nmd(Re))},1376:function(Re,Ge,H){var Ee;!function(ht,ye,vt){function ke(fe){var V=this,ee="";V.x=0,V.y=0,V.z=0,V.w=0,V.next=function(){var Y=V.x^V.x<<11;return V.x=V.y,V.y=V.z,V.z=V.w,V.w^=V.w>>>19^Y^Y>>>8},fe===(0|fe)?V.x=fe:ee+=fe;for(var ce=0;ce<ee.length+64;ce++)V.x^=0|ee.charCodeAt(ce),V.next()}function Ne(fe,V){return V.x=fe.x,V.y=fe.y,V.z=fe.z,V.w=fe.w,V}function Oe(fe,V){var ee=new ke(fe),ce=V&&V.state,Y=function(){return(ee.next()>>>0)/4294967296};return Y.double=function(){do{var xe=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===xe);return xe},Y.int32=ee.next,Y.quick=Y,ce&&("object"==typeof ce&&Ne(ce,ee),Y.state=function(){return Ne(ee,{})}),Y}ye&&ye.exports?ye.exports=Oe:H.amdD&&H.amdO?void 0!==(Ee=function(){return Oe}.call(Ge,H,Ge,ye))&&(ye.exports=Ee):this.xor128=Oe}(0,Re=H.nmd(Re))},8016:function(Re,Ge,H){var Ee;!function(ht,ye,vt){function ke(fe){var V=this;V.next=function(){var me,xe,ce=V.w,Y=V.X,J=V.i;return V.w=ce=ce+1640531527|0,xe=Y[J+34&127],me=Y[J=J+1&127],xe^=xe<<13,me^=me<<17,xe=Y[J]=(xe^=xe>>>15)^(me^=me>>>12),V.i=J,xe+(ce^ce>>>16)|0},function ee(ce,Y){var J,me,xe,rt,Nt,Me=[],yn=128;for(Y===(0|Y)?(me=Y,Y=null):(Y+="\0",me=0,yn=Math.max(yn,Y.length)),xe=0,rt=-32;rt<yn;++rt)Y&&(me^=Y.charCodeAt((rt+32)%Y.length)),0===rt&&(Nt=me),me^=me<<10,me^=me>>>15,me^=me<<4,me^=me>>>13,rt>=0&&(xe=0==(J=Me[127&rt]^=me+(Nt=Nt+1640531527|0))?xe+1:0);for(xe>=128&&(Me[127&(Y&&Y.length||0)]=-1),xe=127,rt=512;rt>0;--rt)me=Me[xe+34&127],J=Me[xe=xe+1&127],me^=me<<13,J^=J<<17,Me[xe]=(me^=me>>>15)^(J^=J>>>12);ce.w=Nt,ce.X=Me,ce.i=xe}(V,fe)}function Ne(fe,V){return V.i=fe.i,V.w=fe.w,V.X=fe.X.slice(),V}function Oe(fe,V){null==fe&&(fe=+new Date);var ee=new ke(fe),ce=V&&V.state,Y=function(){return(ee.next()>>>0)/4294967296};return Y.double=function(){do{var xe=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===xe);return xe},Y.int32=ee.next,Y.quick=Y,ce&&(ce.X&&Ne(ce,ee),Y.state=function(){return Ne(ee,{})}),Y}ye&&ye.exports?ye.exports=Oe:H.amdD&&H.amdO?void 0!==(Ee=function(){return Oe}.call(Ge,H,Ge,ye))&&(ye.exports=Ee):this.xor4096=Oe}(0,Re=H.nmd(Re))},9400:function(Re,Ge,H){var Ee;!function(ht,ye,vt){function ke(fe){var V=this;V.next=function(){var J,me,ce=V.x,Y=V.i;return J=ce[Y],me=(J^=J>>>7)^J<<24,me^=(J=ce[Y+1&7])^J>>>10,me^=(J=ce[Y+3&7])^J>>>3,me^=(J=ce[Y+4&7])^J<<7,J=ce[Y+7&7],ce[Y]=me^=(J^=J<<13)^J<<9,V.i=Y+1&7,me},function ee(ce,Y){var J,xe=[];if(Y===(0|Y))xe[0]=Y;else for(Y=""+Y,J=0;J<Y.length;++J)xe[7&J]=xe[7&J]<<15^Y.charCodeAt(J)+xe[J+1&7]<<13;for(;xe.length<8;)xe.push(0);for(J=0;J<8&&0===xe[J];++J);for(8==J&&(xe[7]=-1),ce.x=xe,ce.i=0,J=256;J>0;--J)ce.next()}(V,fe)}function Ne(fe,V){return V.x=fe.x.slice(),V.i=fe.i,V}function Oe(fe,V){null==fe&&(fe=+new Date);var ee=new ke(fe),ce=V&&V.state,Y=function(){return(ee.next()>>>0)/4294967296};return Y.double=function(){do{var xe=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===xe);return xe},Y.int32=ee.next,Y.quick=Y,ce&&(ce.x&&Ne(ce,ee),Y.state=function(){return Ne(ee,{})}),Y}ye&&ye.exports?ye.exports=Oe:H.amdD&&H.amdO?void 0!==(Ee=function(){return Oe}.call(Ge,H,Ge,ye))&&(ye.exports=Ee):this.xorshift7=Oe}(0,Re=H.nmd(Re))},1096:function(Re,Ge,H){var Ee;!function(ht,ye,vt){function ke(fe){var V=this,ee="";V.next=function(){var Y=V.x^V.x>>>2;return V.x=V.y,V.y=V.z,V.z=V.w,V.w=V.v,(V.d=V.d+362437|0)+(V.v=V.v^V.v<<4^Y^Y<<1)|0},V.x=0,V.y=0,V.z=0,V.w=0,V.v=0,fe===(0|fe)?V.x=fe:ee+=fe;for(var ce=0;ce<ee.length+64;ce++)V.x^=0|ee.charCodeAt(ce),ce==ee.length&&(V.d=V.x<<10^V.x>>>4),V.next()}function Ne(fe,V){return V.x=fe.x,V.y=fe.y,V.z=fe.z,V.w=fe.w,V.v=fe.v,V.d=fe.d,V}function Oe(fe,V){var ee=new ke(fe),ce=V&&V.state,Y=function(){return(ee.next()>>>0)/4294967296};return Y.double=function(){do{var xe=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===xe);return xe},Y.int32=ee.next,Y.quick=Y,ce&&("object"==typeof ce&&Ne(ce,ee),Y.state=function(){return Ne(ee,{})}),Y}ye&&ye.exports?ye.exports=Oe:H.amdD&&H.amdO?void 0!==(Ee=function(){return Oe}.call(Ge,H,Ge,ye))&&(ye.exports=Ee):this.xorwow=Oe}(0,Re=H.nmd(Re))},7908:function(Re,Ge,H){var Ee;!function(ht,ye,vt){var J,ke=256,V=vt.pow(ke,6),ee=vt.pow(2,52),ce=2*ee,Y=ke-1;function me(He,Ke,et){var Q=[],U=Me(Nt((Ke=1==Ke?{entropy:!0}:Ke||{}).entropy?[He,cn(ye)]:null==He?function yn(){try{var He;return J&&(He=J.randomBytes)?He=He(ke):(He=new Uint8Array(ke),(ht.crypto||ht.msCrypto).getRandomValues(He)),cn(He)}catch{var Ke=ht.navigator,et=Ke&&Ke.plugins;return[+new Date,ht,et,ht.screen,cn(ye)]}}():He,3),Q),D=new xe(Q),te=function(){for(var _e=D.g(6),Fe=V,Ve=0;_e<ee;)_e=(_e+Ve)*ke,Fe*=ke,Ve=D.g(1);for(;_e>=ce;)_e/=2,Fe/=2,Ve>>>=1;return(_e+Ve)/Fe};return te.int32=function(){return 0|D.g(4)},te.quick=function(){return D.g(4)/4294967296},te.double=te,Me(cn(D.S),ye),(Ke.pass||et||function(_e,Fe,Ve,st){return st&&(st.S&&rt(st,D),_e.state=function(){return rt(D,{})}),Ve?(vt.random=_e,Fe):_e})(te,U,"global"in Ke?Ke.global:this==vt,Ke.state)}function xe(He){var Ke,et=He.length,Q=this,U=0,D=Q.i=Q.j=0,te=Q.S=[];for(et||(He=[et++]);U<ke;)te[U]=U++;for(U=0;U<ke;U++)te[U]=te[D=Y&D+He[U%et]+(Ke=te[U])],te[D]=Ke;(Q.g=function(_e){for(var Fe,Ve=0,st=Q.i,X=Q.j,St=Q.S;_e--;)Fe=St[st=Y&st+1],Ve=Ve*ke+St[Y&(St[st]=St[X=Y&X+Fe])+(St[X]=Fe)];return Q.i=st,Q.j=X,Ve})(ke)}function rt(He,Ke){return Ke.i=He.i,Ke.j=He.j,Ke.S=He.S.slice(),Ke}function Nt(He,Ke){var U,et=[],Q=typeof He;if(Ke&&"object"==Q)for(U in He)try{et.push(Nt(He[U],Ke-1))}catch{}return et.length?et:"string"==Q?He:He+"\0"}function Me(He,Ke){for(var Q,et=He+"",U=0;U<et.length;)Ke[Y&U]=Y&(Q^=19*Ke[Y&U])+et.charCodeAt(U++);return cn(Ke)}function cn(He){return String.fromCharCode.apply(0,He)}if(Me(vt.random(),ye),Re.exports){Re.exports=me;try{J=H(604)}catch{}}else void 0!==(Ee=function(){return me}.call(Ge,H,Ge,Re))&&(Re.exports=Ee)}(typeof self<"u"?self:this,[],Math)},4748:()=>{},8688:()=>{},604:()=>{}}]);